import{o as e,c as a,b as t}from"./app.eb31dd5d.js";const l='{"title":"Curl","description":"Curl学习日志","frontmatter":{"title":"Curl","head":[["meta",{"name":"description","content":"Curl学习日志"}],["meta",{"name":"keywords","content":"Curl swaggerhub swagger-ui swagger"}]]},"headers":[{"level":2,"title":"-A(--user-agent <name>)","slug":"a-user-agent-name"},{"level":2,"title":"-a(--append)","slug":"a-append"},{"level":3,"title":"--basic","slug":"basic"},{"level":3,"title":"--cacert FILE","slug":"cacert-file"},{"level":3,"title":"--capath DIR","slug":"capath-dir"},{"level":3,"title":"--aws-sigv4 [provider1[:provider2[:region[:service]]]]","slug":"aws-sigv4-provider1-provider2-region-service"},{"level":2,"title":"-B(--use-ascii)","slug":"b-use-ascii"},{"level":2,"title":"-b(--cookie STRING/FILE)","slug":"b-cookie-string-file"},{"level":2,"title":"-C(--continue-at OFFSET)","slug":"c-continue-at-offset"},{"level":2,"title":"-c(--cookie-jar FILE)","slug":"c-cookie-jar-file"},{"level":3,"title":"--create-dirs","slug":"create-dirs"},{"level":3,"title":"--create-file-mode <mode>","slug":"create-file-mode-mode"},{"level":3,"title":"--crlf","slug":"crlf"},{"level":3,"title":"--crlfile FILE","slug":"crlfile-file"},{"level":3,"title":"--curves <algorithm list>","slug":"curves-algorithm-list"},{"level":2,"title":"-D(--dump-header FILE)","slug":"d-dump-header-file"},{"level":3,"title":"--egd-file FILE","slug":"egd-file-file"},{"level":3,"title":"--engine ENGINGE","slug":"engine-enginge"},{"level":3,"title":"--etag-compare <file>","slug":"etag-compare-file"},{"level":3,"title":"--etag-save <file>","slug":"etag-save-file"},{"level":3,"title":"--expect100-timeout <seconds>","slug":"expect100-timeout-seconds"},{"level":2,"title":"-d(--data DATA)","slug":"d-data-data"},{"level":3,"title":"--data-urlencode DATA","slug":"data-urlencode-data"},{"level":3,"title":"--data-ascii DATA","slug":"data-ascii-data"},{"level":3,"title":"--data-binary DATA","slug":"data-binary-data"},{"level":3,"title":"--delegation STRING","slug":"delegation-string"},{"level":3,"title":"--digest","slug":"digest"},{"level":3,"title":"--data-raw <data>","slug":"data-raw-data"},{"level":2,"title":"-E(--cert CERT[:PASSWD])","slug":"e-cert-cert-passwd"},{"level":3,"title":"--cert-type TYPE","slug":"cert-type-type"},{"level":3,"title":"--cert-status","slug":"cert-status"},{"level":3,"title":"--ciphers LIST","slug":"ciphers-list"},{"level":3,"title":"--compressed","slug":"compressed"},{"level":3,"title":"--compressed-ssh","slug":"compressed-ssh"},{"level":2,"title":"-e(--referer)","slug":"e-referer"},{"level":2,"title":"-F(--form CONTENT)","slug":"f-form-content"},{"level":3,"title":"--form-string STRING","slug":"form-string-string"},{"level":3,"title":"--ftp-account DATA","slug":"ftp-account-data"},{"level":3,"title":"--ftp-alternative-to-user COMMAND","slug":"ftp-alternative-to-user-command"},{"level":3,"title":"--ftp-create-dirs","slug":"ftp-create-dirs"},{"level":3,"title":"--ftp-method","slug":"ftp-method"},{"level":3,"title":"--ftp-pasv","slug":"ftp-pasv"},{"level":2,"title":"-f(--fail)","slug":"f-fail"},{"level":3,"title":"--fail-early","slug":"fail-early"},{"level":3,"title":"--fail-with-body","slug":"fail-with-body"},{"level":3,"title":"--false-start","slug":"false-start"},{"level":2,"title":"-G(--get)","slug":"g-get"},{"level":2,"title":"-g(--globoff)","slug":"g-globoff"},{"level":3,"title":"--happy-eyeballs-timeout-ms <milliseconds>","slug":"happy-eyeballs-timeout-ms-milliseconds"},{"level":3,"title":"--haproxy-protocol","slug":"haproxy-protocol"},{"level":2,"title":"-H(--header LINE)","slug":"h-header-line"},{"level":2,"title":"-h(--help)","slug":"h-help"},{"level":3,"title":"--hostpubmd5 <md5>","slug":"hostpubmd5-md5"},{"level":3,"title":"--hsts <file name>","slug":"hsts-file-name"},{"level":3,"title":"--http0.9","slug":"http0-9"},{"level":2,"title":"-I(--head)","slug":"i-head"},{"level":2,"title":"-i(--include)","slug":"i-include"},{"level":2,"title":"-J(--remote-header-name)","slug":"j-remote-header-name"},{"level":2,"title":"-j(--junk-session-cookies)","slug":"j-junk-session-cookies"},{"level":3,"title":"--keepalive-time SECONDS","slug":"keepalive-time-seconds"},{"level":3,"title":"--key KEY","slug":"key-key"},{"level":3,"title":"--key-type TYPE","slug":"key-type-type"},{"level":3,"title":"--krb LEVEL","slug":"krb-level"},{"level":3,"title":"--libcurl FILE","slug":"libcurl-file"},{"level":3,"title":"--limit-rate RATE","slug":"limit-rate-rate"},{"level":2,"title":"-K(--config FILE)","slug":"k-config-file"},{"level":3,"title":"--connect-timeout SECONDS","slug":"connect-timeout-seconds"},{"level":3,"title":"--connect-to <HOST1:PORT1:HOST2:PORT2>","slug":"connect-to-host1-port1-host2-port2"},{"level":2,"title":"-k(--insecure)","slug":"k-insecure"},{"level":3,"title":"--interface INTERFAC","slug":"interface-interfac"},{"level":2,"title":"-L(--location)","slug":"l-location"},{"level":3,"title":"--location-trusted","slug":"location-trusted"},{"level":3,"title":"--login-options <options>","slug":"login-options-options"},{"level":3,"title":"--mail-auth <address>","slug":"mail-auth-address"},{"level":3,"title":"--mail-from <address>","slug":"mail-from-address"},{"level":3,"title":"--mail-rcpt <address>","slug":"mail-rcpt-address"},{"level":3,"title":"--mail-rcpt-allowfails","slug":"mail-rcpt-allowfails"},{"level":2,"title":"-l(--list-only)","slug":"l-list-only"},{"level":3,"title":"--limit-rate RANGE","slug":"limit-rate-range"},{"level":2,"title":"-M(--manual)","slug":"m-manual"},{"level":3,"title":"--max-filesize BYTES","slug":"max-filesize-bytes"},{"level":3,"title":"--max-redirs NUM","slug":"max-redirs-num"},{"level":2,"title":"-m(--max-time SECONDS)","slug":"m-max-time-seconds"},{"level":3,"title":"--metalink","slug":"metalink"},{"level":3,"title":"--negotiate","slug":"negotiate"},{"level":2,"title":"-N(--no-buffer)","slug":"n-no-buffer"},{"level":3,"title":"--no-keepalive","slug":"no-keepalive"},{"level":3,"title":"--no-npn","slug":"no-npn"},{"level":3,"title":"--no-progress-meter","slug":"no-progress-meter"},{"level":3,"title":"--no-sessionid","slug":"no-sessionid"},{"level":3,"title":"--noproxy <no-proxy-list>","slug":"noproxy-no-proxy-list"},{"level":3,"title":"--ntlm","slug":"ntlm"},{"level":3,"title":"--ntlm-wb","slug":"ntlm-wb"},{"level":3,"title":"--oauth2-bearer <token>","slug":"oauth2-bearer-token"},{"level":2,"title":"-n(--netrc)","slug":"n-netrc"},{"level":3,"title":"--netrc-file <filename>","slug":"netrc-file-filename"},{"level":3,"title":"--netrc-optional","slug":"netrc-optional"},{"level":2,"title":"-O(--remote-name)","slug":"o-remote-name"},{"level":3,"title":"--remote-name-all","slug":"remote-name-all"},{"level":2,"title":"-o(--output FILE)","slug":"o-output-file"},{"level":3,"title":"--output-dir <dir>","slug":"output-dir-dir"},{"level":2,"title":"-P(--ftp-port <address>)","slug":"p-ftp-port-address"},{"level":3,"title":"--ftp-skip-pasv-ip","slug":"ftp-skip-pasv-ip"},{"level":3,"title":"--ftp-pret","slug":"ftp-pret"},{"level":3,"title":"--ftp-ssl-ccc","slug":"ftp-ssl-ccc"},{"level":3,"title":"--ftp-ssl-ccc-mode","slug":"ftp-ssl-ccc-mode"},{"level":3,"title":"--ftp-ssl-control","slug":"ftp-ssl-control"},{"level":2,"title":"-p(--proxytunne)","slug":"p-proxytunne"},{"level":3,"title":"--pubkey KEY","slug":"pubkey-key"},{"level":2,"title":"-Q(--quote CMD)","slug":"q-quote-cmd"},{"level":3,"title":"--random-file FILE","slug":"random-file-file"},{"level":2,"title":"-q(--disable)","slug":"q-disable"},{"level":3,"title":"--disable-eprt","slug":"disable-eprt"},{"level":3,"title":"--disable-epsv","slug":"disable-epsv"},{"level":3,"title":"--disallow-username-in-url","slug":"disallow-username-in-url"},{"level":3,"title":"--dns-interface <interface>","slug":"dns-interface-interface"},{"level":3,"title":"--dns-ipv4-addr <address>","slug":"dns-ipv4-addr-address"},{"level":3,"title":"--dns-ipv6-addr <address>","slug":"dns-ipv6-addr-address"},{"level":3,"title":"--dns-servers <addresses>","slug":"dns-servers-addresses"},{"level":3,"title":"--doh-cert-status","slug":"doh-cert-status"},{"level":3,"title":"--doh-insecure","slug":"doh-insecure"},{"level":3,"title":"--doh-url <URL>","slug":"doh-url-url"},{"level":2,"title":"-R(--remote-time)","slug":"r-remote-time"},{"level":2,"title":"-r(--range RANGE)","slug":"r-range-range"},{"level":3,"title":"--raw","slug":"raw"},{"level":2,"title":"-S(--show-error)","slug":"s-show-error"},{"level":2,"title":"-s(--silent)","slug":"s-silent"},{"level":3,"title":"--socks4 HOST[:PORT]","slug":"socks4-host-port"},{"level":3,"title":"--socks4a HOST[:PORT]","slug":"socks4a-host-port"},{"level":3,"title":"--socks5 HOST[:PORT]","slug":"socks5-host-port"},{"level":3,"title":"--socks5-basic","slug":"socks5-basic"},{"level":3,"title":"--socks5-hostname HOST[:PORT]","slug":"socks5-hostname-host-port"},{"level":3,"title":"--socks5-gssapi-service NAME","slug":"socks5-gssapi-service-name"},{"level":3,"title":"--socks5-gssapi","slug":"socks5-gssapi"},{"level":3,"title":"--socks5-gssapi-nec","slug":"socks5-gssapi-nec"},{"level":2,"title":"-T(--upload-file FILE)","slug":"t-upload-file-file"},{"level":3,"title":"--url URL","slug":"url-url"},{"level":2,"title":"-t(--telnet-option OPT=VAL)","slug":"t-telnet-option-opt-val"},{"level":3,"title":"--tftp-blksize VALUE","slug":"tftp-blksize-value"},{"level":3,"title":"--tftp-no-options","slug":"tftp-no-options"},{"level":2,"title":"-U(--proxy-user USER[:PASSWORD])","slug":"u-proxy-user-user-password"},{"level":3,"title":"--proxy1.0 HOST[:PORT]","slug":"proxy1-0-host-port"},{"level":2,"title":"-u(--user USER[:PASSWORD])","slug":"u-user-user-password"},{"level":2,"title":"-V(--version)","slug":"v-version"},{"level":2,"title":"-v(--verbose)","slug":"v-verbose"},{"level":2,"title":"-w(--write-out FORMAT)","slug":"w-write-out-format"},{"level":3,"title":"--xattr","slug":"xattr"},{"level":2,"title":"-X(--request COMMAND)","slug":"x-request-command"},{"level":3,"title":"--request-target <path>","slug":"request-target-path"},{"level":3,"title":"--resolve HOST:PORT:ADDRESS","slug":"resolve-host-port-address"},{"level":3,"title":"--retry NUM","slug":"retry-num"},{"level":3,"title":"--retry-all-errors","slug":"retry-all-errors"},{"level":3,"title":"--retry-connrefused","slug":"retry-connrefused"},{"level":3,"title":"--retry-delay SECONDS","slug":"retry-delay-seconds"},{"level":3,"title":"--retry-max-time SECONDS","slug":"retry-max-time-seconds"},{"level":3,"title":"--sasl-authzid <identity>","slug":"sasl-authzid-identity"},{"level":3,"title":"--sasl-ir","slug":"sasl-ir"},{"level":3,"title":"--service-name <name>","slug":"service-name-name"},{"level":2,"title":"-x(--proxy [PROTOCOL://]HOST[:PORT])","slug":"x-proxy-protocol-host-port"},{"level":3,"title":"--proxy-anyauth","slug":"proxy-anyauth"},{"level":3,"title":"--proxy-basic","slug":"proxy-basic"},{"level":3,"title":"--proxy-cacert <file>","slug":"proxy-cacert-file"},{"level":3,"title":"--proxy-capath <dir>","slug":"proxy-capath-dir"},{"level":3,"title":"--proxy-cert <cert[:passwd]>","slug":"proxy-cert-cert-passwd"},{"level":3,"title":"--proxy-cert-type <type>","slug":"proxy-cert-type-type"},{"level":3,"title":"--proxy-ciphers <list>","slug":"proxy-ciphers-list"},{"level":3,"title":"--proxy-crlfile <file>","slug":"proxy-crlfile-file"},{"level":3,"title":"--proxy-digest","slug":"proxy-digest"},{"level":3,"title":"--proxy-header <header/@file>","slug":"proxy-header-header-file"},{"level":3,"title":"--proxy-insecure","slug":"proxy-insecure"},{"level":3,"title":"--proxy-key <key>","slug":"proxy-key-key"},{"level":3,"title":"--proxy-key-type <type>","slug":"proxy-key-type-type"},{"level":3,"title":"--proxy-negotiate","slug":"proxy-negotiate"},{"level":3,"title":"--proxy-ntlm","slug":"proxy-ntlm"},{"level":3,"title":"--proxy-pass <phrase>","slug":"proxy-pass-phrase"},{"level":3,"title":"--proxy-pinnedpubkey <hashes>","slug":"proxy-pinnedpubkey-hashes"},{"level":3,"title":"--proxy-service-name <name>","slug":"proxy-service-name-name"},{"level":3,"title":"--proxy-ssl-allow-beast","slug":"proxy-ssl-allow-beast"},{"level":3,"title":"--proxy-ssl-auto-client-cert","slug":"proxy-ssl-auto-client-cert"},{"level":3,"title":"--proxy-tls13-ciphers <ciphersuite list>","slug":"proxy-tls13-ciphers-ciphersuite-list"},{"level":3,"title":"--proxy-tlsauthtype <type>","slug":"proxy-tlsauthtype-type"},{"level":3,"title":"--proxy-tlspassword <string>","slug":"proxy-tlspassword-string"},{"level":3,"title":"--proxy-tlsuser <name>","slug":"proxy-tlsuser-name"},{"level":3,"title":"--proxy-tlsv1","slug":"proxy-tlsv1"},{"level":2,"title":"-Y(--speed-limit RATE)","slug":"y-speed-limit-rate"},{"level":2,"title":"-y(--speed-time SECONDS)","slug":"y-speed-time-seconds"},{"level":3,"title":"--ssl","slug":"ssl"},{"level":3,"title":"--ssl-allow-beast","slug":"ssl-allow-beast"},{"level":3,"title":"--ssl-auto-client-cert","slug":"ssl-auto-client-cert"},{"level":3,"title":"--ssl-no-revoke","slug":"ssl-no-revoke"},{"level":3,"title":"--ssl-revoke-best-effort","slug":"ssl-revoke-best-effort"},{"level":3,"title":"--ssl-reqd","slug":"ssl-reqd"},{"level":2,"title":"-Z(--parallel)","slug":"z-parallel"},{"level":3,"title":"--parallel-immediate","slug":"parallel-immediate"},{"level":3,"title":"--parallel-max <num>","slug":"parallel-max-num"},{"level":3,"title":"--pass <phrase>","slug":"pass-phrase"},{"level":3,"title":"--path-as-is","slug":"path-as-is"},{"level":3,"title":"--pinnedpubkey <hashes>","slug":"pinnedpubkey-hashes"},{"level":3,"title":"--post301","slug":"post301"},{"level":3,"title":"--post302","slug":"post302"},{"level":3,"title":"--post303","slug":"post303"},{"level":3,"title":"--preproxy [protocol://]host[:port]","slug":"preproxy-protocol-host-port"},{"level":2,"title":"-z(--time-cond TIME)","slug":"z-time-cond-time"},{"level":3,"title":"--tls-max <VERSION>","slug":"tls-max-version"},{"level":3,"title":"--tls13-ciphers <ciphersuite list>","slug":"tls13-ciphers-ciphersuite-list"},{"level":3,"title":"--tlsauthtype <type>","slug":"tlsauthtype-type"},{"level":3,"title":"--tlspassword <string>","slug":"tlspassword-string"},{"level":3,"title":"--tlsuser <name>","slug":"tlsuser-name"},{"level":2,"title":"-#(--progress-bar)","slug":"progress-bar"},{"level":3,"title":"--proto PROTOCOLS","slug":"proto-protocols"},{"level":3,"title":"--proto-default <protocol>","slug":"proto-default-protocol"},{"level":3,"title":"--proto-redir PROTOCOLS","slug":"proto-redir-protocols"},{"level":2,"title":"-1(--tlsv1)","slug":"_1-tlsv1"},{"level":3,"title":"--tlsv1.0","slug":"tlsv1-0"},{"level":3,"title":"--tlsv1.1","slug":"tlsv1-1"},{"level":3,"title":"--tlsv1.2","slug":"tlsv1-2"},{"level":3,"title":"--trace FILE","slug":"trace-file"},{"level":3,"title":"--trace-ascii FILE","slug":"trace-ascii-file"},{"level":3,"title":"--trace-time","slug":"trace-time"},{"level":3,"title":"--tr-encoding","slug":"tr-encoding"},{"level":3,"title":"--unix-socket <path>","slug":"unix-socket-path"},{"level":2,"title":"-2(--sslv2)","slug":"_2-sslv2"},{"level":2,"title":"-3(--sslv3)","slug":"_3-sslv3"},{"level":3,"title":"--stderr FILE","slug":"stderr-file"},{"level":3,"title":"--styled-output","slug":"styled-output"},{"level":3,"title":"--suppress-connect-headers","slug":"suppress-connect-headers"},{"level":3,"title":"--tcp-fastopen","slug":"tcp-fastopen"},{"level":3,"title":"--tcp-nodelay","slug":"tcp-nodelay"},{"level":2,"title":"-4(--ipv4)","slug":"_4-ipv4"},{"level":2,"title":"-6(--ipv6)","slug":"_6-ipv6"}],"relativePath":"front-end/swagger-hub/curl.md","lastUpdated":1629733361743}',o={},r=[t('<div class="warning custom-block"><p class="custom-block-title">注意</p><blockquote><p>如果安装了git的话，则不需要再安装curl，因为git已经帮你安装好了</p><blockquote><p>但是，git安装的curl版本较低--git(v2.32.0)的curl(v7.55.0)</p></blockquote></blockquote><p>百度下载并按照网上教程配置好curl环境变量后，在Windows Poweshell中调用<code>curl + 参数</code>（例如<code>curl -h</code>）始终提示不对。应该是<code>curl.exe + 参数</code>（例如<code>curl.exe -h</code>）</p></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>以下内容源于<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener noreferrer"><strong><u>阮一峰 curl的用法指南</u></strong></a>。但由于阮老师久未更新此篇，因此有许多命令已经不适用。本篇是curl的最新版-7.78.0，用以日常使用查看!</p></div><blockquote><p>用法：<code>curl [options...] &lt;url&gt;</code></p></blockquote><p>不带有任何参数时，curl 就是发出 GET 请求。</p><div class="language-bash"><pre><code>$ <span class="token function">curl</span> https://www.baidu.com\n</code></pre></div><p>上面命令向<code>www.baidu.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="a-user-agent-name"><a class="header-anchor" href="#a-user-agent-name" aria-hidden="true">#</a> -A(--user-agent <code>&lt;name&gt;</code>)</h2><blockquote><p>要发送到服务器的 User-Agent</p></blockquote><p>-A参数指定客户端的用户代理标头，即User-Agent。curl 的默认用户代理字符串是curl/[version]。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -A <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://google.com\n</code></pre></div><p>上面命令将User-Agent改成 Chrome 浏览器。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -A <span class="token string">&#39;&#39;</span> https://google.com\n</code></pre></div><p>上面命令会移除User-Agent标头。</p><p>也可以通过-H参数直接指定标头，更改User-Agent。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -H <span class="token string">&#39;User-Agent: php/1.0&#39;</span> https://google.com\n</code></pre></div><h2 id="a-append"><a class="header-anchor" href="#a-append" aria-hidden="true">#</a> -a(--append)</h2><blockquote><p>添加要上传的文件</p></blockquote><h3 id="basic"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> --basic</h3><blockquote><p>使用HTTP基础认证（Basic Authentication）</p></blockquote><h3 id="cacert-file"><a class="header-anchor" href="#cacert-file" aria-hidden="true">#</a> --cacert FILE</h3><blockquote><p>CA 证书，用于每次请求认证</p></blockquote><h3 id="capath-dir"><a class="header-anchor" href="#capath-dir" aria-hidden="true">#</a> --capath DIR</h3><blockquote><p>CA 证书目录</p></blockquote><h3 id="aws-sigv4-provider1-provider2-region-service"><a class="header-anchor" href="#aws-sigv4-provider1-provider2-region-service" aria-hidden="true">#</a> --aws-sigv4 [provider1[:provider2[:region[:service]]]]</h3><blockquote><p>使用AWS V4签名认证</p></blockquote><h2 id="b-use-ascii"><a class="header-anchor" href="#b-use-ascii" aria-hidden="true">#</a> -B(--use-ascii)</h2><blockquote><p>使用ASCII/text传输</p></blockquote><h2 id="b-cookie-string-file"><a class="header-anchor" href="#b-cookie-string-file" aria-hidden="true">#</a> -b(--cookie STRING/FILE)</h2><blockquote><p>Cookies字符串或读取Cookies的文件位置</p></blockquote><p>-b参数用来向服务器发送 Cookie。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -b <span class="token string">&#39;session=abcdef&#39;</span> https://google.com\n</code></pre></div><p>上面命令会生成一个标头Cookie: session=abcdef，向服务器发送一个名为session、值为abcdef的 Cookie。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -b <span class="token string">&#39;session=abcdef&#39;</span> -b <span class="token string">&#39;loggedin=true&#39;</span> https://google.com\n</code></pre></div><p>上面命令发送两个 Cookie。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -b cookies.txt https://www.google.com\n</code></pre></div><p>上面命令读取本地文件cookies.txt，里面是服务器设置的 Cookie（参见<a href="#c-cookie-jar">-c参数</a>），将其发送到服务器。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -c cookies.txt https://www.google.com\n</code></pre></div><h2 id="c-continue-at-offset"><a class="header-anchor" href="#c-continue-at-offset" aria-hidden="true">#</a> -C(--continue-at OFFSET)</h2><blockquote><p>断点续转</p></blockquote><h2 id="c-cookie-jar-file"><a class="header-anchor" href="#c-cookie-jar-file" aria-hidden="true">#</a> -c(--cookie-jar FILE)</h2><blockquote><p>操作结束后，要写入 Cookies 的文件位置</p></blockquote><p>-c参数将服务器设置的 Cookie 写入一个文件。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -c cookies.txt https://www.google.com\n</code></pre></div><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</p><h3 id="create-dirs"><a class="header-anchor" href="#create-dirs" aria-hidden="true">#</a> --create-dirs</h3><blockquote><p>创建必要的本地目录层次结构</p></blockquote><h3 id="create-file-mode-mode"><a class="header-anchor" href="#create-file-mode-mode" aria-hidden="true">#</a> --create-file-mode <code>&lt;mode&gt;</code></h3><blockquote><p>创建文件的文件模式(八进制)</p></blockquote><h3 id="crlf"><a class="header-anchor" href="#crlf" aria-hidden="true">#</a> --crlf</h3><blockquote><p>在上传时将 LF 转写为 CRLF</p></blockquote><h3 id="crlfile-file"><a class="header-anchor" href="#crlfile-file" aria-hidden="true">#</a> --crlfile FILE</h3><blockquote><p>从指定的文件获得PEM格式CRL列表</p></blockquote><h3 id="curves-algorithm-list"><a class="header-anchor" href="#curves-algorithm-list" aria-hidden="true">#</a> --curves <code>&lt;algorithm list&gt;</code></h3><blockquote><p>(EC) TLS密钥交换算法请求</p></blockquote><h2 id="d-dump-header-file"><a class="header-anchor" href="#d-dump-header-file" aria-hidden="true">#</a> -D(--dump-header FILE)</h2><blockquote><p>将头信息写入指定的文件</p></blockquote><h3 id="egd-file-file"><a class="header-anchor" href="#egd-file-file" aria-hidden="true">#</a> --egd-file FILE</h3><blockquote><p>为随机数据设置EGD socket路径(SSL)</p></blockquote><h3 id="engine-enginge"><a class="header-anchor" href="#engine-enginge" aria-hidden="true">#</a> --engine ENGINGE</h3><blockquote><p>加密引擎 (SSL). &quot;--engine list&quot; 指定列表</p></blockquote><h3 id="etag-compare-file"><a class="header-anchor" href="#etag-compare-file" aria-hidden="true">#</a> --etag-compare <code>&lt;file&gt;</code></h3><blockquote><p>从文件中传递一个ETag作为自定义头</p></blockquote><h3 id="etag-save-file"><a class="header-anchor" href="#etag-save-file" aria-hidden="true">#</a> --etag-save <code>&lt;file&gt;</code></h3><blockquote><p>从请求中解析ETag并将其保存到一个文件中</p></blockquote><h3 id="expect100-timeout-seconds"><a class="header-anchor" href="#expect100-timeout-seconds" aria-hidden="true">#</a> --expect100-timeout <code>&lt;seconds&gt;</code></h3><blockquote><p>100-continue要等多久</p></blockquote><h2 id="d-data-data"><a class="header-anchor" href="#d-data-data" aria-hidden="true">#</a> -d(--data DATA)</h2><blockquote><p>HTTP POST 数据</p></blockquote><p>-d参数用于发送 POST 请求的数据体。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -d<span class="token string">&#39;login=emma＆password=123&#39;</span>-X POST https://google.com/login\n<span class="token comment"># 或者</span>\n<span class="token function">curl</span> -d <span class="token string">&#39;login=emma&#39;</span> -d <span class="token string">&#39;password=123&#39;</span> -X POST  https://google.com/login\n</code></pre></div><p>使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><p>-d参数可以读取本地文本文件的数据，向服务器发送。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -d <span class="token string">&#39;@data.txt&#39;</span> https://google.com/login\n</code></pre></div><p>上面命令读取data.txt文件的内容，作为数据体向服务器发送。</p><h3 id="data-urlencode-data"><a class="header-anchor" href="#data-urlencode-data" aria-hidden="true">#</a> --data-urlencode DATA</h3><blockquote><p>url 编码 HTTP POST 数据</p></blockquote><p>--data-urlencode参数等同于-d，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><div class="language-bash"><pre><code><span class="token function">curl</span> --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://google.com/login\n</code></pre></div><p>上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。</p><h3 id="data-ascii-data"><a class="header-anchor" href="#data-ascii-data" aria-hidden="true">#</a> --data-ascii DATA</h3><blockquote><p>ASCII 编码 HTTP POST 数据</p></blockquote><h3 id="data-binary-data"><a class="header-anchor" href="#data-binary-data" aria-hidden="true">#</a> --data-binary DATA</h3><blockquote><p>binary 编码 HTTP POST 数据</p></blockquote><h3 id="delegation-string"><a class="header-anchor" href="#delegation-string" aria-hidden="true">#</a> --delegation STRING</h3><blockquote><p>GSS-API 委托权限</p></blockquote><h3 id="digest"><a class="header-anchor" href="#digest" aria-hidden="true">#</a> --digest</h3><blockquote><p>使用数字身份验证</p></blockquote><h3 id="data-raw-data"><a class="header-anchor" href="#data-raw-data" aria-hidden="true">#</a> --data-raw <code>&lt;data&gt;</code></h3><blockquote><p>HTTP POST数据，<code>@</code>允许</p></blockquote><h2 id="e-cert-cert-passwd"><a class="header-anchor" href="#e-cert-cert-passwd" aria-hidden="true">#</a> -E(--cert CERT[:PASSWD])</h2><blockquote><p>客户端证书文件及密码</p></blockquote><h3 id="cert-type-type"><a class="header-anchor" href="#cert-type-type" aria-hidden="true">#</a> --cert-type TYPE</h3><blockquote><p>证书文件类型 (DER/PEM/ENG)</p></blockquote><h3 id="cert-status"><a class="header-anchor" href="#cert-status" aria-hidden="true">#</a> --cert-status</h3><blockquote><p>通过OCSP-staple验证服务器证书状态</p></blockquote><h3 id="ciphers-list"><a class="header-anchor" href="#ciphers-list" aria-hidden="true">#</a> --ciphers LIST</h3><blockquote><p>SSL 秘钥</p></blockquote><h3 id="compressed"><a class="header-anchor" href="#compressed" aria-hidden="true">#</a> --compressed</h3><blockquote><p>请求压缩 (使用 deflate 或 gzip)</p></blockquote><h3 id="compressed-ssh"><a class="header-anchor" href="#compressed-ssh" aria-hidden="true">#</a> --compressed-ssh</h3><blockquote><p>开启SSH压缩</p></blockquote><h2 id="e-referer"><a class="header-anchor" href="#e-referer" aria-hidden="true">#</a> -e(--referer)</h2><blockquote><p>Referer URL</p></blockquote><p>-e参数用来设置 HTTP 的标头Referer，表示请求的来源。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -e <span class="token string">&#39;https://google.com?q=example&#39;</span> https://www.example.com\n</code></pre></div><p>上面命令将Referer标头设为https://google.com?q=example。</p><p>-H参数可以通过直接添加标头Referer，达到同样效果。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -H <span class="token string">&#39;Referer: https://google.com?q=example&#39;</span> https://www.example.com\n</code></pre></div><h2 id="f-form-content"><a class="header-anchor" href="#f-form-content" aria-hidden="true">#</a> -F(--form CONTENT)</h2><blockquote><p>模拟 HTTP 表单数据提交（multipart POST）</p></blockquote><p>-F参数用来向服务器上传二进制文件。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png&#39;</span> https://google.com/profile\n</code></pre></div><p>上面命令会给 HTTP 请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。</p><p>-F参数可以指定 MIME 类型。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png;type=image/png&#39;</span> https://google.com/profile\n</code></pre></div><p>上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream。</p><p>-F参数也可以指定文件名。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -F <span class="token string">&#39;file=@photo.png;filename=me.png&#39;</span> https://google.com/profile\n</code></pre></div><p>上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。</p><h3 id="form-string-string"><a class="header-anchor" href="#form-string-string" aria-hidden="true">#</a> --form-string STRING</h3><blockquote><p>模拟 HTTP 表单数据提交</p></blockquote><h3 id="ftp-account-data"><a class="header-anchor" href="#ftp-account-data" aria-hidden="true">#</a> --ftp-account DATA</h3><blockquote><p>帐户数据提交</p></blockquote><h3 id="ftp-alternative-to-user-command"><a class="header-anchor" href="#ftp-alternative-to-user-command" aria-hidden="true">#</a> --ftp-alternative-to-user COMMAND</h3><blockquote><p>指定替换 &quot;USER [name]&quot; 的字符串</p></blockquote><h3 id="ftp-create-dirs"><a class="header-anchor" href="#ftp-create-dirs" aria-hidden="true">#</a> --ftp-create-dirs</h3><blockquote><p>如果不存在则创建远程目录</p></blockquote><h3 id="ftp-method"><a class="header-anchor" href="#ftp-method" aria-hidden="true">#</a> --ftp-method</h3><blockquote><p>[MULTICWD/NOCWD/SINGLECWD] 控制 CWD</p></blockquote><h3 id="ftp-pasv"><a class="header-anchor" href="#ftp-pasv" aria-hidden="true">#</a> --ftp-pasv</h3><blockquote><p>使用 PASV/EPSV 替换 PORT</p></blockquote><h2 id="f-fail"><a class="header-anchor" href="#f-fail" aria-hidden="true">#</a> -f(--fail)</h2><blockquote><p>连接失败时不显示HTTP错误信息</p></blockquote><h3 id="fail-early"><a class="header-anchor" href="#fail-early" aria-hidden="true">#</a> --fail-early</h3><blockquote><p>第一次传输错误失败，不要继续</p></blockquote><h3 id="fail-with-body"><a class="header-anchor" href="#fail-with-body" aria-hidden="true">#</a> --fail-with-body</h3><blockquote><p>HTTP错误失败，但保存正文</p></blockquote><h3 id="false-start"><a class="header-anchor" href="#false-start" aria-hidden="true">#</a> --false-start</h3><blockquote><p>启用TLS False启动</p></blockquote><h2 id="g-get"><a class="header-anchor" href="#g-get" aria-hidden="true">#</a> -G(--get)</h2><blockquote><p>使用 HTTP GET 方法发送 -d 数据</p></blockquote><p>-G参数用来构造 URL 的查询字符串。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -G -d <span class="token string">&#39;q=kitties&#39;</span> -d <span class="token string">&#39;count=20&#39;</span> https://google.com/search\n</code></pre></div><p>上面命令会发出一个 GET 请求，实际请求的 URL 为https://google.com/search?q=kitties&amp;count=20。如果省略--G，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合--data--urlencode参数。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -G --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://www.example.com\n</code></pre></div><h2 id="g-globoff"><a class="header-anchor" href="#g-globoff" aria-hidden="true">#</a> -g(--globoff)</h2><blockquote><p>禁用的 URL 队列 及范围使用 {} 和 []</p></blockquote><h3 id="happy-eyeballs-timeout-ms-milliseconds"><a class="header-anchor" href="#happy-eyeballs-timeout-ms-milliseconds" aria-hidden="true">#</a> --happy-eyeballs-timeout-ms <code>&lt;milliseconds&gt;</code></h3><blockquote><p>在尝试IPv4之前，考虑IPv6的时间</p></blockquote><h3 id="haproxy-protocol"><a class="header-anchor" href="#haproxy-protocol" aria-hidden="true">#</a> --haproxy-protocol</h3><blockquote><p>发送HAProxy代理协议v1报头</p></blockquote><h2 id="h-header-line"><a class="header-anchor" href="#h-header-line" aria-hidden="true">#</a> -H(--header LINE)</h2><blockquote><p>要发送到服务端的自定义请求头</p></blockquote><p>-H参数添加 HTTP 请求的标头。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -H <span class="token string">&#39;Accept-Language: en-US&#39;</span> https://google.com\n</code></pre></div><p>上面命令添加 HTTP 标头Accept-Language: en-US。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -H <span class="token string">&#39;Accept-Language: en-US&#39;</span> -H <span class="token string">&#39;Secret-Message: xyzzy&#39;</span> https://google.com\n</code></pre></div><p>上面命令添加两个 HTTP 标头。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -d <span class="token string">&#39;{&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;}&#39;</span> -H <span class="token string">&#39;Content-Type: application/json&#39;</span> https://google.com/login\n</code></pre></div><p>上面命令添加 HTTP 请求的标头是Content-Type: application/json，然后用-d参数发送 JSON 数据。</p><h2 id="h-help"><a class="header-anchor" href="#h-help" aria-hidden="true">#</a> -h(--help)</h2><blockquote><p>显示帮助</p></blockquote><h3 id="hostpubmd5-md5"><a class="header-anchor" href="#hostpubmd5-md5" aria-hidden="true">#</a> --hostpubmd5 <code>&lt;md5&gt;</code></h3><blockquote><p>主机公钥可接受的MD5哈希值</p></blockquote><h3 id="hsts-file-name"><a class="header-anchor" href="#hsts-file-name" aria-hidden="true">#</a> --hsts <code>&lt;file name&gt;</code></h3><blockquote><p>使用此缓存文件启用HSTS</p></blockquote><h3 id="http0-9"><a class="header-anchor" href="#http0-9" aria-hidden="true">#</a> --http0.9</h3><blockquote><p>允许HTTP 0.9响应</p></blockquote><h2 id="i-head"><a class="header-anchor" href="#i-head" aria-hidden="true">#</a> -I(--head)</h2><blockquote><p>仅显示响应文档头</p></blockquote><p>-I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -I https://www.example.com\n</code></pre></div><p>上面命令输出服务器对 HEAD 请求的回应。</p><p>--head参数等同于-I。</p><div class="language-bash"><pre><code><span class="token function">curl</span> --head https://www.example.com\n</code></pre></div><h2 id="i-include"><a class="header-anchor" href="#i-include" aria-hidden="true">#</a> -i(--include)</h2><blockquote><p>在输出中包含协议头</p></blockquote><p>-i参数打印出服务器回应的 HTTP 标头。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -i https://www.example.com\n</code></pre></div><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="j-remote-header-name"><a class="header-anchor" href="#j-remote-header-name" aria-hidden="true">#</a> -J(--remote-header-name)</h2><blockquote><p>从远程文件读取头信息</p></blockquote><h2 id="j-junk-session-cookies"><a class="header-anchor" href="#j-junk-session-cookies" aria-hidden="true">#</a> -j(--junk-session-cookies)</h2><blockquote><p>读取文件中但忽略会话cookie</p></blockquote><h3 id="keepalive-time-seconds"><a class="header-anchor" href="#keepalive-time-seconds" aria-hidden="true">#</a> --keepalive-time SECONDS</h3><blockquote><p>keepalive 包间隔</p></blockquote><h3 id="key-key"><a class="header-anchor" href="#key-key" aria-hidden="true">#</a> --key KEY</h3><blockquote><p>私钥文件名 (SSL/SSH)</p></blockquote><h3 id="key-type-type"><a class="header-anchor" href="#key-type-type" aria-hidden="true">#</a> --key-type TYPE</h3><blockquote><p>私钥文件类型 (DER/PEM/ENG) (SSL)</p></blockquote><h3 id="krb-level"><a class="header-anchor" href="#krb-level" aria-hidden="true">#</a> --krb LEVEL</h3><blockquote><p>启用指定安全级别的 Kerberos</p></blockquote><h3 id="libcurl-file"><a class="header-anchor" href="#libcurl-file" aria-hidden="true">#</a> --libcurl FILE</h3><blockquote><p>命令的libcurl等价代码</p></blockquote><h3 id="limit-rate-rate"><a class="header-anchor" href="#limit-rate-rate" aria-hidden="true">#</a> --limit-rate RATE</h3><blockquote><p>限制传输速度</p></blockquote><h2 id="k-config-file"><a class="header-anchor" href="#k-config-file" aria-hidden="true">#</a> -K(--config FILE)</h2><blockquote><p>指定配置文件</p></blockquote><h3 id="connect-timeout-seconds"><a class="header-anchor" href="#connect-timeout-seconds" aria-hidden="true">#</a> --connect-timeout SECONDS</h3><blockquote><p>连接超时设置</p></blockquote><h3 id="connect-to-host1-port1-host2-port2"><a class="header-anchor" href="#connect-to-host1-port1-host2-port2" aria-hidden="true">#</a> --connect-to <code>&lt;HOST1:PORT1:HOST2:PORT2&gt;</code></h3><blockquote><p>连接到主机</p></blockquote><h2 id="k-insecure"><a class="header-anchor" href="#k-insecure" aria-hidden="true">#</a> -k(--insecure)</h2><blockquote><p>允许连接到 SSL 站点，而不使用证书</p></blockquote><p>-k参数指定跳过 SSL 检测。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -k https://www.example.com\n</code></pre></div><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h3 id="interface-interfac"><a class="header-anchor" href="#interface-interfac" aria-hidden="true">#</a> --interface INTERFAC</h3><blockquote><p>指定网络接口／地址</p></blockquote><h2 id="l-location"><a class="header-anchor" href="#l-location" aria-hidden="true">#</a> -L(--location)</h2><blockquote><p>跟踪重定向</p></blockquote><p>-L参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -L -d <span class="token string">&#39;tweet=hi&#39;</span> https://api.twitter.com/tweet\n</code></pre></div><h3 id="location-trusted"><a class="header-anchor" href="#location-trusted" aria-hidden="true">#</a> --location-trusted</h3><blockquote><p>类似 --location 并发送验证信息到其它主机</p></blockquote><h3 id="login-options-options"><a class="header-anchor" href="#login-options-options" aria-hidden="true">#</a> --login-options <code>&lt;options&gt;</code></h3><blockquote><p>服务器登录选项</p></blockquote><h3 id="mail-auth-address"><a class="header-anchor" href="#mail-auth-address" aria-hidden="true">#</a> --mail-auth <code>&lt;address&gt;</code></h3><blockquote><p>原始电子邮件的发起人地址</p></blockquote><h3 id="mail-from-address"><a class="header-anchor" href="#mail-from-address" aria-hidden="true">#</a> --mail-from <code>&lt;address&gt;</code></h3><blockquote><p>来自这个地址的邮件</p></blockquote><h3 id="mail-rcpt-address"><a class="header-anchor" href="#mail-rcpt-address" aria-hidden="true">#</a> --mail-rcpt <code>&lt;address&gt;</code></h3><blockquote><p>寄到这个地址</p></blockquote><h3 id="mail-rcpt-allowfails"><a class="header-anchor" href="#mail-rcpt-allowfails" aria-hidden="true">#</a> --mail-rcpt-allowfails</h3><blockquote><p>对于某些收件人，允许RCPT TO命令失败</p></blockquote><h2 id="l-list-only"><a class="header-anchor" href="#l-list-only" aria-hidden="true">#</a> -l(--list-only)</h2><blockquote><p>只列出FTP目录的名称</p></blockquote><h3 id="limit-rate-range"><a class="header-anchor" href="#limit-rate-range" aria-hidden="true">#</a> --limit-rate RANGE</h3><blockquote><p>类似 --location 并发送验证信息到其它主机</p></blockquote><p>--limit-rate用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><div class="language-bash"><pre><code><span class="token function">curl</span> --limit-rate 200k https://google.com\n</code></pre></div><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="m-manual"><a class="header-anchor" href="#m-manual" aria-hidden="true">#</a> -M(--manual)</h2><blockquote><p>显示全手动</p></blockquote><h3 id="max-filesize-bytes"><a class="header-anchor" href="#max-filesize-bytes" aria-hidden="true">#</a> --max-filesize BYTES</h3><blockquote><p>下载的最大文件大小 (H/F)</p></blockquote><h3 id="max-redirs-num"><a class="header-anchor" href="#max-redirs-num" aria-hidden="true">#</a> --max-redirs NUM</h3><blockquote><p>最大重定向数 (H)</p></blockquote><h2 id="m-max-time-seconds"><a class="header-anchor" href="#m-max-time-seconds" aria-hidden="true">#</a> -m(--max-time SECONDS)</h2><blockquote><p>允许的最多传输时间</p></blockquote><h3 id="metalink"><a class="header-anchor" href="#metalink" aria-hidden="true">#</a> --metalink</h3><blockquote><p>处理指定的URL上的XML文件</p></blockquote><h3 id="negotiate"><a class="header-anchor" href="#negotiate" aria-hidden="true">#</a> --negotiate</h3><blockquote><p>使用 HTTP Negotiate 认证</p></blockquote><h2 id="n-no-buffer"><a class="header-anchor" href="#n-no-buffer" aria-hidden="true">#</a> -N(--no-buffer)</h2><blockquote><p>禁用输出流的缓冲</p></blockquote><h3 id="no-keepalive"><a class="header-anchor" href="#no-keepalive" aria-hidden="true">#</a> --no-keepalive</h3><blockquote><p>禁用TCP保持连接</p></blockquote><h3 id="no-npn"><a class="header-anchor" href="#no-npn" aria-hidden="true">#</a> --no-npn</h3><blockquote><p>禁用NPN TLS扩展</p></blockquote><h3 id="no-progress-meter"><a class="header-anchor" href="#no-progress-meter" aria-hidden="true">#</a> --no-progress-meter</h3><blockquote><p>不显示进度表</p></blockquote><h3 id="no-sessionid"><a class="header-anchor" href="#no-sessionid" aria-hidden="true">#</a> --no-sessionid</h3><blockquote><p>禁用SSL会话id重用</p></blockquote><h3 id="noproxy-no-proxy-list"><a class="header-anchor" href="#noproxy-no-proxy-list" aria-hidden="true">#</a> --noproxy <code>&lt;no-proxy-list&gt;</code></h3><blockquote><p>不使用代理的主机列表</p></blockquote><h3 id="ntlm"><a class="header-anchor" href="#ntlm" aria-hidden="true">#</a> --ntlm</h3><blockquote><p>使用HTTP NTLM认证</p></blockquote><h3 id="ntlm-wb"><a class="header-anchor" href="#ntlm-wb" aria-hidden="true">#</a> --ntlm-wb</h3><blockquote><p>使用winbind的HTTP NTLM认证</p></blockquote><h3 id="oauth2-bearer-token"><a class="header-anchor" href="#oauth2-bearer-token" aria-hidden="true">#</a> --oauth2-bearer <code>&lt;token&gt;</code></h3><blockquote><p>OAuth 2承载令牌</p></blockquote><h2 id="n-netrc"><a class="header-anchor" href="#n-netrc" aria-hidden="true">#</a> -n(--netrc)</h2><blockquote><p>必须读取.netrc文件作为用户名和密码</p></blockquote><h3 id="netrc-file-filename"><a class="header-anchor" href="#netrc-file-filename" aria-hidden="true">#</a> --netrc-file <code>&lt;filename&gt;</code></h3><blockquote><p>为netrc指定FILE</p></blockquote><h3 id="netrc-optional"><a class="header-anchor" href="#netrc-optional" aria-hidden="true">#</a> --netrc-optional</h3><blockquote><p>使用.netrc文件或URL</p></blockquote><h2 id="o-remote-name"><a class="header-anchor" href="#o-remote-name" aria-hidden="true">#</a> -O(--remote-name)</h2><blockquote><p>将输出写入远程文件</p></blockquote><p>-O参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -O https://www.example.com/foo/bar.html\n</code></pre></div><p>上面命令将服务器回应保存成文件，文件名为bar.html。</p><h3 id="remote-name-all"><a class="header-anchor" href="#remote-name-all" aria-hidden="true">#</a> --remote-name-all</h3><blockquote><p>使用所有URL的远程文件名</p></blockquote><h2 id="o-output-file"><a class="header-anchor" href="#o-output-file" aria-hidden="true">#</a> -o(--output FILE)</h2><blockquote><p>将输出写入文件，而非 stdout</p></blockquote><p>-o参数将服务器的回应保存成文件，等同于wget命令。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -o example.html https://www.example.com\n</code></pre></div><p>上面命令将www.example.com保存成example.html。</p><h3 id="output-dir-dir"><a class="header-anchor" href="#output-dir-dir" aria-hidden="true">#</a> --output-dir <code>&lt;dir&gt;</code></h3><blockquote><p>保存文件的目录</p></blockquote><h2 id="p-ftp-port-address"><a class="header-anchor" href="#p-ftp-port-address" aria-hidden="true">#</a> -P(--ftp-port <code>&lt;address&gt;</code>)</h2><blockquote><p>使用指定 PORT 及地址替换 PASV</p></blockquote><h3 id="ftp-skip-pasv-ip"><a class="header-anchor" href="#ftp-skip-pasv-ip" aria-hidden="true">#</a> --ftp-skip-pasv-ip</h3><blockquote><p>跳过 PASV 的IP地址</p></blockquote><h3 id="ftp-pret"><a class="header-anchor" href="#ftp-pret" aria-hidden="true">#</a> --ftp-pret</h3><blockquote><p>在 PASV 之前发送 PRET (drftpd)</p></blockquote><h3 id="ftp-ssl-ccc"><a class="header-anchor" href="#ftp-ssl-ccc" aria-hidden="true">#</a> --ftp-ssl-ccc</h3><blockquote><p>在认证之后发送 CCC</p></blockquote><h3 id="ftp-ssl-ccc-mode"><a class="header-anchor" href="#ftp-ssl-ccc-mode" aria-hidden="true">#</a> --ftp-ssl-ccc-mode</h3><blockquote><p>ACTIVE/PASSIVE 设置 CCC 模式</p></blockquote><h3 id="ftp-ssl-control"><a class="header-anchor" href="#ftp-ssl-control" aria-hidden="true">#</a> --ftp-ssl-control</h3><blockquote><p>ftp 登录时需要 SSL/TLS</p></blockquote><h2 id="p-proxytunne"><a class="header-anchor" href="#p-proxytunne" aria-hidden="true">#</a> -p(--proxytunne)</h2><blockquote><p>使用HTTP代理 (用于 CONNECT)</p></blockquote><h3 id="pubkey-key"><a class="header-anchor" href="#pubkey-key" aria-hidden="true">#</a> --pubkey KEY</h3><blockquote><p>公钥文件名 (SSH)</p></blockquote><h2 id="q-quote-cmd"><a class="header-anchor" href="#q-quote-cmd" aria-hidden="true">#</a> -Q(--quote CMD)</h2><blockquote><p>在传输开始前向服务器发送命令</p></blockquote><h3 id="random-file-file"><a class="header-anchor" href="#random-file-file" aria-hidden="true">#</a> --random-file FILE</h3><blockquote><p>读取随机数据的文件 (SSL)</p></blockquote><h2 id="q-disable"><a class="header-anchor" href="#q-disable" aria-hidden="true">#</a> -q(--disable)</h2><blockquote><p>禁用.curlr</p></blockquote><h3 id="disable-eprt"><a class="header-anchor" href="#disable-eprt" aria-hidden="true">#</a> --disable-eprt</h3><blockquote><p>禁止使用EPRT或LPRT</p></blockquote><h3 id="disable-epsv"><a class="header-anchor" href="#disable-epsv" aria-hidden="true">#</a> --disable-epsv</h3><blockquote><p>禁止使用EPSV</p></blockquote><h3 id="disallow-username-in-url"><a class="header-anchor" href="#disallow-username-in-url" aria-hidden="true">#</a> --disallow-username-in-url</h3><blockquote><p>在url中禁止用户名</p></blockquote><h3 id="dns-interface-interface"><a class="header-anchor" href="#dns-interface-interface" aria-hidden="true">#</a> --dns-interface <code>&lt;interface&gt;</code></h3><blockquote><p>用于DNS请求的接口</p></blockquote><h3 id="dns-ipv4-addr-address"><a class="header-anchor" href="#dns-ipv4-addr-address" aria-hidden="true">#</a> --dns-ipv4-addr <code>&lt;address&gt;</code></h3><blockquote><p>用于DNS请求的IPv4地址</p></blockquote><h3 id="dns-ipv6-addr-address"><a class="header-anchor" href="#dns-ipv6-addr-address" aria-hidden="true">#</a> --dns-ipv6-addr <code>&lt;address&gt;</code></h3><blockquote><p>用于DNS请求的IPv6地址</p></blockquote><h3 id="dns-servers-addresses"><a class="header-anchor" href="#dns-servers-addresses" aria-hidden="true">#</a> --dns-servers <code>&lt;addresses&gt;</code></h3><blockquote><p>DNS服务器addrs使用</p></blockquote><h3 id="doh-cert-status"><a class="header-anchor" href="#doh-cert-status" aria-hidden="true">#</a> --doh-cert-status</h3><blockquote><p>通过OCSP-staple验证DoH服务器证书的状态</p></blockquote><h3 id="doh-insecure"><a class="header-anchor" href="#doh-insecure" aria-hidden="true">#</a> --doh-insecure</h3><blockquote><p>允许不安全的DoH服务器连接</p></blockquote><h3 id="doh-url-url"><a class="header-anchor" href="#doh-url-url" aria-hidden="true">#</a> --doh-url <code>&lt;URL&gt;</code></h3><blockquote><p>通过DoH解析主机名</p></blockquote><h2 id="r-remote-time"><a class="header-anchor" href="#r-remote-time" aria-hidden="true">#</a> -R(--remote-time)</h2><blockquote><p>将远程文件的时间设置在本地输出上</p></blockquote><h2 id="r-range-range"><a class="header-anchor" href="#r-range-range" aria-hidden="true">#</a> -r(--range RANGE)</h2><blockquote><p>仅检索范围内的字节</p></blockquote><h3 id="raw"><a class="header-anchor" href="#raw" aria-hidden="true">#</a> --raw</h3><blockquote><p>使用原始HTTP传输，而不使用编码</p></blockquote><h2 id="s-show-error"><a class="header-anchor" href="#s-show-error" aria-hidden="true">#</a> -S(--show-error)</h2><blockquote><p>显示错误. 在选项 -s 中，当 curl 出现错误时将显示</p></blockquote><p>-S参数指定只输出错误信息，通常与-s一起使用。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -s -o /dev/null https://google.com\n</code></pre></div><p>上面命令没有任何输出，除非发生错误。</p><h2 id="s-silent"><a class="header-anchor" href="#s-silent" aria-hidden="true">#</a> -s(--silent)</h2><blockquote><p>Silent模式。不输出任务内容</p></blockquote><p>-s参数将不输出错误和进度信息。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -s https://www.example.com\n</code></pre></div><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -s -o /dev/null https://google.com\n</code></pre></div><h3 id="socks4-host-port"><a class="header-anchor" href="#socks4-host-port" aria-hidden="true">#</a> --socks4 HOST[:PORT]</h3><blockquote><p>在指定的 host + port 上使用 SOCKS4 代理</p></blockquote><h3 id="socks4a-host-port"><a class="header-anchor" href="#socks4a-host-port" aria-hidden="true">#</a> --socks4a HOST[:PORT]</h3><blockquote><p>在指定的 host + port 上使用 SOCKSa 代理</p></blockquote><h3 id="socks5-host-port"><a class="header-anchor" href="#socks5-host-port" aria-hidden="true">#</a> --socks5 HOST[:PORT]</h3><blockquote><p>在指定的 host + port 上使用 SOCKS5 代理</p></blockquote><h3 id="socks5-basic"><a class="header-anchor" href="#socks5-basic" aria-hidden="true">#</a> --socks5-basic</h3><blockquote><p>启用SOCKS5代理的用户名/密码认证</p></blockquote><h3 id="socks5-hostname-host-port"><a class="header-anchor" href="#socks5-hostname-host-port" aria-hidden="true">#</a> --socks5-hostname HOST[:PORT]</h3><blockquote><p>SOCKS5 代理，指定用户名、密码</p></blockquote><h3 id="socks5-gssapi-service-name"><a class="header-anchor" href="#socks5-gssapi-service-name" aria-hidden="true">#</a> --socks5-gssapi-service NAME</h3><blockquote><p>SOCKS5 代理，指定用户名、密码</p></blockquote><h3 id="socks5-gssapi"><a class="header-anchor" href="#socks5-gssapi" aria-hidden="true">#</a> --socks5-gssapi</h3><blockquote><p>为SOCKS5代理启用GSS-API认证</p></blockquote><h3 id="socks5-gssapi-nec"><a class="header-anchor" href="#socks5-gssapi-nec" aria-hidden="true">#</a> --socks5-gssapi-nec</h3><blockquote><p>与NEC Socks5服务器兼容</p></blockquote><h2 id="t-upload-file-file"><a class="header-anchor" href="#t-upload-file-file" aria-hidden="true">#</a> -T(--upload-file FILE)</h2><blockquote><p>将文件传输（上传）到指定位置</p></blockquote><h3 id="url-url"><a class="header-anchor" href="#url-url" aria-hidden="true">#</a> --url URL</h3><blockquote><p>指定所使用的 URL</p></blockquote><h2 id="t-telnet-option-opt-val"><a class="header-anchor" href="#t-telnet-option-opt-val" aria-hidden="true">#</a> -t(--telnet-option OPT=VAL)</h2><blockquote><p>设置 telnet 选项</p></blockquote><h3 id="tftp-blksize-value"><a class="header-anchor" href="#tftp-blksize-value" aria-hidden="true">#</a> --tftp-blksize VALUE</h3><blockquote><p>设备 TFTP BLKSIZE 选项 (必须 &gt;512)</p></blockquote><h3 id="tftp-no-options"><a class="header-anchor" href="#tftp-no-options" aria-hidden="true">#</a> --tftp-no-options</h3><blockquote><p>不发送任何TFTP选项</p></blockquote><h2 id="u-proxy-user-user-password"><a class="header-anchor" href="#u-proxy-user-user-password" aria-hidden="true">#</a> -U(--proxy-user USER[:PASSWORD])</h2><blockquote><p>代理用户名及密码</p></blockquote><h3 id="proxy1-0-host-port"><a class="header-anchor" href="#proxy1-0-host-port" aria-hidden="true">#</a> --proxy1.0 HOST[:PORT]</h3><blockquote><p>在指定的端口上使用 HTTP/1.0 代理</p></blockquote><h2 id="u-user-user-password"><a class="header-anchor" href="#u-user-user-password" aria-hidden="true">#</a> -u(--user USER[:PASSWORD])</h2><blockquote><p>指定服务器认证用户名、密码</p></blockquote><p>-u参数用来设置服务器认证的用户名和密码。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -u <span class="token string">&#39;bob:12345&#39;</span> https://google.com/login\n</code></pre></div><p>上面命令设置用户名为bob，密码为12345，然后将其转为 HTTP 标头Authorization: Basic Ym9iOjEyMzQ1。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><div class="language-bash"><pre><code><span class="token function">curl</span> https://bob:12345@google.com/login\n</code></pre></div><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -u <span class="token string">&#39;bob&#39;</span> https://google.com/login\n</code></pre></div><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v-version"><a class="header-anchor" href="#v-version" aria-hidden="true">#</a> -V(--version)</h2><blockquote><p>显示版本号并退出</p></blockquote><h2 id="v-verbose"><a class="header-anchor" href="#v-verbose" aria-hidden="true">#</a> -v(--verbose)</h2><blockquote><p>显示详细操作信息</p></blockquote><p>-v参数输出通信的整个过程，用于调试。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -v https://www.example.com\n</code></pre></div><p>--trace参数也可以用于调试，还会输出原始的二进制数据。</p><div class="language-bash"><pre><code><span class="token function">curl</span> --trace - https://www.example.com\n</code></pre></div><h2 id="w-write-out-format"><a class="header-anchor" href="#w-write-out-format" aria-hidden="true">#</a> -w(--write-out FORMAT)</h2><blockquote><p>完成后输出什么</p></blockquote><h3 id="xattr"><a class="header-anchor" href="#xattr" aria-hidden="true">#</a> --xattr</h3><blockquote><p>将元数据存储在扩展文件属性中</p></blockquote><h2 id="x-request-command"><a class="header-anchor" href="#x-request-command" aria-hidden="true">#</a> -X(--request COMMAND)</h2><blockquote><p>使用指定的请求命令</p></blockquote><p>-X参数指定 HTTP 请求的方法。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -X POST https://www.example.com\n</code></pre></div><p>上面命令对https://www.example.com发出 POST 请求。</p><h3 id="request-target-path"><a class="header-anchor" href="#request-target-path" aria-hidden="true">#</a> --request-target <code>&lt;path&gt;</code></h3><blockquote><p>指定此请求的目标</p></blockquote><h3 id="resolve-host-port-address"><a class="header-anchor" href="#resolve-host-port-address" aria-hidden="true">#</a> --resolve HOST:PORT:ADDRESS</h3><blockquote><p>将 HOST:PORT 强制解析到 ADDRESS</p></blockquote><h3 id="retry-num"><a class="header-anchor" href="#retry-num" aria-hidden="true">#</a> --retry NUM</h3><blockquote><p>出现问题时的重试次数</p></blockquote><h3 id="retry-all-errors"><a class="header-anchor" href="#retry-all-errors" aria-hidden="true">#</a> --retry-all-errors</h3><blockquote><p>重试所有错误(与——Retry一起使用)</p></blockquote><h3 id="retry-connrefused"><a class="header-anchor" href="#retry-connrefused" aria-hidden="true">#</a> --retry-connrefused</h3><blockquote><p>连接被拒绝时重试(与--Retry一起使用)</p></blockquote><h3 id="retry-delay-seconds"><a class="header-anchor" href="#retry-delay-seconds" aria-hidden="true">#</a> --retry-delay SECONDS</h3><blockquote><p>重试时的延时时长</p></blockquote><h3 id="retry-max-time-seconds"><a class="header-anchor" href="#retry-max-time-seconds" aria-hidden="true">#</a> --retry-max-time SECONDS</h3><blockquote><p>仅在指定时间段内重试</p></blockquote><h3 id="sasl-authzid-identity"><a class="header-anchor" href="#sasl-authzid-identity" aria-hidden="true">#</a> --sasl-authzid <code>&lt;identity&gt;</code></h3><blockquote><p>SASL PLAIN身份验证的标识</p></blockquote><h3 id="sasl-ir"><a class="header-anchor" href="#sasl-ir" aria-hidden="true">#</a> --sasl-ir</h3><blockquote><p>启用SASL认证的初始响应</p></blockquote><h3 id="service-name-name"><a class="header-anchor" href="#service-name-name" aria-hidden="true">#</a> --service-name <code>&lt;name&gt;</code></h3><blockquote><p>SPNEGO服务名称</p></blockquote><h2 id="x-proxy-protocol-host-port"><a class="header-anchor" href="#x-proxy-protocol-host-port" aria-hidden="true">#</a> -x(--proxy [PROTOCOL://]HOST[:PORT])</h2><blockquote><p>在指定的端口上使用代理</p></blockquote><p>-x参数指定 HTTP 请求的代理。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -x socks5://james:cats@myproxy.com:8080 https://www.example.com\n</code></pre></div><p>上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><div class="language-bash"><pre><code><span class="token function">curl</span> -x james:cats@myproxy.com:8080 https://www.example.com\n</code></pre></div><p>上面命令中，请求的代理使用 HTTP 协议。</p><h3 id="proxy-anyauth"><a class="header-anchor" href="#proxy-anyauth" aria-hidden="true">#</a> --proxy-anyauth</h3><blockquote><p>在代理上使用 &quot;any&quot; 认证方法</p></blockquote><h3 id="proxy-basic"><a class="header-anchor" href="#proxy-basic" aria-hidden="true">#</a> --proxy-basic</h3><blockquote><p>在代理上使用 Basic 认证</p></blockquote><h3 id="proxy-cacert-file"><a class="header-anchor" href="#proxy-cacert-file" aria-hidden="true">#</a> --proxy-cacert <code>&lt;file&gt;</code></h3><blockquote><p>用于验证代理的对等体的CA证书</p></blockquote><h3 id="proxy-capath-dir"><a class="header-anchor" href="#proxy-capath-dir" aria-hidden="true">#</a> --proxy-capath <code>&lt;dir&gt;</code></h3><blockquote><p>为代理验证对等的CA目录</p></blockquote><h3 id="proxy-cert-cert-passwd"><a class="header-anchor" href="#proxy-cert-cert-passwd" aria-hidden="true">#</a> --proxy-cert <code>&lt;cert[:passwd]&gt;</code></h3><blockquote><p>设置代理客户端证书</p></blockquote><h3 id="proxy-cert-type-type"><a class="header-anchor" href="#proxy-cert-type-type" aria-hidden="true">#</a> --proxy-cert-type <code>&lt;type&gt;</code></h3><blockquote><p>HTTPS代理的客户端证书类型</p></blockquote><h3 id="proxy-ciphers-list"><a class="header-anchor" href="#proxy-ciphers-list" aria-hidden="true">#</a> --proxy-ciphers <code>&lt;list&gt;</code></h3><blockquote><p>用于代理的SSL密码</p></blockquote><h3 id="proxy-crlfile-file"><a class="header-anchor" href="#proxy-crlfile-file" aria-hidden="true">#</a> --proxy-crlfile <code>&lt;file&gt;</code></h3><blockquote><p>设置代理的CRL列表</p></blockquote><h3 id="proxy-digest"><a class="header-anchor" href="#proxy-digest" aria-hidden="true">#</a> --proxy-digest</h3><blockquote><p>在代理上使用 Digest 认证</p></blockquote><h3 id="proxy-header-header-file"><a class="header-anchor" href="#proxy-header-header-file" aria-hidden="true">#</a> --proxy-header <code>&lt;header/@file&gt;</code></h3><blockquote><p>将自定义头传递给代理</p></blockquote><h3 id="proxy-insecure"><a class="header-anchor" href="#proxy-insecure" aria-hidden="true">#</a> --proxy-insecure</h3><blockquote><p>HTTPS代理连接不验证代理</p></blockquote><h3 id="proxy-key-key"><a class="header-anchor" href="#proxy-key-key" aria-hidden="true">#</a> --proxy-key <code>&lt;key&gt;</code></h3><blockquote><p>HTTPS代理的私钥</p></blockquote><h3 id="proxy-key-type-type"><a class="header-anchor" href="#proxy-key-type-type" aria-hidden="true">#</a> --proxy-key-type <code>&lt;type&gt;</code></h3><blockquote><p>代理的私钥文件类型</p></blockquote><h3 id="proxy-negotiate"><a class="header-anchor" href="#proxy-negotiate" aria-hidden="true">#</a> --proxy-negotiate</h3><blockquote><p>在代理上使用 Negotiate 认证</p></blockquote><h3 id="proxy-ntlm"><a class="header-anchor" href="#proxy-ntlm" aria-hidden="true">#</a> --proxy-ntlm</h3><blockquote><p>在代理上使用 NTLM 认证</p></blockquote><h3 id="proxy-pass-phrase"><a class="header-anchor" href="#proxy-pass-phrase" aria-hidden="true">#</a> --proxy-pass <code>&lt;phrase&gt;</code></h3><blockquote><p>HTTPS代理私钥的Pass短语</p></blockquote><h3 id="proxy-pinnedpubkey-hashes"><a class="header-anchor" href="#proxy-pinnedpubkey-hashes" aria-hidden="true">#</a> --proxy-pinnedpubkey <code>&lt;hashes&gt;</code></h3><blockquote><p>用于验证代理的文件/哈希公钥</p></blockquote><h3 id="proxy-service-name-name"><a class="header-anchor" href="#proxy-service-name-name" aria-hidden="true">#</a> --proxy-service-name <code>&lt;name&gt;</code></h3><blockquote><p>SPNEGO代理服务名称</p></blockquote><h3 id="proxy-ssl-allow-beast"><a class="header-anchor" href="#proxy-ssl-allow-beast" aria-hidden="true">#</a> --proxy-ssl-allow-beast</h3><blockquote><p>允许HTTPS代理的互操作存在安全缺陷</p></blockquote><h3 id="proxy-ssl-auto-client-cert"><a class="header-anchor" href="#proxy-ssl-auto-client-cert" aria-hidden="true">#</a> --proxy-ssl-auto-client-cert</h3><blockquote><p>为代理(通道)使用自动客户端证书</p></blockquote><h3 id="proxy-tls13-ciphers-ciphersuite-list"><a class="header-anchor" href="#proxy-tls13-ciphers-ciphersuite-list" aria-hidden="true">#</a> --proxy-tls13-ciphers <code>&lt;ciphersuite list&gt;</code></h3><blockquote><p>TLS 1.3代理加密套件</p></blockquote><h3 id="proxy-tlsauthtype-type"><a class="header-anchor" href="#proxy-tlsauthtype-type" aria-hidden="true">#</a> --proxy-tlsauthtype <code>&lt;type&gt;</code></h3><blockquote><p>HTTPS代理的TLS认证类型</p></blockquote><h3 id="proxy-tlspassword-string"><a class="header-anchor" href="#proxy-tlspassword-string" aria-hidden="true">#</a> --proxy-tlspassword <code>&lt;string&gt;</code></h3><blockquote><p>HTTPS代理的TLS密码</p></blockquote><h3 id="proxy-tlsuser-name"><a class="header-anchor" href="#proxy-tlsuser-name" aria-hidden="true">#</a> --proxy-tlsuser <code>&lt;name&gt;</code></h3><blockquote><p>HTTPS代理的TLS用户名</p></blockquote><h3 id="proxy-tlsv1"><a class="header-anchor" href="#proxy-tlsv1" aria-hidden="true">#</a> --proxy-tlsv1</h3><blockquote><p>HTTPS代理使用TLSv1协议</p></blockquote><h2 id="y-speed-limit-rate"><a class="header-anchor" href="#y-speed-limit-rate" aria-hidden="true">#</a> -Y(--speed-limit RATE)</h2><blockquote><p>在指定限速时间之后停止传输</p></blockquote><h2 id="y-speed-time-seconds"><a class="header-anchor" href="#y-speed-time-seconds" aria-hidden="true">#</a> -y(--speed-time SECONDS)</h2><blockquote><p>指定时间之后触发限速. 默认 30</p></blockquote><h3 id="ssl"><a class="header-anchor" href="#ssl" aria-hidden="true">#</a> --ssl</h3><blockquote><p>尝试 SSL/TLS (FTP, IMAP, POP3, SMTP)</p></blockquote><h3 id="ssl-allow-beast"><a class="header-anchor" href="#ssl-allow-beast" aria-hidden="true">#</a> --ssl-allow-beast</h3><blockquote><p>允许安全漏洞提高互操作性</p></blockquote><h3 id="ssl-auto-client-cert"><a class="header-anchor" href="#ssl-auto-client-cert" aria-hidden="true">#</a> --ssl-auto-client-cert</h3><blockquote><p>使用自动客户端证书(通道)</p></blockquote><h3 id="ssl-no-revoke"><a class="header-anchor" href="#ssl-no-revoke" aria-hidden="true">#</a> --ssl-no-revoke</h3><blockquote><p>禁用证书撤销检查(通道)</p></blockquote><h3 id="ssl-revoke-best-effort"><a class="header-anchor" href="#ssl-revoke-best-effort" aria-hidden="true">#</a> --ssl-revoke-best-effort</h3><blockquote><p>忽略丢失/脱机证书CRL dist点</p></blockquote><h3 id="ssl-reqd"><a class="header-anchor" href="#ssl-reqd" aria-hidden="true">#</a> --ssl-reqd</h3><blockquote><p>需要 SSL/TLS (FTP, IMAP, POP3, SMTP)</p></blockquote><h2 id="z-parallel"><a class="header-anchor" href="#z-parallel" aria-hidden="true">#</a> -Z(--parallel)</h2><blockquote><p>并行执行传输</p></blockquote><h3 id="parallel-immediate"><a class="header-anchor" href="#parallel-immediate" aria-hidden="true">#</a> --parallel-immediate</h3><blockquote><p>不等待多路复用(使用 --parallel)</p></blockquote><h3 id="parallel-max-num"><a class="header-anchor" href="#parallel-max-num" aria-hidden="true">#</a> --parallel-max <code>&lt;num&gt;</code></h3><blockquote><p>并行传输的最大并发性</p></blockquote><h3 id="pass-phrase"><a class="header-anchor" href="#pass-phrase" aria-hidden="true">#</a> --pass <code>&lt;phrase&gt;</code></h3><blockquote><p>私钥的口令</p></blockquote><h3 id="path-as-is"><a class="header-anchor" href="#path-as-is" aria-hidden="true">#</a> --path-as-is</h3><blockquote><p>不要挤压 .. URL路径中的序列</p></blockquote><h3 id="pinnedpubkey-hashes"><a class="header-anchor" href="#pinnedpubkey-hashes" aria-hidden="true">#</a> --pinnedpubkey <code>&lt;hashes&gt;</code></h3><blockquote><p>用于验证对等体的FILE/HASHS公钥</p></blockquote><h3 id="post301"><a class="header-anchor" href="#post301" aria-hidden="true">#</a> --post301</h3><blockquote><p>在301后不会转为GET请求</p></blockquote><h3 id="post302"><a class="header-anchor" href="#post302" aria-hidden="true">#</a> --post302</h3><blockquote><p>在302后不会转为GET请求</p></blockquote><h3 id="post303"><a class="header-anchor" href="#post303" aria-hidden="true">#</a> --post303</h3><blockquote><p>在303后不会转为GET请求</p></blockquote><h3 id="preproxy-protocol-host-port"><a class="header-anchor" href="#preproxy-protocol-host-port" aria-hidden="true">#</a> --preproxy [protocol://]host[:port]</h3><blockquote><p>首先使用这个代理</p></blockquote><h2 id="z-time-cond-time"><a class="header-anchor" href="#z-time-cond-time" aria-hidden="true">#</a> -z(--time-cond TIME)</h2><blockquote><p>基于时间条件的传输</p></blockquote><h3 id="tls-max-version"><a class="header-anchor" href="#tls-max-version" aria-hidden="true">#</a> --tls-max <code>&lt;VERSION&gt;</code></h3><blockquote><p>设置允许使用的最大TLS版本</p></blockquote><h3 id="tls13-ciphers-ciphersuite-list"><a class="header-anchor" href="#tls13-ciphers-ciphersuite-list" aria-hidden="true">#</a> --tls13-ciphers <code>&lt;ciphersuite list&gt;</code></h3><blockquote><p>使用TLS 1.3加密套件</p></blockquote><h3 id="tlsauthtype-type"><a class="header-anchor" href="#tlsauthtype-type" aria-hidden="true">#</a> --tlsauthtype <code>&lt;type&gt;</code></h3><blockquote><p>TLS验证类型</p></blockquote><h3 id="tlspassword-string"><a class="header-anchor" href="#tlspassword-string" aria-hidden="true">#</a> --tlspassword <code>&lt;string&gt;</code></h3><blockquote><p>TLS密码</p></blockquote><h3 id="tlsuser-name"><a class="header-anchor" href="#tlsuser-name" aria-hidden="true">#</a> --tlsuser <code>&lt;name&gt;</code></h3><blockquote><p>TLS用户名</p></blockquote><h2 id="progress-bar"><a class="header-anchor" href="#progress-bar" aria-hidden="true">#</a> -#(--progress-bar)</h2><blockquote><p>以进度条显示传输进度</p></blockquote><h3 id="proto-protocols"><a class="header-anchor" href="#proto-protocols" aria-hidden="true">#</a> --proto PROTOCOLS</h3><blockquote><p>启用/禁用 指定的协议</p></blockquote><h3 id="proto-default-protocol"><a class="header-anchor" href="#proto-default-protocol" aria-hidden="true">#</a> --proto-default <code>&lt;protocol&gt;</code></h3><blockquote><p>对任何缺少方案的URL使用协议</p></blockquote><h3 id="proto-redir-protocols"><a class="header-anchor" href="#proto-redir-protocols" aria-hidden="true">#</a> --proto-redir PROTOCOLS</h3><blockquote><p>在重定向上 启用/禁用 指定的协议</p></blockquote><h2 id="_1-tlsv1"><a class="header-anchor" href="#_1-tlsv1" aria-hidden="true">#</a> -1(--tlsv1)</h2><blockquote><p>使用 =&gt; TLSv1 (SSL)</p></blockquote><h3 id="tlsv1-0"><a class="header-anchor" href="#tlsv1-0" aria-hidden="true">#</a> --tlsv1.0</h3><blockquote><p>使用 TLSv1.0 (SSL)</p></blockquote><h3 id="tlsv1-1"><a class="header-anchor" href="#tlsv1-1" aria-hidden="true">#</a> --tlsv1.1</h3><blockquote><p>使用 TLSv1.1 (SSL)</p></blockquote><h3 id="tlsv1-2"><a class="header-anchor" href="#tlsv1-2" aria-hidden="true">#</a> --tlsv1.2</h3><blockquote><p>使用 TLSv1.2 (SSL)</p></blockquote><h3 id="trace-file"><a class="header-anchor" href="#trace-file" aria-hidden="true">#</a> --trace FILE</h3><blockquote><p>将 debug 信息写入指定的文件</p></blockquote><h3 id="trace-ascii-file"><a class="header-anchor" href="#trace-ascii-file" aria-hidden="true">#</a> --trace-ascii FILE</h3><blockquote><p>类似 --trace 但使用16进度输出</p></blockquote><h3 id="trace-time"><a class="header-anchor" href="#trace-time" aria-hidden="true">#</a> --trace-time</h3><blockquote><p>向 trace/verbose 输出添加时间戳</p></blockquote><h3 id="tr-encoding"><a class="header-anchor" href="#tr-encoding" aria-hidden="true">#</a> --tr-encoding</h3><blockquote><p>请求压缩传输编码</p></blockquote><h3 id="unix-socket-path"><a class="header-anchor" href="#unix-socket-path" aria-hidden="true">#</a> --unix-socket <code>&lt;path&gt;</code></h3><blockquote><p>通过这个Unix域套接字连接</p></blockquote><h2 id="_2-sslv2"><a class="header-anchor" href="#_2-sslv2" aria-hidden="true">#</a> -2(--sslv2)</h2><blockquote><p>使用 SSLv2 (SSL)</p></blockquote><h2 id="_3-sslv3"><a class="header-anchor" href="#_3-sslv3" aria-hidden="true">#</a> -3(--sslv3)</h2><blockquote><p>使用 SSLv3 (SSL)</p></blockquote><h3 id="stderr-file"><a class="header-anchor" href="#stderr-file" aria-hidden="true">#</a> --stderr FILE</h3><blockquote><p>重定向 stderr 的文件位置. - means stdout</p></blockquote><h3 id="styled-output"><a class="header-anchor" href="#styled-output" aria-hidden="true">#</a> --styled-output</h3><blockquote><p>为HTTP头启用样式输出</p></blockquote><h3 id="suppress-connect-headers"><a class="header-anchor" href="#suppress-connect-headers" aria-hidden="true">#</a> --suppress-connect-headers</h3><blockquote><p>抑制代理CONNECT响应头</p></blockquote><h3 id="tcp-fastopen"><a class="header-anchor" href="#tcp-fastopen" aria-hidden="true">#</a> --tcp-fastopen</h3><blockquote><p>使用TCP快速打开</p></blockquote><h3 id="tcp-nodelay"><a class="header-anchor" href="#tcp-nodelay" aria-hidden="true">#</a> --tcp-nodelay</h3><blockquote><p>使用 TCP_NODELAY 选项</p></blockquote><h2 id="_4-ipv4"><a class="header-anchor" href="#_4-ipv4" aria-hidden="true">#</a> -4(--ipv4)</h2><blockquote><p>将名称解析为IPv4地址</p></blockquote><h2 id="_6-ipv6"><a class="header-anchor" href="#_6-ipv6" aria-hidden="true">#</a> -6(--ipv6)</h2><blockquote><p>将名称解析为IPv6地址</p></blockquote>',570)];o.render=function(t,l,o,s,c,i){return e(),a("div",null,r)};export{l as __pageData,o as default};
