import{o as s,c as n,b as a}from"./app.e234469c.js";const e='{"title":"Husky","description":"前端代码风格规范之Husky","frontmatter":{"title":"Husky","head":[["meta",{"name":"description","content":"前端代码风格规范之Husky"}],["meta",{"name":"keywords","content":"前端代码风格规范 husky"}]]},"headers":[{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"安装","slug":"安装"},{"level":2,"title":"配置","slug":"配置"},{"level":2,"title":"验证","slug":"验证"}],"relativePath":"front-end/lint/husky.md","lastUpdated":1631806521983}',t={},o=[a('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p>在代码被提交到 <code>Git</code> 仓库之前，我们可以做一些预检查或者格式化。具体的做法就是利用 <code>Git</code> 提交钩子，当使用钩子时便会触发某些格式化操作。</p><p><a href="https://www.npmjs.com/package/husky" target="_blank" rel="noopener noreferrer">husky 包</a></p><p><a href="https://typicode.github.io/husky/#/?id=create-a-hook" target="_blank" rel="noopener noreferrer">husky 官方文档</a></p><h2 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> husky -D\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> <span class="token function">add</span> husky -D\n</code></pre></div><h2 id="配置"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>在 <code>package.json</code> 文件中添加命令：</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  ...\n  <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后运行此命令（启用 <code>Git</code> 钩子）：</p><div class="language-shell"><pre><code><span class="token function">npm</span> prepare\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> prepare\n</code></pre></div><p>最后创建一个 <code>hook</code>（钩子）:</p><div class="language-shell"><pre><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm test&quot;</span>\n</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>这里也可以如此添加（推荐使用此种，方便我们接下来的整套流程演示）：</p><div class="language-shell"><pre><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;npx --no-install commitlint --edit $1&#39;</span>\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;yarn commitlint --edit $1&#39;</span>\n</code></pre></div></div><h2 id="验证"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><p>运行：</p><div class="language-git"><pre><code>git add .\ngit commit -m <span class="token string">&#39;test husky&#39;</span>\n</code></pre></div><p>便会运行 <code>test</code> 命令，同时 <code>commit</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在 Windows 上使用 <code>Git Bash</code> 时，<code>Git</code> 钩子可能会失败。如果 Windows 上有用户，强烈建议添加以下变通方法:</p><ol><li>创建 <code>.husky/common.sh</code>:</li></ol><div class="language-shell"><pre><code><span class="token function-name function">command_exists</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin class-name">command</span> -v <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># Workaround for Windows 10, Git Bash and Yarn</span>\n<span class="token keyword">if</span> command_exists winpty <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">test</span> -t <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n  <span class="token builtin class-name">exec</span> <span class="token operator">&lt;</span> /dev/tty\n<span class="token keyword">fi</span>\n</code></pre></div><ol start="2"><li>把它放在 <code>Yarn</code> 用来运行命令的地方:</li></ol><div class="language-shell"><pre><code><span class="token shebang important">#!/bin/sh</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/common.sh&quot;</span>\n\n<span class="token function">yarn</span> <span class="token punctuation">..</span>.\n</code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>主要是配合一些格式化的命令，如 <code>pretty</code> 、 <code>commitlint</code> 等</p></div>',20)];t.render=function(a,e,t,p,c,l){return s(),n("div",null,o)};export{e as __pageData,t as default};
