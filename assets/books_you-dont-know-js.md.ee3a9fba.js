import{o as e,c as a,a as l}from"./app.76cee021.js";const r='{"title":"你不知道的JavaScript","description":"you-dont-know-JS读书笔记","frontmatter":{"title":"你不知道的JavaScript","head":[["meta",{"name":"description","content":"you-dont-know-JS读书笔记"}],["meta",{"name":"keywords","content":"你不知道的JavaScript you-dont-know-JS 你不知道的JS 读书笔记"}]]},"headers":[{"level":2,"title":"作用域和闭包","slug":"作用域和闭包"},{"level":3,"title":"作用域是什么","slug":"作用域是什么"},{"level":3,"title":"词法作用域","slug":"词法作用域"}],"relativePath":"books/you-dont-know-js.md","lastUpdated":1622703166652}',i={},o=l('<h2 id="作用域和闭包"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="作用域是什么"><a class="header-anchor" href="#作用域是什么" aria-hidden="true">#</a> 作用域是什么</h3><p>首先介绍传统编译语言“编译”步骤：</p><ul><li>分词：把我们编写的代码分解。比如var a = 2;，会分解成var、a、=、2、；空格的分解与否取决于空格在语言中有没有意义</li><li>解析：把上一步分解得到的词法单元流（数组）根据嵌套关系（作用域）组成“抽象语法树”（AST）</li><li>生成：将AST转为机器可执行指令</li></ul><p><strong>总结：将编写的代码转换位AST，生成机器可执行指令，最后机器执行指令<code>创建变量、存储变量等</code>，实际上JavaScript编译过程也类似如此</strong></p><p>其次介绍执行程序的“打工人”</p><ul><li>引擎：项目经理，从头到尾参与整个编译和<code>执行</code>过程</li><li>编译器：苦逼程序员，上边编译过程就是它负责处理</li><li>作用域：产品经理，定义一套规则，规定当前执行代码对声明标识符的访问权限</li></ul><p>当来一个新项目时（执行var a = 2;），程序员就要和产品经理开始沟通（撕逼：自行脑部吧🤭）</p><p>代码生成阶段编译器处理var a = 2;流程：</p><ul><li>看到var a，编译器询问当前作用域是否已存在a，存在，则忽略它，继续编译；不存在，则在当前作用域生命变量a</li><li>然后编译器生成引擎运行所需代码(处理a = 2)。引擎运行编译器处理之后的a = 2：引擎询问当前作用域是否已存在a，存在，则使用此a赋值；不存在，则在向上作用域查找a <ul><li>类似a = 2这种查找赋值操作<code>目标</code>是LHS查询(引擎查找) <ul><li>查询不到时：正常模式-不会报错；严格模式-ReferenceError</li><li>查到但进行不合理操作(比如应用null或undefined属性)：TypeError</li></ul></li><li>类似console.log(2)这种查找赋值操作<code>源头</code>是RHS查询(查询不到时：ReferenceError)(引擎查找)</li></ul></li><li>引擎找到a，赋值；没找到，抛出异常</li></ul><p><strong>总结：变量赋值时，首先编译器在当前作用域中声明一个变量<code>如果之前没声明过</code>，然后引擎运行时在作用域中查找该变量，能找到就赋值，找不到则抛出异常</strong></p><p>作用域链：作用域层层嵌套（比如函数嵌套函数）。当前作用域中找不到某变量，引擎就会向外层作用域层层查找，直到找到该变量或是在最外层的全局作用域中也没找到时停止查找</p><h3 id="词法作用域"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h3>',13);i.render=function(l,r,i,t,d,n){return e(),a("div",null,[o])};export default i;export{r as __pageData};
