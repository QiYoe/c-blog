import{o as n,c as s,a}from"./app.ef25076d.js";const t='{"title":"你不知道的JavaScript","description":"you-dont-know-JS读书笔记","frontmatter":{"title":"你不知道的JavaScript","head":[["meta",{"name":"description","content":"you-dont-know-JS读书笔记"}],["meta",{"name":"keywords","content":"你不知道的JavaScript you-dont-know-JS 你不知道的JS 读书笔记"}]]},"headers":[{"level":2,"title":"作用域和闭包","slug":"作用域和闭包"},{"level":3,"title":"作用域是什么","slug":"作用域是什么"},{"level":3,"title":"词法作用域","slug":"词法作用域"},{"level":3,"title":"函数作用域和块作用域","slug":"函数作用域和块作用域"},{"level":3,"title":"提升","slug":"提升"},{"level":3,"title":"作用域闭包","slug":"作用域闭包"},{"level":2,"title":"this和对象原型","slug":"this和对象原型"},{"level":3,"title":"关于this","slug":"关于this"},{"level":3,"title":"this全面解析","slug":"this全面解析"},{"level":2,"title":"对象","slug":"对象"},{"level":2,"title":"混合对象”类“","slug":"混合对象”类“"}],"relativePath":"books/you-dont-know-js.md","lastUpdated":1622993647656}',o={},e=a('<h2 id="作用域和闭包"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="作用域是什么"><a class="header-anchor" href="#作用域是什么" aria-hidden="true">#</a> 作用域是什么</h3><p>首先介绍传统编译语言“编译”步骤：</p><ul><li>分词：把我们编写的代码分解。比如var a = 2;，会分解成var、a、=、2、；空格的分解与否取决于空格在语言中有没有意义</li><li>解析：把上一步分解得到的词法单元流（数组）根据嵌套关系（作用域）组成“抽象语法树”（AST）</li><li>生成代码：将AST转为机器可执行指令</li></ul><p><strong>总结：将编写的代码转换位AST，生成机器可执行指令，最后机器执行指令<code>创建变量、存储变量等</code>，实际上JavaScript编译过程也类似如此</strong></p><p>其次介绍js执行程序的“打工人”</p><ul><li>引擎：项目经理，从头到尾参与整个编译和<code>执行</code>过程</li><li>编译器：苦逼程序员，上边编译过程就是它负责处理</li><li>作用域：产品经理，定义一套规则，规定当前执行代码对声明标识符的访问权限</li></ul><p>当来一个新项目时（执行var a = 2;），程序员就要和产品经理开始沟通（撕逼：自行脑部吧🤭）</p><p>代码生成阶段编译器处理var a = 2;流程：</p><ul><li>看到var a，编译器询问<code>当前作用域</code>是否已存在a，存在，则忽略它，继续编译；不存在，则在当前作用域声明变量a：<code>undefined</code>（<strong>编译器在当前作用域活动</strong>）</li><li>然后编译器生成引擎运行所需代码（处理a = 2）。引擎运行编译器处理之后的a = 2：引擎询问当前作用域是否已存在a，存在，则使用此a赋值；不存在，则在向上作用域查找a（<strong>引擎在作用域链活动</strong>） <ul><li>类似a = 2这种查找赋值操作<code>目标</code>是LHS查询（<strong>引擎查找</strong>） <ul><li>查询不到时：正常模式-不会报错（<strong>自动生成全局属性a</strong>）；严格模式-ReferenceError</li><li>查到但进行不合理操作（比如获取null或undefined的子属性）：TypeError</li></ul></li><li>类似console.log(2)这种查找赋值操作<code>源头</code>是RHS查询（查询不到时：ReferenceError）（<strong>引擎查找</strong>）</li></ul></li></ul><p><strong>总结：变量赋值时，首先编译器在当前作用域中声明一个变量<code>如果之前没声明过</code>，然后引擎运行时在作用域中查找该变量，能找到就赋值，找不到则抛出异常（此处说的是严格模式，正常模式下不会报错）</strong></p><p>作用域链：作用域层层嵌套（比如函数嵌套函数）。当前作用域中找不到某变量，引擎就会向外层作用域层层查找，直到找到该变量或是在最外层的全局作用域中也没找到时停止查找</p><h3 id="词法作用域"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h3><p>作用域有两种工作模型：</p><ul><li>词法作用域（最为普遍）--定义在词法阶段的作用域（也就是说作用域在写代码时就已经决定好了--大部分情况下是这样） <ul><li>词法阶段：即<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88">上一节</a>说到的<code>分词</code></li><li>查找：引擎执行代码，作用域（作用域气泡更容易理解）层层向上查找变量--<code>遮蔽效应</code>（作用域查找匹配到第一个标识符时停止，即内部标识符”屏蔽“了外部标识符）</li><li>欺骗词法：打破定义在词法阶段的作用域的规则（非常不建议使用：影响性能） <ul><li>eval：在运行修改书写期的词法作用域</li><li>with（废弃）</li></ul></li></ul></li><li>动态作用域（比如Bash、Perl）</li></ul><h3 id="函数作用域和块作用域"><a class="header-anchor" href="#函数作用域和块作用域" aria-hidden="true">#</a> 函数作用域和块作用域</h3><ul><li>函数作用域--不多说，函数内部形成函数自身的作用域（即函数外部无法访问函数内部变量） <ul><li>函数声明--function foo()开头</li><li>函数表达式--非function()开头<code>(function foo(){...}())或foo()</code><ul><li>匿名（不建议）</li><li>具名 <ul><li>IIFE（立即执行函数）</li></ul></li></ul></li></ul></li><li>块作用域：{}（<strong>if条件语句不算块</strong>） <ul><li>try/catch：catch会创建一个块作用域</li><li>let、const</li></ul></li></ul><p><strong>总结：任何声明在某个作用域内的变量，都将<code>附属于这个作用域</code></strong></p><h3 id="提升"><a class="header-anchor" href="#提升" aria-hidden="true">#</a> 提升</h3><p>引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来，<a href="#%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F">词法作用域</a>核心内容（<strong>针对当前作用域</strong>）</p><p>函数优先：函数会首先被提升，然后才是变量（<strong>同名的函数声明和变量声明不提升规则方式进行覆盖</strong>）</p><h3 id="作用域闭包"><a class="header-anchor" href="#作用域闭包" aria-hidden="true">#</a> 作用域闭包</h3><p>启示：<strong>JavaScript中闭包无所不在，你只需要能够识别并拥抱它</strong></p><p><code>在自己定义的词法作用域以外的地方执行，此时该作用域并未被销毁</code></p><h2 id="this和对象原型"><a class="header-anchor" href="#this和对象原型" aria-hidden="true">#</a> this和对象原型</h2><h3 id="关于this"><a class="header-anchor" href="#关于this" aria-hidden="true">#</a> 关于this</h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>this作用：被自动定义在所有函数的作用域中，隐式传递上下文对象</li><li>this不指向函数词法作用域：即函数书写时的上下文</li><li>this实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用</li></ul></div><h3 id="this全面解析"><a class="header-anchor" href="#this全面解析" aria-hidden="true">#</a> this全面解析</h3><ul><li>调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置） <ul><li>调用栈：为了到达当前执行位置所调用的所有函数（在当前正在执行的函数的前一个调用）</li><li>绑定规则： <ul><li>默认绑定：独立函数调用——this指向全局对象 <ul><li>严格模式：与函数调用位置无关： <ul><li>严格模式下的this指向undefined</li><li>严格模式运行函数，函数内this指向函数声明的上下文</li></ul></li><li>正常模式：<strong>直接使用不带任何修饰进行调用</strong></li></ul></li><li>隐式绑定：比如obj 对象“拥有”或者“包含”函数时，函数中的this会绑定到obj上下文对象 <ul><li>隐式丢失：即默认绑定</li></ul></li><li>显示绑定：直接指定this的绑定对象 <ul><li>call、apply：如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值会被转换成它的对象形式（也就是 new String(..)、new Boolean(..) 或者new Number(..)）。这通常被称为“装箱”（<strong>无法解决隐式丢失问题</strong>）</li><li>硬绑定：函数内部执行call、apply绑定，后面执行此函数的任何绑定操作都会无效</li></ul></li><li>new绑定： <ol><li><strong>创建（或者说构造）一个全新的对象</strong></li><li><strong>这个新对象会被执行 [[ 原型 ]] 连接</strong></li><li><strong>这个新对象会绑定到函数调用的 this</strong></li><li><strong>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</strong></li></ol></li><li>箭头函数：函数内部创建的箭头函数会捕获调用时此函数的this。箭头函数的绑定无法被修改（new 也不行！）</li><li>优先级： <ol><li>函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。<strong>var bar = new foo()</strong></li><li>函数是否通过 call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。<strong>var bar = foo.call(obj)</strong></li><li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。<strong>var bar = obj.foo()</strong></li><li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。<strong>var bar = foo()</strong></li></ol></li></ul></li><li>绑定例外：即当call、apply、bind的参数时null、undefined时，绑定全局。建议使用<code>const ф = Object.create(null)</code>创建一个没有prototype的{} <ul><li>软绑定：给默认绑定指定一个全局对象和 undefined 以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改 this 的能力</li></ul></li></ul></li><li>声明位置：函数书写时声明的位置（可能会考虑变量提升）</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是：baz</span>\n  <span class="token comment">// 因此，当前调用位置是全局作用域</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- bar 的调用位置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar</span>\n  <span class="token comment">// 因此，当前调用位置在 baz 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- foo 的调用位置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar -&gt; foo</span>\n  <span class="token comment">// 因此，当前调用位置在 bar 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- baz 的调用位置</span>\n</code></pre></div><h2 id="对象"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p>6中基本类型：string、number、boolean、null、undefined、object</p><p>语言bug：typeof null === &#39;object&#39;<code>在JS中二进制的前三位为0判为object，而null全是0，所以会返回&#39;object&#39;</code></p><p>内置对象：String、Number、Boolean、Object、Function、Array、Date、RegExp、Error</p><p>键值：在引擎内部，这些值的存储方式是多种多样的，一般并不会存在对象容器内部。存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置</p><ul><li>属性访问：. <code>满足标识符命名规范</code><ul><li>属性名永远都是字符串（如果你使用 string（字面量）以外的其他值作为属性名，那它首先会被转换为一个字符串<code>数字也不例外</code>）</li></ul></li><li>键访问：[] <code>可见接受任意UTF-8/Unicode</code></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span>myObject<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;foo&quot;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bar&quot;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;[object Object]&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;baz&quot;</span>\n</code></pre></div><p>如果你试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成 一个数值下标（因此会修改数组的内容而不是添加一个属性）</p><ul><li><p>浅拷贝：复制引用地址<code>Object.assign()（实际是使用=操作符赋值）</code></p></li><li><p>深拷贝：json安全时<code>JSON.parse(JSON.stringify())</code></p></li><li><p>属性描述符：Object.getOwnPropertyDescriptor( myObject, &quot;a&quot; )</p><ul><li>value、writable、enumerable、configurable</li><li>[[Get]]、 [[Put]] <ul><li>[[put]]: <ol><li>属性是否是访问描述符（参见 3.3.9 节）？如果是并且存在 setter 就调用 setter。</li><li>属性的数据描述符中 writable 是否是 false ？如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li><li>如果都不是，将该值设置为属性的值。</li></ol></li></ul></li></ul></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {</span>\n<span class="token comment">// value: 2,  //属性描述符</span>\n<span class="token comment">// writable: true,  //属性描述符  可以重新赋值</span>\n<span class="token comment">// enumerable: true,  //属性描述符  可以使用 defineProperty(..) 方法</span>\n<span class="token comment">// configurable: true  //属性描述符</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">var</span> myObject1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 给 a 定义一个 getter</span>\n  <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_a_<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 给 a 定义一个 setter</span>\n  <span class="token keyword">set</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_a_ <span class="token operator">=</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmyObject1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nmyObject1<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>要注意有一个小小的例外：即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为true。除了无法修改，configurable:false 还会禁止删除这个属性（不能使用delete删除属性）</p></div><ol><li>对象常量：结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性（不可修改、重定义或者删除）</li><li>对象常量：如果你想禁止一个对象添加新属性并且保留已有属性，可以使用Object.preventExtensions(..)</li><li>密封：Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 configurable:false</li><li>冻结：Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;b&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中（参见第 5 章）。相比之下，hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Object.keys(..) 会返回一个数组，包含所有可枚举属性，Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</p><p>in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链，然而，Object.keys(..)和 Object.getOwnPropertyNames(..) 都只会查找对象直接包含的属性。</p></div><p>for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器（@@iterator 对象）对象的next() 方法来遍历所有返回值</p><h2 id="混合对象”类“"><a class="header-anchor" href="#混合对象”类“" aria-hidden="true">#</a> 混合对象”类“</h2>',46);o.render=function(a,t,o,p,l,c){return n(),s("div",null,[e])};export default o;export{t as __pageData};
