import{o as n,c as s,b as a}from"./app.d9b5a45a.js";const p='{"title":"深入理解 TypeScript","description":"TypeScript 深入理解 TS","frontmatter":{"title":"深入理解 TypeScript","head":[["meta",{"name":"description","content":"TypeScript 深入理解 TS"}],["meta",{"name":"keywords","content":"TypeScript 深入理解 TS"}]]},"headers":[{"level":2,"title":"TypeScript 项目","slug":"typescript-项目"},{"level":3,"title":"编译上下文","slug":"编译上下文"},{"level":3,"title":"声明空间","slug":"声明空间"},{"level":3,"title":"模块","slug":"模块"},{"level":3,"title":"命名空间","slug":"命名空间"},{"level":3,"title":"动态导入表达式","slug":"动态导入表达式"},{"level":2,"title":"TypeScript 类型系统","slug":"typescript-类型系统"},{"level":3,"title":"概览","slug":"概览"},{"level":3,"title":"从JavaScript 迁移","slug":"从javascript-迁移"},{"level":3,"title":"@types","slug":"types"},{"level":3,"title":"环境声明","slug":"环境声明"},{"level":3,"title":"接口","slug":"接口-1"},{"level":3,"title":"枚举","slug":"枚举"},{"level":3,"title":"lib.d.ts","slug":"lib-d-ts"},{"level":3,"title":"函数","slug":"函数"},{"level":3,"title":"可调用的","slug":"可调用的"},{"level":3,"title":"类型断言","slug":"类型断言"},{"level":3,"title":"Freshness","slug":"freshness"},{"level":3,"title":"类型保护","slug":"类型保护"},{"level":3,"title":"字面量类型","slug":"字面量类型"},{"level":3,"title":"readonly","slug":"readonly"},{"level":3,"title":"范型","slug":"范型-1"},{"level":3,"title":"类型推断","slug":"类型推断"},{"level":3,"title":"类型兼容性","slug":"类型兼容性"},{"level":3,"title":"Never","slug":"never"},{"level":3,"title":"辨析联合类型","slug":"辨析联合类型"},{"level":3,"title":"索引签名","slug":"索引签名"},{"level":3,"title":"流动的类型","slug":"流动的类型"},{"level":3,"title":"异常处理","slug":"异常处理"},{"level":3,"title":"混合","slug":"混合"},{"level":3,"title":"ThisType","slug":"thistype"},{"level":2,"title":"JSX","slug":"jsx"},{"level":3,"title":"支持 JSX","slug":"支持-jsx"},{"level":3,"title":"React JSX","slug":"react-jsx"},{"level":3,"title":"非 React JSX","slug":"非-react-jsx"},{"level":2,"title":"TypeScript 错误提示","slug":"typescript-错误提示"},{"level":3,"title":"解读 Errors","slug":"解读-errors"},{"level":3,"title":"常见的 Error","slug":"常见的-error"},{"level":2,"title":"TIPs","slug":"tips"},{"level":3,"title":"基于字符串的枚举","slug":"基于字符串的枚举"},{"level":3,"title":"名义化类型","slug":"名义化类型"},{"level":3,"title":"状态函数","slug":"状态函数"},{"level":3,"title":"Bind 是有害的","slug":"bind-是有害的"},{"level":3,"title":"柯里化","slug":"柯里化"},{"level":3,"title":"范型的实例化类型","slug":"范型的实例化类型"},{"level":3,"title":"对象字面量的惰性初始化","slug":"对象字面量的惰性初始化"},{"level":3,"title":"类是有用的","slug":"类是有用的"},{"level":3,"title":"export default 被认为是有害的","slug":"export-default-被认为是有害的"},{"level":3,"title":"减少 setter 属性的使用","slug":"减少-setter-属性的使用"},{"level":3,"title":"创建数组","slug":"创建数组"},{"level":3,"title":"谨慎使用 --outFile","slug":"谨慎使用-outfile"},{"level":3,"title":"TypeScript 中的静态构造函数","slug":"typescript-中的静态构造函数"},{"level":3,"title":"单例模式","slug":"单例模式"},{"level":3,"title":"函数参数","slug":"函数参数"},{"level":3,"title":"Truthy","slug":"truthy"},{"level":3,"title":"构建切换","slug":"构建切换"},{"level":3,"title":"类型安全的 Event Emitter","slug":"类型安全的-event-emitter"},{"level":3,"title":"Reflect Metadata","slug":"reflect-metadata"},{"level":3,"title":"协变与逆变","slug":"协变与逆变"},{"level":3,"title":"infer","slug":"infer"},{"level":2,"title":"TypeScript 编译原理","slug":"typescript-编译原理"},{"level":3,"title":"概览","slug":"概览-1"},{"level":3,"title":"程序","slug":"程序"},{"level":3,"title":"抽象语法树","slug":"抽象语法树"},{"level":3,"title":"扫描器","slug":"扫描器"},{"level":3,"title":"解析器","slug":"解析器"},{"level":3,"title":"绑定器","slug":"绑定器"},{"level":3,"title":"检查器","slug":"检查器"},{"level":3,"title":"发射器","slug":"发射器"},{"level":2,"title":"TypeScript FAQs","slug":"typescript-faqs"},{"level":3,"title":"一些常见的「bug」并不是 bug","slug":"一些常见的「bug」并不是-bug"},{"level":3,"title":"一些常见的 Feature 需求","slug":"一些常见的-feature-需求"},{"level":3,"title":"类型系统的行为","slug":"类型系统的行为"},{"level":3,"title":"函数","slug":"函数-1"},{"level":3,"title":"类","slug":"类"},{"level":3,"title":"范型","slug":"范型-2"},{"level":3,"title":"模块","slug":"模块-1"},{"level":3,"title":"枚举","slug":"枚举-1"},{"level":3,"title":"类型守卫","slug":"类型守卫"},{"level":3,"title":"JSX 和 React","slug":"jsx-和-react"},{"level":3,"title":"一些不能按预期工作的代码","slug":"一些不能按预期工作的代码"},{"level":3,"title":"命令行的行为","slug":"命令行的行为"},{"level":3,"title":"tsconfig.json 的行为","slug":"tsconfig-json-的行为"}],"relativePath":"books/typescript-deep-dive.md","lastUpdated":1630398235722}',t={},o=[a('<h2 id="typescript-项目"><a class="header-anchor" href="#typescript-项目" aria-hidden="true">#</a> TypeScript 项目</h2><h3 id="编译上下文"><a class="header-anchor" href="#编译上下文" aria-hidden="true">#</a> 编译上下文</h3><p>编译上下文算是一个比较花哨的术语，可以用它来给文件分组，告诉 TypeScript 哪些文件是有效的，哪些是无效的。除了有效文件所携带信息外，编译上下文还包含有正在被使用的编译选项的信息。定义这种逻辑分组，一个比较好的方式是使用 <code>tsconfig.json</code> 文件。</p><h4 id="tsconfig-json"><a class="header-anchor" href="#tsconfig-json" aria-hidden="true">#</a> tsconfig.json</h4><h5 id="基础"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h5><p>开始使用 <code>tsconfig.json</code> 是一件比较容易的事，你仅仅需要写下：</p><div class="language-json"><pre><code><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><p>例如，在项目的根目录下创建一个空 JSON 文件。通过这种方式，TypeScript 将 会把此目录和子目录下的所有 .ts 文件作为编译上下文的一部分，它还会包含一部分默认的编译选项。</p><h5 id="编译选项"><a class="header-anchor" href="#编译选项" aria-hidden="true">#</a> 编译选项</h5><p>你可以通过 <code>compilerOptions</code> 来定制你的编译选项：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/* 基本选项 */</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES6&#39;/&#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>                  <span class="token comment">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span>\n    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                             <span class="token comment">// 指定要包含在编译中的库文件</span>\n    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment">// 允许编译 javascript 文件</span>\n    <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment">// 报告 javascript 文件中的错误</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span><span class="token punctuation">,</span>                     <span class="token comment">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span>\n    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment">// 生成相应的 &#39;.d.ts&#39; 文件</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment">// 生成相应的 &#39;.map&#39; 文件</span>\n    <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 将输出文件合并为一个文件</span>\n    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                        <span class="token comment">// 指定输出目录</span>\n    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 用来控制输出目录结构 --outDir.</span>\n    <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 删除编译后的所有的注释</span>\n    <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 不生成输出文件</span>\n    <span class="token property">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 从 tslib 导入辅助工具函数</span>\n    <span class="token property">&quot;isolatedModules&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 将每个文件作为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span>\n\n    <span class="token comment">/* 严格的类型检查选项 */</span>\n    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 启用所有严格类型检查选项</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 在表达式和声明上有隐含的 any类型时报错</span>\n    <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment">// 启用严格的 null 检查</span>\n    <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>\n    <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span>\n\n    <span class="token comment">/* 额外的检查 */</span>\n    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 有未使用的变量时，抛出错误</span>\n    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 有未使用的参数时，抛出错误</span>\n    <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span>\n    <span class="token property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>\n\n    <span class="token comment">/* 模块解析选项 */</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>            <span class="token comment">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)</span>\n    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 用于解析非相对模块名称的基目录</span>\n    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token comment">// 模块名到基于 baseUrl 的路径映射的列表</span>\n    <span class="token property">&quot;rootDirs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span>\n    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token comment">// 包含类型声明的文件列表</span>\n    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token comment">// 需要包含的类型声明文件名列表</span>\n    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 允许从没有设置默认导出的模块中默认导入。</span>\n\n    <span class="token comment">/* Source Map Options */</span>\n    <span class="token property">&quot;sourceRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                    <span class="token comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span>\n    <span class="token property">&quot;mapRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                       <span class="token comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span>\n    <span class="token property">&quot;inlineSourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span>\n    <span class="token property">&quot;inlineSources&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span>\n\n    <span class="token comment">/* 其他选项 */</span>\n    <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 启用装饰器</span>\n    <span class="token property">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token comment">// 为装饰器提供元数据的支持</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>关于这些（或者更多）编译选项，稍后将会讨论。</p><h5 id="typescript-编译"><a class="header-anchor" href="#typescript-编译" aria-hidden="true">#</a> TypeScript 编译</h5><p>好的 IDE 支持对 TypeScript 的即时编译。但是，如果你想在使用 <code>tsconfig.json</code> 时从命令行手动运行 TypeScript 编译器，你可以通过以下方式：</p><p>运行 tsc，它会在当前目录或者是父级目录寻找 <code>tsconfig.json</code> 文件。 运行 <code>tsc -p ./path-to-project-directory</code> 。当然，这个路径可以是绝对路径，也可以是相对于当前目录的相对路径。 你甚至可以使用 <code>tsc -w</code> 来启用 TypeScript 编译器的观测模式，在检测到文件改动之后，它将重新编译。</p><h4 id="制定文件"><a class="header-anchor" href="#制定文件" aria-hidden="true">#</a> 制定文件</h4><p>你也可以显式指定需要编译的文件：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;./some/file.ts&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>你还可以使用 <code>include</code> 和 <code>exclude</code> 选项来指定需要包含的文件和排除的文件：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;./folder&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;./folder/**/*.spec.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;./folder/someSubFolder&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 <code>globs</code>：<code>**/*</code> （一个示例用法：<code>some/folder/**/*</code>）意味着匹配所有的文件夹和所有文件（扩展名为 <code>.ts/.tsx</code>，当开启了 <code>allowJs: true</code> 选项时，扩展名可以是 <code>.js/.jsx</code>）。</p></div><h3 id="声明空间"><a class="header-anchor" href="#声明空间" aria-hidden="true">#</a> 声明空间</h3><p>在 TypeScript 里存在两种声明空间：类型声明空间与变量声明空间。下文将分别讨论这两个概念。</p><h4 id="类型声明空间"><a class="header-anchor" href="#类型声明空间" aria-hidden="true">#</a> 类型声明空间</h4><p>类型声明空间包含用来当做类型注解的内容，例如下面的类型声明：</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Bas</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>你可以将 <code>Foo</code>, <code>Bar</code>, <code>Bas</code> 作为类型注解使用，示例如下：</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Bas</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>注意，尽管你定义了 interface Bar，却并不能够把它作为一个变量来使用，因为它没有定义在变量声明空间中。</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> Bar<span class="token punctuation">;</span> <span class="token comment">// Error: &quot;cannot find name &#39;Bar&#39;&quot;</span>\n</code></pre></div><p>出现错误提示： <code>cannot find name &#39;Bar&#39;</code> 的原因是名称 <code>Bar</code> 并未定义在变量声明空间。这将带领我们进入下一个主题 -- 变量声明空间。</p><h4 id="变量声明空间"><a class="header-anchor" href="#变量声明空间" aria-hidden="true">#</a> 变量声明空间</h4><p>变量声明空间包含可用作变量的内容，在上文中 <code>Class Foo</code> 提供了一个类型 <code>Foo</code> 到类型声明空间，此外它同样提供了一个变量 Foo 到变量声明空间，如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> someVar <span class="token operator">=</span> Foo<span class="token punctuation">;</span>\n<span class="token keyword">const</span> someOtherVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n</code></pre></div><p>这很棒，尤其是当你想把一个类来当做变量传递时。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>我们并不能把一些如 <code>interface</code> 定义的内容当作变量使用。</p></div><p>与此相似，一些用 <code>var</code> 声明的变量，也只能在变量声明空间使用，不能用作类型注解。</p><div class="language-ts"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar<span class="token operator">:</span> foo<span class="token punctuation">;</span> <span class="token comment">// ERROR: &quot;cannot find name &#39;foo&#39;&quot;</span>\n</code></pre></div><p>提示 <code>ERROR: &quot;cannot find name &#39;foo&#39;&quot;</code> 原因是，名称 foo 没有定义在类型声明空间里。</p><h3 id="模块"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><h4 id="全局模块"><a class="header-anchor" href="#全局模块" aria-hidden="true">#</a> 全局模块</h4><p>在默认情况下，当你开始在一个新的 TypeScript 文件中写下代码时，它处于全局命名空间中。如在 foo.ts 里的以下代码。</p><div class="language-ts"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n</code></pre></div><p>如果你在相同的项目里创建了一个新的文件 bar.ts，TypeScript 类型系统将会允许你使用变量 foo，就好像它在全局可用一样：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// allowed</span>\n</code></pre></div><p>毋庸置疑，使用全局变量空间是危险的，因为它会与文件内的代码命名冲突。我们推荐使用下文中将要提到的文件模块。</p><h4 id="文件模块"><a class="header-anchor" href="#文件模块" aria-hidden="true">#</a> 文件模块</h4><p>文件模块也被称为外部模块。如果在你的 TypeScript 文件的根级别位置含有 <code>import</code> 或者 <code>export</code>，那么它会在这个文件中创建一个本地的作用域。因此，我们需要把上文 <code>foo.ts</code> 改成如下方式（注意 <code>export</code> 用法）：</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n</code></pre></div><p>在全局命名空间里，我们不再有 <code>foo</code>，这可以通过创建一个新文件 <code>bar.ts</code> 来证明：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// ERROR: &quot;cannot find name &#39;foo&#39;&quot;</span>\n</code></pre></div><p>如果你想在 <code>bar.ts</code> 里使用来自 <code>foo.ts</code> 的内容，你必须显式地导入它，更新后的 <code>bar.ts</code> 如下所示。</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// allow</span>\n</code></pre></div><p>在 <code>bar.ts</code> 文件里使用 <code>import</code> 时，它不仅允许你使用从其他文件导入的内容，还会将此文件 <code>bar.ts</code> 标记为一个模块，文件内定义的声明也不会“污染”全局命名空间</p><h4 id="文件模块详情"><a class="header-anchor" href="#文件模块详情" aria-hidden="true">#</a> 文件模块详情</h4><p>文件模块拥有强大的功能和较强的可用性。下面我们来讨论它的功能及一些用法。</p><h5 id="澄清-commonjs-amd-esmodules-others"><a class="header-anchor" href="#澄清-commonjs-amd-esmodules-others" aria-hidden="true">#</a> 澄清: commonjs, amd, esmodules, others</h5><p>首先，我们需要澄清这些模块系统的不一致性。我将会提供给你我当前的建议，以及消除一些你的顾虑。</p><p>你可以根据不同的 <code>module</code> 选项来把 TypeScript 编译成不同的 JavaScript 模块类型，这有一些你可以忽略的东西：</p><ul><li>AMD：不要使用它，它仅能在浏览器工作；</li><li>SystemJS：这是一个好的实验，已经被 ES 模块替代；</li><li>ES 模块：它并没有准备好。</li></ul><p>使用 <code>module: commonjs</code> 选项来替代这些模式，将会是一个好的主意。</p><p>怎么书写 TypeScript 模块呢？，这也是一件让人困惑的事。在今天我们应该这么做：</p><ul><li>放弃使用 <code>import/require</code> 语法即 <code>import foo = require(&#39;foo&#39;)</code> 写法</li><li>推荐使用 ES 模块语法</li></ul><p>这很酷，接下来，让我们看看 ES 模块语法。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 <code>module: commonjs</code> 选项以及使用 ES 模块语法导入、导出、编写模块。</p></div><h5 id="es-模块语法"><a class="header-anchor" href="#es-模块语法" aria-hidden="true">#</a> ES 模块语法</h5><ul><li>使用 <code>export</code> 关键字导出一个变量或类型</li></ul><div class="language-ts"><pre><code><span class="token comment">// foo.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">someType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li><code>export</code> 的写法除了上面这种，还有另外一种：</li></ul><div class="language-ts"><pre><code><span class="token comment">// foo.ts</span>\n<span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">someType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> someVar<span class="token punctuation">,</span> someType <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>你也可以用重命名变量的方式导出：</li></ul><div class="language-ts"><pre><code><span class="token comment">// foo.ts</span>\n<span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>使用 <code>import</code> 关键字导入一个变量或者是一个类型：</li></ul><div class="language-ts"><pre><code><span class="token comment">// bar.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> someVar<span class="token punctuation">,</span> someType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>通过重命名的方式导入变量或者类型：</li></ul><div class="language-ts"><pre><code><span class="token comment">// bar.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面：</li></ul><div class="language-ts"><pre><code><span class="token comment">// bar.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 你可以使用 `foo.someVar` 和 `foo.someType` 以及其他任何从 `foo` 导出的变量或者类型</span>\n</code></pre></div><ul><li>只导入模块：</li></ul><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;core-js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 一个普通的 polyfill 库</span>\n</code></pre></div><ul><li>从其他模块导入后整体导出：</li></ul><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>从其他模块导入后，部分导出：</li></ul><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>通过重命名，部分导出从另一个模块导入的项目：</li></ul><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h6 id="默认导入／导出"><a class="header-anchor" href="#默认导入／导出" aria-hidden="true">#</a> 默认导入／导出</h6><p>我并不喜欢用默认导出，虽然有默认导出的语法：</p><ul><li>使用 export default <ul><li>在一个变量之前（不需要使用 let/const/var）；</li><li>在一个函数之前；</li><li>在一个类之前。</li></ul></li></ul><div class="language-ts"><pre><code><span class="token comment">// some var</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// some function</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// some class</span>\n<span class="token class-name"><span class="token keyword">export</span></span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">someClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><ul><li>导入使用 <code>import someName from &#39;someModule&#39;</code> 语法（你可以根据需要为导入命名）：</li></ul><div class="language-ts"><pre><code><span class="token keyword">import</span> someLocalNameForThisFile <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h5 id="模块路径"><a class="header-anchor" href="#模块路径" aria-hidden="true">#</a> 模块路径</h5><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你需要使用 <code>moduleResolution: node</code> 选项，你应该将此选项放入你的配置文件中。如果你使用了 <code>module: commonjs</code> 选项， <code>moduleResolution: node</code> 将会默认开启。</p></div><p>这里存在两种截然不同的模块：</p><ul><li>相对模块路径（路径以 <code>.</code> 开头，例如：<code>./someFile</code> 或者 <code>../../someFolder/someFile</code> 等）；</li><li>其他动态查找模块（如：<code>core-js</code>，<code>typestyle</code>，<code>react</code> 或者甚至是 <code>react/core</code> 等）。</li></ul><p>它们的主要区别在于系统如何解析模块。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我将会使用一个概念性术语，<code>place</code> -- 将在提及查找模式后解释它。</p></div><h6 id="相对模块路径"><a class="header-anchor" href="#相对模块路径" aria-hidden="true">#</a> 相对模块路径</h6><p>这很简单，仅仅是按照相对路径来就可以了：</p><ul><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;./foo&#39;</code>，那么 <code>foo</code> 文件必须与 <code>bar.ts</code> 文件存在于相同的文件夹下</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../foo&#39;</code>，那么 <code>foo</code> 文件所存在的地方必须是 <code>bar.ts</code> 的上一级目录；</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../someFolder/foo&#39;</code>，那么 <code>foo</code> 文件所在的文件夹 someFolder 必须与 <code>bar.ts</code> 文件所在文件夹在相同的目录下。</li></ul><p>你还可以思考一下其他相对路径导入的场景。😃</p><h6 id="动态查找"><a class="header-anchor" href="#动态查找" aria-hidden="true">#</a> 动态查找</h6><p>当导入路径不是相对路径时，模块解析将会模仿 <a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noopener noreferrer">Node 模块解析策略</a>，下面我将给出一个简单例子：</p><ul><li>当你使用 <code>import * as foo from &#39;foo&#39;</code>，将会按如下顺序查找模块： <ul><li><code>./node_modules/foo</code></li><li><code>../node_modules/foo</code></li><li><code>../../node_modules/foo</code></li><li>直到系统的根目录</li></ul></li><li>当你使用 <code>import * as foo from &#39;something/foo&#39;</code>，将会按照如下顺序查找内容 <ul><li><code>./node_modules/something/foo</code></li><li><code>../node_modules/something/foo</code></li><li><code>../../node_modules/something/foo</code></li><li>直到系统的根目录</li></ul></li></ul><h5 id="什么是-place"><a class="header-anchor" href="#什么是-place" aria-hidden="true">#</a> 什么是 <code>place</code></h5><p>当我提及被检查的 <code>place</code> 时，我想表达的是在这个 <code>place</code> 上，TypeScript 将会检查以下内容（例如一个 <code>foo</code> 的 <code>place</code>）：</p><ul><li>如果这个 <code>place</code> 表示一个文件，如：<code>foo.ts</code>，欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个文件 <code>foo/index.ts</code>，欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个 <code>foo/package.json</code> 文件，在该文件中指定 <code>types</code> 的文件存在，那么就欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个 <code>package.json</code> 文件，在该文件中指定 <code>main</code> 的文件存在，那么就欢呼！</li></ul><p>从文件类型上来说，我实际上是指 <code>.ts</code>， <code>.d.ts</code> 或者 <code>.js</code></p><p>就是这样，现在你已经是一个模块查找专家（这并不是一个小小的成功）。</p><h5 id="重写类型的动态查找"><a class="header-anchor" href="#重写类型的动态查找" aria-hidden="true">#</a> 重写类型的动态查找</h5><p>在你的项目里，你可以通过 <code>declare module &#39;somePath&#39;</code> 声明一个全局模块的方式，来解决查找模块路径的问题。</p><div class="language-ts"><pre><code><span class="token comment">// global.d.ts</span>\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// some variable declarations</span>\n  <span class="token keyword">export</span> <span class="token keyword">var</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>接着 ：</p><div class="language-ts"><pre><code><span class="token comment">// anyOtherTsFileInYourProject.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// TypeScript 将假设（在没有做其他查找的情况下）</span>\n<span class="token comment">// foo 是 { bar: number }</span>\n</code></pre></div><h5 id="import-require-仅仅是导入类型"><a class="header-anchor" href="#import-require-仅仅是导入类型" aria-hidden="true">#</a> import/require 仅仅是导入类型</h5><p>以下导入语法：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>它实际上只做了两件事：</p><ul><li>导入 foo 模块的所有类型信息；</li><li>确定 foo 模块运行时的依赖关系。</li></ul><p>你可以选择仅加载类型信息，而没有运行时的依赖关系。在继续之前，你可能需要重新阅读本书 <a href="#%E5%A3%B0%E6%98%8E%E7%A9%BA%E9%97%B4">声明空间部分</a>。</p><p>如果你没有把导入的名称当做变量声明空间来用，在编译成 JavaScript 时，导入的模块将会被完全移除。这最好用例子来解释，下面我们将会给出一些示例。</p><h6 id="例子-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子 1</h6><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>将会编译成 JavaScript：</p><div class="language-js"><pre><code></code></pre></div><p>这是正确的，一个没有被使用的空文件。</p><h6 id="例子-2"><a class="header-anchor" href="#例子-2" aria-hidden="true">#</a> 例子 2</h6><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> bar<span class="token operator">:</span> foo<span class="token punctuation">;</span>\n</code></pre></div><p>将会被编译成：</p><div class="language-js"><pre><code><span class="token keyword">let</span> bar<span class="token punctuation">;</span>\n</code></pre></div><p>这是因为 foo （或者其他任何属性如：<code>foo.bas</code>）没有被当做一个变量使用。</p><h6 id="例子-3"><a class="header-anchor" href="#例子-3" aria-hidden="true">#</a> 例子 3</h6><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n</code></pre></div><p>将会被编译成（假设是 commonjs）：</p><div class="language-js"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n</code></pre></div><p>这是因为 <code>foo</code> 被当做变量使用了。</p><h6 id="使用例子：懒加载"><a class="header-anchor" href="#使用例子：懒加载" aria-hidden="true">#</a> 使用例子：懒加载</h6><p>类型推断需要提前完成，这意味着，如果你想在 <code>bar</code> 文件里，使用从其他文件 <code>foo</code> 导出的类型，你将不得不这么做：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar<span class="token operator">:</span> foo<span class="token punctuation">.</span>SomeType<span class="token punctuation">;</span>\n</code></pre></div><p>然而，在某些情景下，你只想在需要时加载模块 <code>foo</code>，此时你需要仅在类型注解中使用导入的模块名称，而<strong>不</strong>是在变量中使用。在编译成 JavaScript 时，这些将会被移除。接着，你可以手动导入你需要的模块。</p><p>作为一个例子，考虑以下基于 <code>commonjs</code> 的代码，我们仅在一个函数内导入 <code>foo</code> 模块：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这是懒加载 foo，原始的加载仅仅用来做类型注解</span>\n  <span class="token keyword">const</span> _foo<span class="token operator">:</span> <span class="token keyword">typeof</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 现在，你可以使用 `_foo` 替代 `foo` 来作为一个变量使用</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>一个同样简单的 <code>amd</code> 模块（使用 requirejs）：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这是懒加载 foo，原始的加载仅仅用来做类型注解</span>\n  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_foo<span class="token operator">:</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 现在，你可以使用 `_foo` 替代 `foo` 来作为一个变量使用</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这些通常在以下情景使用：</p><ul><li>在 web app 里， 当你在特定路由上加载 JavaScript 时；</li><li>在 node 应用里，当你只想加载特定模块，用来加快启动速度时。</li></ul><h6 id="使用例子：打破循环依赖"><a class="header-anchor" href="#使用例子：打破循环依赖" aria-hidden="true">#</a> 使用例子：打破循环依赖</h6><p>类似于懒加载的使用用例，某些模块加载器（commonjs/node 和 amd/requirejs）不能很好的处理循环依赖。在这种情况下，一方面我们使用延迟加载代码，并在另一方面预先加载模块是很实用的。</p><h6 id="使用例子：确保导入"><a class="header-anchor" href="#使用例子：确保导入" aria-hidden="true">#</a> 使用例子：确保导入</h6><p>当你加载一个模块，只是想引入其附加的作用（如：模块可能会注册一些像 <a href="https://codemirror.net/doc/manual.html#addons" target="_blank" rel="noopener noreferrer">CodeMirror addons</a>）时，然而，如果你仅仅是 <code>import/require</code> （导入）一些并没有与你的模块或者模块加载器有任何依赖的 JavaScript 代码，（如：webpack），经过 TypeScript 编译后，这些将会被完全忽视。在这种情况下，你可以使用一个 <code>ensureImport</code> 变量，来确保编译的 JavaScript 依赖与模块。如：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bar <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bas <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ensureImport<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> foo <span class="token operator">||</span> bar <span class="token operator">||</span> bas<span class="token punctuation">;</span>\n</code></pre></div><h4 id="global-d-ts"><a class="header-anchor" href="#global-d-ts" aria-hidden="true">#</a> global.d.ts</h4><p>在上文中，当我们讨论文件模块时，比较了全局变量与文件模块，并且我们推荐使用基于文件的模块，而不是选择污染全局命名空间。</p><p>然而，如果你的团队里有 TypeScript 初学者，你可以提供他们一个 <code>global.d.ts</code> 文件，用来将一些接口或者类型放入全局命名空间里，这些定义的接口和类型能在你的所有 TypeScript 代码里使用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于任何需要编译成 <code>JavaScript</code> 的代码，我们强烈建议你放入文件模块里。</p></div><ul><li><code>global.d.ts</code> 是一种扩充 <code>lib.d.ts</code> 很好的方式，如果你需要的话。</li><li>当你从 <code>JS</code> 迁移到 <code>TS</code> 时，定义 <code>declare module &quot;some-library-you-dont-care-to-get-defs-for&quot;</code> 能让你快速开始。</li></ul><h3 id="命名空间"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><p>在 JavaScript 使用命名空间时， 这有一个常用的、方便的语法：</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  something<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>something <span class="token operator">||</span> <span class="token punctuation">(</span>something <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><code>something || (something = {})</code> 允许匿名函数 <code>function (something) {}</code> 向现有对象添加内容，或者创建一个新对象，然后向该对象添加内容。这意味着你可以拥有两个由某些边界拆成的块。</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  something<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>something <span class="token operator">||</span> <span class="token punctuation">(</span>something <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { foo: 123 }</span>\n\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  something<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>something <span class="token operator">||</span> <span class="token punctuation">(</span>something <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { foo: 123, bar: 456 }</span>\n</code></pre></div><p>在确保创建的变量不会泄漏至全局命名空间时，这种方式在 JavaScript 中很常见。当基于文件模块使用时，你无须担心这点，但是该模式仍然适用于一组函数的逻辑分组。因此 TypeScript 提供了 <code>namespace</code> 关键字来描述这种分组，如下所示。</p><div class="language-ts"><pre><code><span class="token keyword">namespace</span> Utility <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// usage</span>\nUtility<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Call me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nUtility<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;maybe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><code>namespace</code> 关键字编译后的 JavaScript 代码，与我们早些时候看到的 JavaScript 代码一样。</p><div class="language-js"><pre><code><span class="token keyword">var</span> Utility<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Utility</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 添加属性至 Utility</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Utility <span class="token operator">||</span> Utility <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>值得注意的一点是，命名空间是支持嵌套的。因此，你可以做一些类似于在 <code>Utility</code> 命名空间下嵌套一个命名空间 <code>Messaging</code> 的事情。</p><p>对于大多数项目，我们建议使用外部模块和命名空间，来快速演示和移植旧的 JavaScript 代码。</p><h3 id="动态导入表达式"><a class="header-anchor" href="#动态导入表达式" aria-hidden="true">#</a> 动态导入表达式</h3><p>动态导入表达式是 ECMAScript 的一个新功能，它允许你在程序的任意位置异步加载一个模块，TC39 JavaScript 委员会有一个提案，目前处于第四阶段，它被称为 <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener noreferrer">import() proposal for JavaScript</a>。</p><p>此外，<strong>webpack</strong> bundler 有一个 <code>Code Splitting</code> 功能，它能允许你将代码拆分为许多块，这些块在将来可被异步下载。因此，你可以在程序中首先提供一个最小的程序启动包，并在将来异步加载其他模块。</p><p>这很自然就会让人想到（如果我们工作在 webpack dev 的工作流程中）<a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#dynamic-import-expressions" target="_blank" rel="noopener noreferrer">TypeScript 2.4 dynamic import expressions</a> 将会把你最终生成的 JavaScript 代码自动分割成很多块。但是这似乎并不容易实现，因为它依赖于我们正在使用的 <code>tsconfig.json</code> 配置文件。</p><p>webpack 实现代码分割的方式有两种：使用 <code>import()</code> （首选，ECMAScript 的提案）和 <code>require.ensure()</code> （最后考虑，webpack 具体实现）。因此，我们期望 TypeScript 的输出是保留 <code>import()</code> 语句，而不是将其转化为其他任何代码。</p><p>让我们来看一个例子，在这个例子中，我们演示了如何配置 webpack 和 TypeScript 2.4 +。</p><p>在下面的代码中，我希望懒加载 <code>moment</code> 库，同时我也希望使用代码分割的功能，这意味 <code>moment</code> 会被分割到一个单独的 JavaScript 文件，当它被使用时，会被异步加载。</p><div class="language-ts"><pre><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;momentjs&quot; */</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>moment <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 懒加载的模块拥有所有的类型，并且能够按期工作</span>\n    <span class="token comment">// 类型检查会工作，代码引用也会工作  :100:</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;TypeScript &gt;= 2.4.0 Dynamic Import Expression:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to load moment&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这是 <code>tsconfig.json</code> 的配置文件：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;scripthost&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;es2015.promise&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;./node_modules/@types&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;react-dom&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><ul><li>使用 <code>&quot;module&quot;: &quot;esnext&quot;</code> 选项：TypeScript 保留 <code>import()</code> 语句，该语句用于 Webpack Code Splitting。</li><li>进一步了解有关信息，推荐阅读这篇文章：<a href="https://blog.josequinto.com/2017/06/29/dynamic-import-expressions-and-webpack-code-splitting-integration-with-typescript-2-4/" target="_blank" rel="noopener noreferrer">Dynamic Import Expressions and webpack 2 Code Splitting integration with TypeScript 2.4</a>.</li></ul></div><h2 id="typescript-类型系统"><a class="header-anchor" href="#typescript-类型系统" aria-hidden="true">#</a> TypeScript 类型系统</h2><h3 id="概览"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h3><h4 id="typescript-类型系统-1"><a class="header-anchor" href="#typescript-类型系统-1" aria-hidden="true">#</a> TypeScript 类型系统</h4><p>TypeScript 类型系统的主要功能。以下是一些关键点：</p><ul><li>TypeScript 的类型系统被设计为可选的，因此，你的 JavaScript 就是 TypeScript;</li><li>TypeScript 不会阻止 JavaScript 的运行，即使存在类型错误也不例外，这能让你的 JavaScript 逐步迁移至 TypeScript。</li></ul><p>现在让我们开始学习 TypeScript 类型系统的语法吧，在这一章节中，你将能给你的代码加上类型注解，并且能看到它的益处。这将为我们进一步了解类型系统做铺垫。</p><h4 id="基本注解"><a class="header-anchor" href="#基本注解" aria-hidden="true">#</a> 基本注解</h4><p>如前文所提及，类型注解使用 <code>:TypeAnnotation</code> 语法。在类型声明空间中可用的任何内容都可以用作类型注解。</p><p>在下面这个例子中，使用了变量、函数参数以及函数返回值的类型注解：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="原始类型"><a class="header-anchor" href="#原始类型" aria-hidden="true">#</a> 原始类型</h4><p>JavaScript 原始类型也同样适应于 TypeScript 的类型系统，因此 <code>string</code>、<code>number</code>、<code>boolean</code> 也可以被用作类型注解：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n\nnum <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token number">123.456</span><span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n\nstr <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\nstr <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n\nbool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nbool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\nbool <span class="token operator">=</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre></div><h4 id="数组"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><p>TypeScript 为数组提供了专用的类型语法，因此你可以很轻易的注解数组。它使用后缀 <code>[]</code>， 接着你可以根据需要补充任何有效的类型注解（如：<code>:boolean[]</code>）。它能让你安全的使用任何有关数组的操作，而且它也能防止一些类似于赋值错误类型给成员的行为。如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> boolArray<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nboolArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\nboolArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nboolArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nboolArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\nboolArray <span class="token operator">=</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\nboolArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre></div><h4 id="接口"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><p>接口是 TypeScript 的一个核心知识，它能合并众多类型声明至一个类型声明：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>\n  first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  second<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> name<span class="token operator">:</span> Name<span class="token punctuation">;</span>\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  second<span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error: &#39;Second is missing&#39;</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error: &#39;Second is the wrong type&#39;</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  second<span class="token operator">:</span> <span class="token number">1337</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>在这里，我们把类型注解：<code>first: string</code> + <code>second: string</code> 合并到了一个新的类型注解 <code>Name</code> 里，这样能强制对每个成员进行类型检查。接口在 TypeScript 拥有强大的力量，稍后，我们将会用一个内容专门阐述如何更好的使用它。</p><h4 id="内联类型注解"><a class="header-anchor" href="#内联类型注解" aria-hidden="true">#</a> 内联类型注解</h4><p>与创建一个接口不同，你可以使用内联注解语法注解任何内容：<code>:{ /*Structure*/ }</code>：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token punctuation">{</span>\n  first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  second<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  second<span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error: &#39;Second is missing&#39;</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nname <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error: &#39;Second is the wrong type&#39;</span>\n  first<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>\n  second<span class="token operator">:</span> <span class="token number">1337</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>内联类型能为你快速的提供一个类型注解。它可以帮助你省去为类型起名的麻烦（你可能会使用一个很糟糕的名称）。然而，如果你发现需要多次使用相同的内联注解时，那么考虑把它重构为一个接口（或者是 <code>type alias</code>，它会在接下来的部分提到）是一个不错的主意。</p><h4 id="特殊类型"><a class="header-anchor" href="#特殊类型" aria-hidden="true">#</a> 特殊类型</h4><p>除了被提到的一些原始类型，在 TypeScript 中，还存在一些特殊的类型，它们是 <code>any</code>、 <code>null</code>、 <code>undefined</code> 以及 <code>void</code>。</p><h5 id="any"><a class="header-anchor" href="#any" aria-hidden="true">#</a> any</h5><p><code>any</code> 类型在 TypeScript 类型系统中占有特殊的地位。它提供给你一个类型系统的「后门」,TypeScript 将会把类型检查关闭。在类型系统里 <code>any</code> 能够兼容所有的类型（包括它自己）。因此，所有类型都能被赋值给它，它也能被赋值给其他任何类型。以下有一个证明例子：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> power<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 赋值任意类型</span>\npower <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\npower <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 它也兼容任何类型</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\npower <span class="token operator">=</span> num<span class="token punctuation">;</span>\nnum <span class="token operator">=</span> power<span class="token punctuation">;</span>\n</code></pre></div><p>当你把 JavaScript 迁移至 TypeScript 时，你将会经常性使用 <code>any</code>。但你必须减少对它的依赖，因为你需要确保类型安全。当使用 <code>any</code> 时，你基本上是在告诉 TypeScript 编译器不要进行任何的类型检查。</p><h5 id="null-和-undefined"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> null 和 undefined</h5><p>在类型系统中，JavaScript 中的 null 和 undefined 字面量和其他被标注了 <code>any</code> 类型的变量一样，都能被赋值给任意类型的变量，如下例子所示：</p><div class="language-ts"><pre><code><span class="token comment">// strictNullChecks: false</span>\n\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 这些类型能被赋予</span>\nnum <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nstr <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</code></pre></div><h5 id="void"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h5><p>使用 <code>:void</code> 来表示一个函数没有一个返回值</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="范型"><a class="header-anchor" href="#范型" aria-hidden="true">#</a> 范型</h4><p>在计算机科学中，许多算法和数据结构并不会依赖于对象的实际类型。但是，你仍然会想在每个变量里强制提供约束。例如：在一个函数中，它接受一个列表，并且返回这个列表的反向排序，这里的约束是指传入至函数的参数与函数的返回值：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">reverse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> toreturn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    toreturn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> toreturn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sample <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reversed <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, 2, 1</span>\n\n<span class="token comment">// Safety</span>\nreversed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\nreversed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n\nreversed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nreversed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre></div><p>在上个例子中，函数 <code>reverse</code> 接受一个类型为 <code>T</code>（注意在 <code>reverse&lt;T&gt;</code> 中的类型参数） 的数组（<code>items: T[]</code>），返回值为类型 <code>T</code> 的一个数组（注意：<code>T[]</code>），函数 <code>reverse</code> 的返回值类型与它接受的参数的类型一样。当你传入 <code>const sample = [1, 2, 3]</code> 时，TypeScript 能推断出 <code>reverse</code> 为 <code>number[]</code> 类型，从而能给你类型安全。与此相似，当你传入一个类型为 <code>string[]</code> 类型的数组时，TypeScript 能推断 <code>reverse</code> 为 <code>string[]</code> 类型，如下例子所示：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> strArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reversedStrs <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreversedStrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre></div><p>事实上，JavaScript 数组已经拥有了 reverse 的方法，TypeScript 也确实使用了泛型来定义其结构：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>意味着，当你在数组上调用 <code>.reverse</code> 方法时，将会获得类型安全：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> reversedNums <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreversedNums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre></div><p>当稍后在 <a href="#%E7%8E%AF%E5%A2%83%E5%A3%B0%E6%98%8E">环境声明</a> 章节中提及 <code>lib.d.ts</code> 时，我们会讨论更多关于 <code>Array&lt;T&gt;</code> 的信息。</p><h4 id="联合类型"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h4><p>在 JavaScript 中，你可能希望属性为多种类型之一，如字符串或者数组。这正是 TypeScript 中联合类型能派上用场的地方（它使用 <code>|</code> 作为标记，如 <code>string | number</code>）。关于联合类型，一个常见的用例是一个可以接受字符串数组或单个字符串的函数：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">formatCommandline</span><span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> command <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    line <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    line <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Do stuff with line: string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="交叉类型"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h4><p>在 JavaScript 中， <code>extend</code> 是一种非常常见的模式，在这种模式中，你可以从两个对象中创建一个新对象，新对象拥有着两个对象所有的功能。交叉类型可以让你安全的使用此种模式：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">extend</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> second<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 现在 x 拥有了 a 属性与 b 属性</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> x<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> x<span class="token punctuation">.</span>b<span class="token punctuation">;</span>\n</code></pre></div><h4 id="元组类型"><a class="header-anchor" href="#元组类型" aria-hidden="true">#</a> 元组类型</h4><p>JavaScript 并不支持元组，开发者们通常只能使用数组来表示元组。而 TypeScript 支持它，开发者可以使用 <code>:[typeofmember1, typeofmember2]</code> 的形式，为元组添加类型注解，元组可以包含任意数量的成员，示例：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> nameNumber<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Ok</span>\nnameNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jenny&#39;</span><span class="token punctuation">,</span> <span class="token number">221345</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Error</span>\nnameNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jenny&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;221345&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><p>将其与 TypeScript 中的解构一起使用：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> nameNumber<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnameNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jenny&#39;</span><span class="token punctuation">,</span> <span class="token number">322134</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> num<span class="token punctuation">]</span> <span class="token operator">=</span> nameNumber<span class="token punctuation">;</span>\n</code></pre></div><h4 id="类型别名"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h4><p>TypeScript 提供了为类型注解设置别名的便捷语法，你可以使用 <code>type SomeName = someValidTypeAnnotation</code> 来创建别名：</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">StrOrNum</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">let</span> sample<span class="token operator">:</span> StrOrNum<span class="token punctuation">;</span>\nsample <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\nsample <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 会检查类型</span>\nsample <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre></div><p>与接口不同，你可以为任意的类型注解提供类型别名（在联合类型和交叉类型中比较实用），下面是一些能让你熟悉类型别名语法的示例。</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Text</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Coordinates</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>如果你需要使用类型注解的层次结构，请使用接口。它能使用 <code>implements</code> 和 <code>extends</code></li><li>为一个简单的对象类型（如上面例子中的 Coordinates）使用类型别名，只需要给它一个语义化的名字即可。另外，当你想给联合类型和交叉类型提供一个语义化的名称时，一个类型别名将会是一个好的选择。</li></ul></div><h4 id="最后"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h4><p>现在你已经能够为你的大部分 JavaScript 代码添加类型注解，接着，让我们深入了解 TypeScript 的类型系统吧。</p><h3 id="从javascript-迁移"><a class="header-anchor" href="#从javascript-迁移" aria-hidden="true">#</a> 从JavaScript 迁移</h3><p>首先，假设如下：</p><ul><li>你了解 JavaScript；</li><li>你了解在项目中常用的方式和构建工具（如：webpack）。</li></ul><p>有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤：</p><ul><li>添加一个 <code>tsconfig.json</code> 文件；</li><li>把文件扩展名从 <code>.js</code> 改成 <code>.ts</code>，开始使用 <code>any</code> 来减少错误；</li><li>开始在 TypeScript 中写代码，尽可能的减少 <code>any</code> 的使用；</li><li>回到旧代码，开始添加类型注解，并修复已识别的错误；</li><li>为第三方 JavaScript 代码定义环境声明。</li></ul><p>让我们进一步讨论其中的几个关键点。</p><p>记住：所有的 JavaScript 代码都是有效的 TypeScript 代码。这意味着，如果让 TypeScript 编译器编译 TypeScript 里的 JavaScript 代码，编译后的结果将会与原始的 JavaScript 代码一模一样。也就是说，把文件扩展名从 <code>.js</code> 改成 <code>.ts</code> 将不会造成任何负面的影响。</p><h4 id="减少错误"><a class="header-anchor" href="#减少错误" aria-hidden="true">#</a> 减少错误</h4><p>代码被迁移至 TypeScript 后，TypeScript 将会立即对你的代码进行类型检查，你的 JavaScript 代码可能并不像想象中那样整齐了，因此你可能会收到一些报错信息。这时，可以使用 any 来解决大部分的报错问题：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>\n\nbar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// Error: 不能把 number 类型赋值给 string 类型</span>\n</code></pre></div><p>虽然这些错误是有效的，并且在大多数情况下，根据这些错误所推断出的信息比代码库的不同部分的原始作者想象的更好，但是你的重点是在逐步更新旧代码库的同时，用 TypeScript 编写新代码。在这里，你可以使用类型断言来减少此错误：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>\n\nbar <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre></div><p>从另一方面来说，你可能想用 any 用作类型注解：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 不能把一个 number 类型赋值给 string 类型</span>\n</code></pre></div><p>减少这种错误：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 添加 &#39;any&#39;</span>\n  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>使用此种方式来减少错误是危险的，但是它允许你将注意力转移到你的新 TypeScript 代码错误上。当你进行下一步前，最好要留下 <code>// TODO</code> 的注释。</p></div><h4 id="第三方代码"><a class="header-anchor" href="#第三方代码" aria-hidden="true">#</a> 第三方代码</h4><p>你可以将你的 JavaScript 代码改成 TypeScript 代码，但是你不能让整个世界都使用 TypeScript。这正是 TypeScript 环境声明支持的地方。我建议你以创建一个 <code>vendor.d.ts</code> 文件作为开始（<code>.d.ts</code> 文件扩展名指定这个文件是一个声明文件），然后我向文件里添加东西。或者，你也可以创建一个针对于特定库的声明文件，如为 jquery 创建 <code>jquery.d.ts</code> 文件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>几乎排名前 90% 的 JavaScript 库的声明文件存在于 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer">DefinitelyTyped</a> 仓库里，在创建自己定义的声明文件之前，我们建议你先去仓库中寻找是否有对应的声明文件。尽管如此，创建一个声明文件这种快速但不好的方式是减小使用 TypeScript 初始阻力的重要步骤</p></div><p>根据 <code>jquery</code> 的使用，你可以非常简单快速的为它创建一个定义：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n</code></pre></div><p>有时，你可能想在某些内容（如 <code>jQuery</code>）上添加显式的注解，并且你会在类型声明空间中使用它。你可以通过 type 关键字快速的实现它：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">JQuery</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> JQuery<span class="token punctuation">;</span>\n</code></pre></div><p>这提供给你一个更清晰的使用模式。</p><p>一个高质量的 jquery.d.ts 已经在 DefinitelyTyped 中存在。现在你已经知道如何在使用第三方 JavaScript 模块时，快速克服从 JavaScript 至 TypeScript 的阻力了。在接下去的章节，我们将会讨论环境声明。</p><h4 id="第三方的-npm-模块"><a class="header-anchor" href="#第三方的-npm-模块" aria-hidden="true">#</a> 第三方的 NPM 模块</h4><p>与全局变量声明相似，你可以快速的定义一个全局模块，如：对于 jquery，如果你想把它作为一个模块来使用（[NPM(<a href="https://www.npmjs.com/package/jquery" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/jquery</a>)]），可以自己通过以下方式实现：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>然后你就可以在必要时导入它：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>再一次说明，一个高质量的 <code>jquery.d.ts</code> 已经在 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer">DefinitelyTyped</a> 中存在，但是可能在你的包里没有，那么，你现在有一个简单快速的方式来继续迁移。</p></div><h4 id="额外的非-javascript-资源"><a class="header-anchor" href="#额外的非-javascript-资源" aria-hidden="true">#</a> 额外的非 JavaScript 资源</h4><p>在 TypeScript 中，甚至可以允许你导入任何文件，例如 <code>.css</code> 文件（如果你使用的是 webpack 样式加载器或 css 模块），你只要添加如下代码（放在 <code>global.d.ts</code>）：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>现在你可以使用 <code>import * as foo from &#39;./some/file.css&#39;</code>。</p><p>与此相似，如果你想使用 html 模版（例如：angular），你可以：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.html&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="types"><a class="header-anchor" href="#types" aria-hidden="true">#</a> @types</h3><p>毫无疑问，<a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener noreferrer">DefinitelyTyped</a> 是 TypeScript 最大的优势之一，社区已经记录了 90% 的顶级 JavaScript 库。</p><p>这意味着，你可以非常高效地使用这些库，而无须在单独的窗口打开相应文档以确保输入的正确性。</p><h4 id="使用-types"><a class="header-anchor" href="#使用-types" aria-hidden="true">#</a> 使用 <code>@types</code></h4><p>你可以通过 <code>npm</code> 来安装使用 <code>@types</code>，例如为 <code>jquery</code> 添加声明文件：</p><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @types/jquery --save-dev\n</code></pre></div><p><code>@types</code> 支持全局和模块类型定义。</p><h5 id="全局-types"><a class="header-anchor" href="#全局-types" aria-hidden="true">#</a> 全局 <code>@types</code></h5><p>默认情况下，TypeScript 会自动包含支持全局使用的任何声明定义。例如，对于 jquery，你应该能够在项目中开始全局使用 <code>$</code>。</p><h5 id="模块-types"><a class="header-anchor" href="#模块-types" aria-hidden="true">#</a> 模块 <code>@types</code></h5><p>安装完之后，不需要特别的配置，你就可以像使用模块一样使用它：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 现在你可以此模块中任意使用$了 :)</span>\n</code></pre></div><h4 id="控制全局"><a class="header-anchor" href="#控制全局" aria-hidden="true">#</a> 控制全局</h4><p>可以看出，对于某些团队而言，拥有允许全局使用的定义是一个问题。因此，你可以通过配置 <code>tsconfig.json</code> 的 <code>compilerOptions.types</code> 选项，引入有意义的类型：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;types&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;jquery&quot;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如上例所示，通过配置 <code>compilerOptions.types: [ &quot;jquery&quot; ]</code> 后，只允许使用 <code>jquery</code> 的 <code>@types</code> 包，即使这个人安装了另一个声明文件，比如 <code>npm install @types/node</code>，它的全局变量（例如 <code>process</code>）也不会泄漏到你的代码中，直到你将它们添加到 <code>tsconfig.json</code> 类型选项。</p><h3 id="环境声明"><a class="header-anchor" href="#环境声明" aria-hidden="true">#</a> 环境声明</h3><blockquote><p>TypeScript 的设计目标之一是让你在 TypeScript 中安全、轻松地使用现有的 JavaScript 库，TypeScript 通过声明文件来做到这一点</p></blockquote><p>环境声明允许你安全地使用现有的 JavaScript 库，并且能让你的 JavaScript、CoffeeScript 或者其他需要编译成 JavaScript 的语言逐步迁移至 TypeScript。</p><p>学习为第三方 JavaScript 库编写环境声明，是一种为 TypeScript 写注解比较好的实践方式</p><h4 id="声明文件"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件</h4><p>你可以通过 declare 关键字来告诉 TypeScript，你正在试图表述一个其他地方已经存在的代码，如：写在 JavaScript、CoffeeScript 或者是像浏览器和 Node.js 运行环境里的代码：</p><div class="language-ts"><pre><code>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Error: &#39;foo&#39; is not defined</span>\n</code></pre></div><p>和：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">var</span> foo<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\nfoo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// allow</span>\n</code></pre></div><p>你可以选择把这些声明放入 <code>.ts</code> 或者 <code>.d.ts</code> 里。在你实际的项目里，我们强烈建议你应该把声明放入独立的 .<code>d.ts</code> 里（可以从一个命名为 <code>global.d.ts</code> 或者 <code>vendor.d.ts</code> 文件开始）。</p><p>如果一个文件有扩展名 <code>.d.ts</code>，这意味着每个根级别的声明都必须以 <code>declare</code> 关键字作为前缀。这有利于让开发者清楚的知道，在这里 TypeScript 将不会把它编译成任何代码，同时开发者需要确保这些在编译时存在。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>环境声明就好像你与编译器之间的一个约定，如果在编译时它们不存在，但是你却使用了它们，程序将会在没有警告的情况下中断。</li><li>环境声明就好像是一个文档。如果源文件更新了，你应该同步更新。所以，当你在运行时有新的行为时，如果没有去更新环境声明，编译器将会报错。</li></ul></div><h4 id="变量"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><p>当你想告诉 TypeScript 编辑器关于 process 变量时，你可以这么做：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">let</span> process<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你并不需要为 <code>process</code> 做这些，因为这已经存在于社区维护的 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/index.d.ts" target="_blank" rel="noopener noreferrer"><code>node.d.ts</code></a></p></div><p>这允许你使用 <code>process</code>，并能成功通过 TypeScript 的编译：</p><div class="language-ts"><pre><code>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们推荐尽可能的使用接口，例如：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Process</span> <span class="token punctuation">{</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">let</span> process<span class="token operator">:</span> Process<span class="token punctuation">;</span>\n</code></pre></div><p>因为这允许其他人扩充这些全局变量，并且会告诉 TypeScript 有关于这些声明的修改。例如：考虑到以下情况，我们添加一个 <code>exitWithLogging</code> 函数至 <code>process</code>：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Process</span> <span class="token punctuation">{</span>\n  <span class="token function">exitWithLogging</span><span class="token punctuation">(</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nprocess<span class="token punctuation">.</span><span class="token function-variable function">exitWithLogging</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;exiting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>接下来，让我们更详细的了解接口。</p><h3 id="接口-1"><a class="header-anchor" href="#接口-1" aria-hidden="true">#</a> 接口</h3><p>接口运行时的影响为 0。在 TypeScript 接口中有很多方式来声明变量的结构。</p><p>下面两个是等效的声明, 示例 A 使用内联注解，示例 B 使用接口形式：</p><div class="language-ts"><pre><code><span class="token comment">// 示例 A</span>\n<span class="token keyword">declare</span> <span class="token keyword">const</span> myPoint<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 示例 B</span>\n<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">declare</span> <span class="token keyword">const</span> myPoint<span class="token operator">:</span> Point<span class="token punctuation">;</span>\n</code></pre></div><p>示例 B 的好处在于，如果有人创建了一个基于 <code>myPoint</code> 的库来添加新成员, 那么他可以轻松将此成员添加到 <code>myPoint</code> 的现有声明中:</p><div class="language-ts"><pre><code><span class="token comment">// Lib a.d.ts</span>\n<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">declare</span> <span class="token keyword">const</span> myPoint<span class="token operator">:</span> Point\n\n<span class="token comment">// Lib b.d.ts</span>\n<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  z<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Your code</span>\nmyPoint<span class="token punctuation">.</span>z <span class="token comment">// Allowed!</span>\n</code></pre></div><p>TypeScript 接口是开放式的，这是 TypeScript 的一个重要原则，它允许你使用接口来模仿 JavaScript 的可扩展性。</p><h4 id="类可以实现接口"><a class="header-anchor" href="#类可以实现接口" aria-hidden="true">#</a> 类可以实现接口</h4><p>如果你希望在类中使用必须要被遵循的接口（类）或别人定义的对象结构，可以使用 <code>implements</code> 关键字来确保其兼容性：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyPoint</span> <span class="token keyword">implements</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// Same as Point</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>基本上，在 <code>implements</code>（实现） 存在的情况下，该外部 <code>Point</code> 接口的任何更改都将导致代码库中的编译错误，因此可以轻松地使其保持同步：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// New member</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyPoint</span> <span class="token keyword">implements</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ERROR : missing member `z`</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>注意，<code>implements</code> 限制了类实例的结构，如下所示:</p><div class="language-ts"><pre><code><span class="token keyword">let</span> foo<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>但像 <code>foo: Point = MyPoint</code> 这样的代码，与其并不是一回事。</p><h4 id="注意"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><h5 id="并非每个接口都是很容易实现的"><a class="header-anchor" href="#并非每个接口都是很容易实现的" aria-hidden="true">#</a> 并非每个接口都是很容易实现的</h5><p>接口旨在声明 JavaScript 中可能存在的任意结构。</p><p>思考以下例子，可以使用 <code>new</code> 调用某些内容：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Crazy</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    hello<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>你可能会有下面这样的代码：</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">CrazyClass</span> <span class="token keyword">implements</span> <span class="token class-name">Crazy</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Because</span>\n<span class="token keyword">const</span> crazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CrazyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// crazy would be { hello:123 }</span>\n\n<span class="token comment">// 运行报错，因为TS类型检查不会对constructor检查，只会检查和实例相关的属性和方法</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">正常运行</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Crazy</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    hello<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">ICrazyClass</span> <span class="token punctuation">{</span>\n  hello<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">CrazyClass</span> <span class="token keyword">implements</span> <span class="token class-name">Crazy</span> <span class="token punctuation">{</span>\n  hello<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token number">123</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">ct1</span><span class="token punctuation">(</span>ct<span class="token operator">:</span> Crazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Because</span>\n<span class="token keyword">const</span> crazy <span class="token operator">=</span> <span class="token function">ct1</span><span class="token punctuation">(</span>CrazyClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></div><p>你可以使用接口声明所有“疯狂的”的 JavaScript 代码，甚至可以安全地在 TypeScript 中使用它们。但这并不意味着你可以使用 TypeScript 类来实现它们。</p><h3 id="枚举"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><p>枚举是组织收集有关联变量的一种方式，许多程序语言（如：c/c#/Java）都有枚举数据类型。下面是定义一个 TypeScript 枚举类型的方式：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> CardSuit <span class="token punctuation">{</span>\n  Clubs<span class="token punctuation">,</span>\n  Diamonds<span class="token punctuation">,</span>\n  Hearts<span class="token punctuation">,</span>\n  Spades\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 简单的使用枚举类型</span>\n<span class="token keyword">let</span> Card <span class="token operator">=</span> CardSuit<span class="token punctuation">.</span>Clubs<span class="token punctuation">;</span>\n\n<span class="token comment">// 类型安全</span>\nCard <span class="token operator">=</span> <span class="token string">&#39;not a member of card suit&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error: string 不能赋值给 `CardSuit` 类型</span>\n</code></pre></div><p>这些枚举类型的值都是数字类型，因此它们被称为数字类型枚举。</p><h4 id="数字类型枚举与数字类型"><a class="header-anchor" href="#数字类型枚举与数字类型" aria-hidden="true">#</a> 数字类型枚举与数字类型</h4><p>数字类型枚举，允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span>\n  Green<span class="token punctuation">,</span>\n  Blue\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> col <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>\ncol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 有效的，这也是 Color.Red</span>\n</code></pre></div><h4 id="数字类型枚举与自负床类型"><a class="header-anchor" href="#数字类型枚举与自负床类型" aria-hidden="true">#</a> 数字类型枚举与自负床类型</h4><p>在我们继续深入学习枚举类型之前，先来看看它编译的 JavaScript 吧，以下是一个简单的 TypeScript 枚举类型：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span>\n  False<span class="token punctuation">,</span>\n  True<span class="token punctuation">,</span>\n  Unknown\n<span class="token punctuation">}</span>\n</code></pre></div><p>其被编译成 JavaScript 后如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">var</span> Tristate<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;False&#39;</span><span class="token punctuation">;</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;True&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">;</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Tristate <span class="token operator">||</span> <span class="token punctuation">(</span>Tristate <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>先让我们聚焦 <code>Tristate[Tristate[&#39;False&#39;] = 0] = &#39;False&#39;</code> 这行代码，其中 <code>Tristate[&#39;False&#39;] = 0</code>的意思是将 <code>Tristate</code> 对象里的 <code>False</code> 成员值设置为 <code>0</code>。注意，JavaScript 赋值运算符返回的值是被赋予的值（在此例子中是 <code>0</code>），因此下一次 JavaScript 运行时执行的代码是 <code>Tristate[0] = &#39;False&#39;</code>。意味着你可以使用 <code>Tristate</code> 变量来把字符串枚举类型改造成一个数字或者是数字类型的枚举类型，如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span>\n  False<span class="token punctuation">,</span>\n  True<span class="token punctuation">,</span>\n  Unknown\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;False&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span>Tristate<span class="token punctuation">.</span>False<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;False&#39; because `Tristate.False == 0`</span>\n</code></pre></div><h4 id="改变与数字枚举关联的数字"><a class="header-anchor" href="#改变与数字枚举关联的数字" aria-hidden="true">#</a> 改变与数字枚举关联的数字</h4><p>默认情况下，第一个枚举值是 <code>0</code>，然后每个后续值依次递增 1：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span> <span class="token comment">// 0</span>\n  Green<span class="token punctuation">,</span> <span class="token comment">// 1</span>\n  Blue <span class="token comment">// 2</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>但是，你可以通过特定的赋值来改变给任何枚举成员关联的数字，如下例子，我们从 3 开始依次递增：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  DarkRed <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>\n  DarkGreen<span class="token punctuation">,</span> <span class="token comment">// 4</span>\n  DarkBlue <span class="token comment">// 5</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我通常用 <code>= 1</code> 初始化，因为在枚举类型值里，它能让你做一个安全可靠的检查。</p></div><h4 id="使用数字类型作为标志"><a class="header-anchor" href="#使用数字类型作为标志" aria-hidden="true">#</a> 使用数字类型作为标志</h4><p>枚举的一个很好用途是使用枚举作为标志。这些标志允许你检查一组条件中的某个条件是否为真。考虑如下代码例子，我们有一组关于 animals 的属性：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span>\n  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  EatsFish    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  Endangered  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在这里，我们使用了左移的位运算符，将数字 <code>1</code> 的二进制向左移动位置得到数字 <code>0001</code>、<code>0010</code>、<code>0100</code> 和 <code>1000</code>（换成十进制结果是：1, 2, 4, 8）。当你在使用这种标记的时候，这些位运算符 <code>|</code> (或)、<code>&amp;</code> （和）、<code>~ </code>（非）将会是你最好的朋友：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span>\n  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  flags<span class="token operator">:</span> AnimalFlags<span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> animalFlags <span class="token operator">=</span> animal<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;animal has claws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;animal can fly&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">==</span> AnimalFlags<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nothing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span> flags<span class="token operator">:</span> AnimalFlags<span class="token punctuation">.</span>None <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws <span class="token operator">|</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws, animal can fly</span>\n</code></pre></div><p>在这里：</p><ul><li>我们使用 <code>|=</code> 来添加一个标志；</li><li>组合使用 <code>&amp;=</code> 和 <code>~</code> 来清理一个标志；</li><li><code>|</code> 来合并标志。</li></ul><div class="language-ts"><pre><code><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span>\n  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  EatsFish    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  Endangered  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>\n\n  EndangeredFlyingClawedFishEating <span class="token operator">=</span> HasClaws <span class="token operator">|</span> CanFly <span class="token operator">|</span> EatsFish <span class="token operator">|</span> Endangered\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="字符串枚举"><a class="header-anchor" href="#字符串枚举" aria-hidden="true">#</a> 字符串枚举</h4><p>在上文中，我们只看到了数字类型的枚举，实际上，枚举类型的值，也可以是字符串类型。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">enum</span> EvidenceTypeEnum <span class="token punctuation">{</span>\n  <span class="token constant">UNKNOWN</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">PASSPORT_VISA</span> <span class="token operator">=</span> <span class="token string">&#39;passport_visa&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">PASSPORT</span> <span class="token operator">=</span> <span class="token string">&#39;passport&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">SIGHTED_STUDENT_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_tertiary_edu_id&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">SIGHTED_KEYPASS_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_keypass_card&#39;</span><span class="token punctuation">,</span>\n  <span class="token constant">SIGHTED_PROOF_OF_AGE_CARD</span> <span class="token operator">=</span> <span class="token string">&#39;sighted_proof_of_age_card&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这些可以更容易被处理和调试，因为它们提供有意义/可调试的字符串。</p><p>你可以使用它们用于简单的字符串比较：</p><div class="language-ts"><pre><code><span class="token comment">// Where `someStringFromBackend` will be &#39;&#39; | &#39;passport_visa&#39; | &#39;passport&#39; ... etc.</span>\n<span class="token keyword">const</span> someStringFromBackend<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;passport&quot;</span>\n<span class="token keyword">const</span> value <span class="token operator">=</span> someStringFromBackend <span class="token keyword">as</span> EvidenceTypeEnum<span class="token punctuation">;</span>\n\n<span class="token comment">// Sample use in code</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> EvidenceTypeEnum<span class="token punctuation">.</span><span class="token constant">PASSPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You provided a passport&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `passport`</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="常量枚举"><a class="header-anchor" href="#常量枚举" aria-hidden="true">#</a> 常量枚举</h4><div class="language-ts"><pre><code><span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span>\n  False<span class="token punctuation">,</span>\n  True<span class="token punctuation">,</span>\n  Unknown\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> lie <span class="token operator">=</span> Tristate<span class="token punctuation">.</span>False<span class="token punctuation">;</span>\n</code></pre></div><p><code>const lie = Tristate.False</code> 会被编译成 JavaScript <code>let lie = Tristate.False</code> (是的，编译后与编译前，几乎相同)。这意味着在运行执行时，它将会查找变量 <code>Tristate</code> 和 <code>Tristate.False</code>。在此处获得性能提升的一个小技巧是使用常量枚举：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Tristate <span class="token punctuation">{</span>\n  False<span class="token punctuation">,</span>\n  True<span class="token punctuation">,</span>\n  Unknown\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> lie <span class="token operator">=</span> Tristate<span class="token punctuation">.</span>False<span class="token punctuation">;</span>\n</code></pre></div><p>将会被编译成：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> lie <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre></div><p>编译器将会：</p><ul><li>内联枚举的任何用法（<code>0</code> 而不是 <code>Tristate.False</code>）；</li><li>不会为枚举类型编译成任何 JavaScript（在这个例子中，运行时没有 <code>Tristate</code> 变量），因为它使用内联语法。</li></ul><h5 id="常量枚举-preserveconstenums-选项"><a class="header-anchor" href="#常量枚举-preserveconstenums-选项" aria-hidden="true">#</a> 常量枚举 <code>preserveConstEnums</code> 选项</h5><p>使用内联语法对性能有明显的提升作用。运行时没有 <code>Tristate</code> 变量的事实，是因为编译器帮助你把一些在运行时没有用到的不编译成 JavaScript。然而，你可能想让编译器仍然把枚举类型编译成 JavaScript，用于如上例子中从字符串到数字，或者是从数字到字符串的查找。在这种情景下，你可以使用编译选项 <code>--preserveConstEnums</code>，它会编译出 <code>var Tristate</code> 的定义，因此你在运行时，手动使用 <code>Tristate[&#39;False&#39;]</code> 和 <code>Tristate[0]</code>。并且这不会以任何方式影响内联。</p><h4 id="有静态方法的枚举"><a class="header-anchor" href="#有静态方法的枚举" aria-hidden="true">#</a> 有静态方法的枚举</h4><p>你可以使用 <code>enum</code> + <code>namespace</code> 的声明的方式向枚举类型添加静态方法。如下例所示，我们将静态成员 <code>isBusinessDay</code> 添加到枚举上：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Weekday <span class="token punctuation">{</span>\n  Monday<span class="token punctuation">,</span>\n  Tuesday<span class="token punctuation">,</span>\n  Wednesday<span class="token punctuation">,</span>\n  Thursday<span class="token punctuation">,</span>\n  Friday<span class="token punctuation">,</span>\n  Saturday<span class="token punctuation">,</span>\n  Sunday\n<span class="token punctuation">}</span>\n\n<span class="token keyword">namespace</span> Weekday <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBusinessDay</span><span class="token punctuation">(</span>day<span class="token operator">:</span> Weekday<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Saturday<span class="token operator">:</span>\n      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> mon <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Monday<span class="token punctuation">;</span>\n<span class="token keyword">const</span> sun <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>sun<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="开放式枚举"><a class="header-anchor" href="#开放式枚举" aria-hidden="true">#</a> 开放式枚举</h4><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你只有在不使用模块时，开放式的枚举才有意义，你应该使用模块，因此这部分在文章最后。</p></div><p>让我们再一次看看编译成 JavaScript 的枚举是什么样子：</p><div class="language-ts"><pre><code><span class="token keyword">var</span> Tristate<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;False&#39;</span><span class="token punctuation">;</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;True&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">;</span>\n  Tristate<span class="token punctuation">[</span><span class="token punctuation">(</span>Tristate<span class="token punctuation">[</span><span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Tristate <span class="token operator">||</span> <span class="token punctuation">(</span>Tristate <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们已经解释了 <code>Tristate[Tristate[&#39;False&#39;] = 0] = &#39;False&#39;</code> 部分，现在我们来看看包裹函数 <code>(function (Tristate) { /* code here */})(Tristate || (Tristate = {}))</code>，特别是 <code>(Tristate || (Tristate = {}))</code> 部分。这捕获了一个局部变量 <code>TriState</code>，它要么指向已经定义的 <code>TriState</code> 值，要么使用一个新的空对象来初始化它。</p><p>这意味着你可以跨多个文件拆分（和扩展）枚举定义，如下所示，你可以把 <code>Color</code> 的定义拆分至两个块中：</p><div class="language-ts"><pre><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  Red<span class="token punctuation">,</span>\n  Green<span class="token punctuation">,</span>\n  Blue\n<span class="token punctuation">}</span>\n\n<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>\n  DarkRed <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  DarkGreen<span class="token punctuation">,</span>\n  DarkBlue\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你应该在枚举的延续块中，重新初始化第一个成员（此处为 <code>DarkRed = 3</code>），使生成的代码不破坏先前定义的值（即0、1...等值）。如果您仍然不这样做，TypeScript 将会发出警告（错误信息：<code>In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.</code>）。</p></div><h3 id="lib-d-ts"><a class="header-anchor" href="#lib-d-ts" aria-hidden="true">#</a> <code>lib.d.ts</code></h3><p>当你安装 <code>TypeScript</code> 时，会顺带安装一个 <code>lib.d.ts</code> 声明文件。这个文件包含 JavaScript 运行时以及 DOM 中存在各种常见的环境声明。</p><ul><li>它自动包含在 <code>TypeScript</code> 项目的编译上下文中；</li><li>它能让你快速开始书写经过类型检查的 JavaScript 代码。</li></ul><p>你可以通过指定 <code>--noLib</code> 的编译器命令行标志（或者在 <code>tsconfig.json</code> 中指定选项 <code>noLib: true</code>）从上下文中排除此文件。</p><h4 id="使用例子"><a class="header-anchor" href="#使用例子" aria-hidden="true">#</a> 使用例子</h4><p>看如下例子：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这段代码的类型检查正常，因为 <code>lib.d.ts</code> 为所有 JavaScript 对象定义了 <code>toString</code> 方法。</p><p>如果你在 <code>noLib</code> 选项下，使用相同的代码，这将会出现类型检查错误：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 属性 toString 不存在类型 number 上</span>\n</code></pre></div><p>现在你已经理解了 <code>lib.d.ts</code> 的重要性，至于它的内容是怎么样的，我们接下来将会解释。</p><h4 id="观察-lib-d-ts-的内容"><a class="header-anchor" href="#观察-lib-d-ts-的内容" aria-hidden="true">#</a> 观察 <code>lib.d.ts</code> 的内容</h4><p><code>lib.d.ts</code> 的内容主要是一些变量声明（如：<code>window</code>、<code>document</code>、<code>math</code>）和一些类似的接口声明（如：<code>Window</code>、<code>Document</code>、<code>Math</code>）。</p><p>寻找代码类型（如：<code>Math.floor</code>）的最简单方式是使用 IDE 的 <code>F12</code>（跳转到定义）。</p><p>让我们来看一个变量声明的示例，如 <code>window</code> 被定义为：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">var</span> window<span class="token operator">:</span> Window<span class="token punctuation">;</span>\n</code></pre></div><p>这只是一个简单的 <code>declare var</code>，后面跟一个变量名称（<code>window</code>）和一个用来类型注解的接口（<code>Window</code>），这些变量通常指向一些全局的接口，例如，以下是 <code>Window</code> 接口的一小部分：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Window</span>\n  <span class="token keyword">extends</span> <span class="token class-name">EventTarget</span><span class="token punctuation">,</span>\n    WindowTimers<span class="token punctuation">,</span>\n    WindowSessionStorage<span class="token punctuation">,</span>\n    WindowLocalStorage<span class="token punctuation">,</span>\n    WindowConsole<span class="token punctuation">,</span>\n    GlobalEventHandlers<span class="token punctuation">,</span>\n    IDBEnvironment<span class="token punctuation">,</span>\n    WindowBase64 <span class="token punctuation">{</span>\n  animationStartTime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  applicationCache<span class="token operator">:</span> ApplicationCache<span class="token punctuation">;</span>\n  clientInformation<span class="token operator">:</span> Navigator<span class="token punctuation">;</span>\n  closed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  crypto<span class="token operator">:</span> Crypto<span class="token punctuation">;</span>\n  <span class="token comment">// so on and so forth...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>你可以在这些接口里看到大量的类型信息，当你不使用 TypeScript 时，你需要将它们保存在你的大脑里。现在你可以使用 <code>intellisense</code> 之类东西，从而可以减少对知识的记忆。</p><p>使用这些全局变量是有利的。在不更改 <code>lib.d.ts</code> 的情况下，它可以让你添加额外的属性。接下来，我们将介绍这些概念。</p><h4 id="修改原始类型"><a class="header-anchor" href="#修改原始类型" aria-hidden="true">#</a> 修改原始类型</h4><p>在 TypeScript 中，接口是开放式的，这意味着当你想使用不存在的成员时，只需要将它们添加至 <code>lib.d.ts</code> 中的接口声明中即可，TypeScript 将会自动接收它。注意，你需要在<a href="#%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97">全局模块</a>中做这些修改，以使这些接口与 <code>lib.d.ts</code> 相关联。我们推荐你创建一个称为 <code>global.d.ts</code> 的特殊文件。</p><p>这里有我们需要添加至 <code>Window</code>，<code>Math</code>，<code>Date</code> 的一些例子：</p><h5 id="window"><a class="header-anchor" href="#window" aria-hidden="true">#</a> Window</h5><p>仅仅是添加至 <code>Window</code> 接口：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>\n  <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这将允许你以类型安全的形式使用它：</p><div class="language-ts"><pre><code><span class="token comment">// Add it at runtime</span>\nwindow<span class="token punctuation">.</span><span class="token function-variable function">helloWorld</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call it</span>\nwindow<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 滥用会导致错误</span>\nwindow<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token string">&#39;gracius&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 提供的参数与目标不匹配</span>\n</code></pre></div><h5 id="math"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h5><p>全局变量 <code>Math</code> 在 <code>lib.d.ts</code> 中被定义为：</p><div class="language-ts"><pre><code><span class="token comment">/** An intrinsic object that provides basic mathematics functionality and constants. */</span>\n<span class="token keyword">declare</span> <span class="token keyword">var</span> Math<span class="token operator">:</span> Math<span class="token punctuation">;</span>\n</code></pre></div><p>即变量 Math 是 Math 的一个实例，Math 接口被定义为：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>\n  <span class="token constant">E</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token constant">LN10</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token comment">// others ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当你想在 <code>Math</code> 全局变量上添加你需要的属性时，你只需要把它添加到 <code>Math</code> 的全局接口上即可，例如：在<a href="https://www.npmjs.com/package/seedrandom" target="_blank" rel="noopener noreferrer">seedrandom Project</a>项目里，它添加了 <code>seedrandom</code> 函数至全局的 <code>Math</code> 对象上，这很容易被声明：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>\n  <span class="token function">seedrandom</span><span class="token punctuation">(</span>seed<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>你可以像下面一样使用它：</p><div class="language-ts"><pre><code>Math<span class="token punctuation">.</span><span class="token function">seedrandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nMath<span class="token punctuation">.</span><span class="token function">seedrandom</span><span class="token punctuation">(</span><span class="token string">&#39;Any string you want&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h5 id="date"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h5><p>如果你在 <code>lib.d.ts</code> 中寻找 <code>Date</code> 定义的声明，你将会找到如下代码：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">var</span> Date<span class="token operator">:</span> DateConstructor<span class="token punctuation">;</span>\n</code></pre></div><p>接口 <code>DateConstructor</code> 与上文中 <code>Math</code> 和 <code>Window</code> 接口一样，它涵盖了可以使用的 <code>Date</code> 全局变量的成员（如：<code>Date.now()</code>）。除此之外，它还包含了可以让你创建 <code>Date</code> 实例的构造函数签名（如：<code>new Date()</code>）。<code>DateConstructor</code> 接口的一部分代码如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">DateConstructor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n  <span class="token comment">// 一些其他的构造函数签名</span>\n\n  <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 其他成员函数</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 <a href="https://github.com/abritinthebay/datejs" target="_blank" rel="noopener noreferrer">datejs</a> 里，它在 Date 的全局变量以及 Date 实例上同时添加了成员，因此这个库的 TypeScript 定义看起来像如下所示（社区已经<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/datejs/index.d.ts" target="_blank" rel="noopener noreferrer">定义</a>好了）：</p><div class="language-ts"><pre><code><span class="token comment">// DateJS 公开的静态方法</span>\n<span class="token keyword">interface</span> <span class="token class-name">DateConstructor</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM) */</span>\n  <span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n  <span class="token comment">// ... so on and so forth</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// DateJS 公开的实例方法</span>\n<span class="token keyword">interface</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** Adds the specified number of milliseconds to this instance. */</span>\n  <span class="token function">addMilliseconds</span><span class="token punctuation">(</span>milliseconds<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n  <span class="token comment">// ... so on and so forth</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这允许你在类型安全的情况下做：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> today <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> todayAfter1second <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">addMilliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h5 id="string"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h5><p>如果你在 <code>lib.d.ts</code> 里寻找 <code>string</code>，你将会找到与 <code>Date</code> 相类似的内容（全局变量 <code>String</code>，StringConstructor 接口，<code>String</code> 接口）。但值得注意的是，<code>String</code> 接口也会影响字符串字面量，如下所示：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n  <span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nString<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">endsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> str <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> suffix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bas&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h5 id="终极-string"><a class="header-anchor" href="#终极-string" aria-hidden="true">#</a> 终极 string</h5><p>基于可维护性，我们推荐创建一个 <code>global.d.ts</code> 文件。然而，如果你愿意，你可以通过使用 <code>declare global { /* global namespace */ }</code>，从文件模块中进入全局命名空间：</p><div class="language-ts"><pre><code><span class="token comment">// 确保是模块</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">declare</span> global <span class="token punctuation">{</span>\n  <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n    <span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nString<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">endsWith</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>suffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> str <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> suffix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo bas&#39;</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h4 id="使用你自己定义的-lib-d-ts"><a class="header-anchor" href="#使用你自己定义的-lib-d-ts" aria-hidden="true">#</a> 使用你自己定义的 lib.d.ts</h4><p>正如上文所说，使用 <code>--noLib</code> 编译选项会导致 TypeScript 排除自动包含的 <code>lib.d.ts</code> 文件。为什么这个功能是有效的，我例举了一些常见原因：</p><ul><li>运行的 JavaScript 环境与基于标准浏览器运行时环境有很大不同；</li><li>你希望在代码里严格的控制全局变量，例如：<code>lib.d.ts</code> 将 <code>item</code> 定义为全局变量，你不希望它泄漏到你的代码里。</li></ul><p>一旦你排除了默认的 <code>lib.d.ts</code> 文件，你就可以在编译上下文中包含一个命名相似的文件，TypeScript 将提取该文件进行类型检查。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>小心使用 <code>--noLib</code> 选项，一旦你使用了它，当你把你的项目分享给其他人时，它们也将被迫使用 <code>--noLib</code> 选项，更糟糕的是，如果将这些代码放入你的项目中，你可能需要将它们移植到基于你的代码的 <code>lib</code> 中。</p></div><h4 id="编译目标对-lib-d-ts-的影响"><a class="header-anchor" href="#编译目标对-lib-d-ts-的影响" aria-hidden="true">#</a> 编译目标对 <code>lib.d.ts</code> 的影响</h4><p>设置编译目标为 <code>es6</code> 时，能导致 <code>lib.d.ts</code> 包含更多像 Promise 现代（es6）内容的环境声明。编译器目标的这种作用，改变了代码的环境，这对某些人来说是理想的，但是这对另外一些人来说造成了困扰，因为它将编译出的代码与环境混为一谈。</p><p>当你想对环境进行更细粒的控制时，你应该使用我们接下来将要讨论的 <code>--lib</code> 选项。</p><h4 id="lib-选项"><a class="header-anchor" href="#lib-选项" aria-hidden="true">#</a> <code>--lib</code> 选项</h4><p>有时，你想要解耦编译目标（即生成的 JavaScript 版本）和环境库支持之间的关系。例如对于 Promise，你的编译目标是 <code>--target es5</code>，但是你仍然想使用它，这时，你可以使用 <code>lib</code> 对它进行控制。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 --lib 选项可以将任何 lib 与 --target 解耦。</p></div><p>你可以通过命令行或者在 <code>tsconfig.json</code> 中提供此选项（推荐）：</p><h5 id="命令行"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h5><div class="language-shell"><pre><code>tsc --target es5 --lib dom,es6\n</code></pre></div><h5 id="config-json"><a class="header-anchor" href="#config-json" aria-hidden="true">#</a> config.json</h5><div class="language-json"><pre><code><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>lib</code> 分类如下：</p><ul><li>JavaScript 功能 <ul><li>es5</li><li>es6</li><li>es2015</li><li>es7</li><li>es2016</li><li>es2017</li><li>esnext</li></ul></li><li>运行环境 <ul><li>dom</li><li>dom.iterable</li><li>webworker</li><li>scripthost</li></ul></li><li>ESNext 功能选项 <ul><li>es2015.core</li><li>es2015.collection</li><li>es2015.generator</li><li>es2015.iterable</li><li>es2015.promise</li><li>es2015.proxy</li><li>es2015.reflect</li><li>es2015.symbol</li><li>es2015.symbol.wellknown</li><li>es2016.array.include</li><li>es2017.object</li><li>es2017.sharedmemory</li><li>esnext.asynciterable</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>--lib</code> 选项提供非常精细的控制，因此你最有可能从运行环境与 JavaScript 功能类别中分别选择一项，如果你没有指定 <code>--lib</code>，则会导入默认库：</p><ul><li><code>--target</code> 选项为 es5 时，会导入 es5, dom, scripthost。</li><li><code>--target</code> 选项为 es6 时，会导入 es6, dom, dom.iterable, scripthost。</li></ul></div><p>我个人的推荐：</p><div class="language-json"><pre><code><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>包括使用 Symbol 的 ES5 使用例子：</p><div class="language-json"><pre><code><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scripthost&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es2015.symbol&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="在旧的-javascript-引擎时使用-polyfill"><a class="header-anchor" href="#在旧的-javascript-引擎时使用-polyfill" aria-hidden="true">#</a> 在旧的 JavaScript 引擎时使用 Polyfill</h4><p>要使用一些新功能如 <code>Map</code>、<code>Set</code>、<code>Promise</code>（随着时间推移会变化），你可以使用现代的 <code>lib</code> 选项，并且需要安装 <code>core-js</code>：</p><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> core-js --save-dev\n</code></pre></div><p>接着，在你的项目里导入它：</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;core-js&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="函数"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><h4 id="参数注解"><a class="header-anchor" href="#参数注解" aria-hidden="true">#</a> 参数注解</h4><h5 id="返回类型注解"><a class="header-anchor" href="#返回类型注解" aria-hidden="true">#</a> 返回类型注解</h5><h5 id="可选参数"><a class="header-anchor" href="#可选参数" aria-hidden="true">#</a> 可选参数</h5><h5 id="重载"><a class="header-anchor" href="#重载" aria-hidden="true">#</a> 重载</h5><h5 id="函数声明"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h5><h3 id="可调用的"><a class="header-anchor" href="#可调用的" aria-hidden="true">#</a> 可调用的</h3><h3 id="类型断言"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><h3 id="freshness"><a class="header-anchor" href="#freshness" aria-hidden="true">#</a> Freshness</h3><h3 id="类型保护"><a class="header-anchor" href="#类型保护" aria-hidden="true">#</a> 类型保护</h3><h3 id="字面量类型"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h3><h3 id="readonly"><a class="header-anchor" href="#readonly" aria-hidden="true">#</a> readonly</h3><h3 id="范型-1"><a class="header-anchor" href="#范型-1" aria-hidden="true">#</a> 范型</h3><h3 id="类型推断"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h3><h3 id="类型兼容性"><a class="header-anchor" href="#类型兼容性" aria-hidden="true">#</a> 类型兼容性</h3><h3 id="never"><a class="header-anchor" href="#never" aria-hidden="true">#</a> Never</h3><h3 id="辨析联合类型"><a class="header-anchor" href="#辨析联合类型" aria-hidden="true">#</a> 辨析联合类型</h3><h3 id="索引签名"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h3><h3 id="流动的类型"><a class="header-anchor" href="#流动的类型" aria-hidden="true">#</a> 流动的类型</h3><h3 id="异常处理"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><h3 id="混合"><a class="header-anchor" href="#混合" aria-hidden="true">#</a> 混合</h3><h3 id="thistype"><a class="header-anchor" href="#thistype" aria-hidden="true">#</a> ThisType</h3><h2 id="jsx"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h2><h3 id="支持-jsx"><a class="header-anchor" href="#支持-jsx" aria-hidden="true">#</a> 支持 JSX</h3><h3 id="react-jsx"><a class="header-anchor" href="#react-jsx" aria-hidden="true">#</a> React JSX</h3><h3 id="非-react-jsx"><a class="header-anchor" href="#非-react-jsx" aria-hidden="true">#</a> 非 React JSX</h3><h2 id="typescript-错误提示"><a class="header-anchor" href="#typescript-错误提示" aria-hidden="true">#</a> TypeScript 错误提示</h2><h3 id="解读-errors"><a class="header-anchor" href="#解读-errors" aria-hidden="true">#</a> 解读 Errors</h3><h3 id="常见的-error"><a class="header-anchor" href="#常见的-error" aria-hidden="true">#</a> 常见的 Error</h3><h2 id="tips"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> TIPs</h2><h3 id="基于字符串的枚举"><a class="header-anchor" href="#基于字符串的枚举" aria-hidden="true">#</a> 基于字符串的枚举</h3><h3 id="名义化类型"><a class="header-anchor" href="#名义化类型" aria-hidden="true">#</a> 名义化类型</h3><h3 id="状态函数"><a class="header-anchor" href="#状态函数" aria-hidden="true">#</a> 状态函数</h3><h3 id="bind-是有害的"><a class="header-anchor" href="#bind-是有害的" aria-hidden="true">#</a> Bind 是有害的</h3><h3 id="柯里化"><a class="header-anchor" href="#柯里化" aria-hidden="true">#</a> 柯里化</h3><h3 id="范型的实例化类型"><a class="header-anchor" href="#范型的实例化类型" aria-hidden="true">#</a> 范型的实例化类型</h3><h3 id="对象字面量的惰性初始化"><a class="header-anchor" href="#对象字面量的惰性初始化" aria-hidden="true">#</a> 对象字面量的惰性初始化</h3><h3 id="类是有用的"><a class="header-anchor" href="#类是有用的" aria-hidden="true">#</a> 类是有用的</h3><h3 id="export-default-被认为是有害的"><a class="header-anchor" href="#export-default-被认为是有害的" aria-hidden="true">#</a> export default 被认为是有害的</h3><h3 id="减少-setter-属性的使用"><a class="header-anchor" href="#减少-setter-属性的使用" aria-hidden="true">#</a> 减少 setter 属性的使用</h3><h3 id="创建数组"><a class="header-anchor" href="#创建数组" aria-hidden="true">#</a> 创建数组</h3><h3 id="谨慎使用-outfile"><a class="header-anchor" href="#谨慎使用-outfile" aria-hidden="true">#</a> 谨慎使用 --outFile</h3><h3 id="typescript-中的静态构造函数"><a class="header-anchor" href="#typescript-中的静态构造函数" aria-hidden="true">#</a> TypeScript 中的静态构造函数</h3><h3 id="单例模式"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><h3 id="函数参数"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h3><h3 id="truthy"><a class="header-anchor" href="#truthy" aria-hidden="true">#</a> Truthy</h3><h3 id="构建切换"><a class="header-anchor" href="#构建切换" aria-hidden="true">#</a> 构建切换</h3><h3 id="类型安全的-event-emitter"><a class="header-anchor" href="#类型安全的-event-emitter" aria-hidden="true">#</a> 类型安全的 Event Emitter</h3><h3 id="reflect-metadata"><a class="header-anchor" href="#reflect-metadata" aria-hidden="true">#</a> Reflect Metadata</h3><h3 id="协变与逆变"><a class="header-anchor" href="#协变与逆变" aria-hidden="true">#</a> 协变与逆变</h3><h3 id="infer"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h3><h2 id="typescript-编译原理"><a class="header-anchor" href="#typescript-编译原理" aria-hidden="true">#</a> TypeScript 编译原理</h2><h3 id="概览-1"><a class="header-anchor" href="#概览-1" aria-hidden="true">#</a> 概览</h3><h3 id="程序"><a class="header-anchor" href="#程序" aria-hidden="true">#</a> 程序</h3><h3 id="抽象语法树"><a class="header-anchor" href="#抽象语法树" aria-hidden="true">#</a> 抽象语法树</h3><h3 id="扫描器"><a class="header-anchor" href="#扫描器" aria-hidden="true">#</a> 扫描器</h3><h3 id="解析器"><a class="header-anchor" href="#解析器" aria-hidden="true">#</a> 解析器</h3><h3 id="绑定器"><a class="header-anchor" href="#绑定器" aria-hidden="true">#</a> 绑定器</h3><h3 id="检查器"><a class="header-anchor" href="#检查器" aria-hidden="true">#</a> 检查器</h3><h3 id="发射器"><a class="header-anchor" href="#发射器" aria-hidden="true">#</a> 发射器</h3><h2 id="typescript-faqs"><a class="header-anchor" href="#typescript-faqs" aria-hidden="true">#</a> TypeScript FAQs</h2><h3 id="一些常见的「bug」并不是-bug"><a class="header-anchor" href="#一些常见的「bug」并不是-bug" aria-hidden="true">#</a> 一些常见的「bug」并不是 bug</h3><h3 id="一些常见的-feature-需求"><a class="header-anchor" href="#一些常见的-feature-需求" aria-hidden="true">#</a> 一些常见的 Feature 需求</h3><h3 id="类型系统的行为"><a class="header-anchor" href="#类型系统的行为" aria-hidden="true">#</a> 类型系统的行为</h3><h3 id="函数-1"><a class="header-anchor" href="#函数-1" aria-hidden="true">#</a> 函数</h3><h3 id="类"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><h3 id="范型-2"><a class="header-anchor" href="#范型-2" aria-hidden="true">#</a> 范型</h3><h3 id="模块-1"><a class="header-anchor" href="#模块-1" aria-hidden="true">#</a> 模块</h3><h3 id="枚举-1"><a class="header-anchor" href="#枚举-1" aria-hidden="true">#</a> 枚举</h3><h3 id="类型守卫"><a class="header-anchor" href="#类型守卫" aria-hidden="true">#</a> 类型守卫</h3><h3 id="jsx-和-react"><a class="header-anchor" href="#jsx-和-react" aria-hidden="true">#</a> JSX 和 React</h3><h3 id="一些不能按预期工作的代码"><a class="header-anchor" href="#一些不能按预期工作的代码" aria-hidden="true">#</a> 一些不能按预期工作的代码</h3><h3 id="命令行的行为"><a class="header-anchor" href="#命令行的行为" aria-hidden="true">#</a> 命令行的行为</h3><h3 id="tsconfig-json-的行为"><a class="header-anchor" href="#tsconfig-json-的行为" aria-hidden="true">#</a> tsconfig.json 的行为</h3><p><cite><a href="https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#tsconfig-json" target="_blank" rel="noopener noreferrer">-- 《深入理解 TypeScript》</a></cite></p>',555)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
