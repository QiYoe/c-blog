import{o as n,c as e,b as a}from"./app.e234469c.js";const o='{"title":"Commitizen","description":"前端代码风格规范之Commitizen","frontmatter":{"title":"Commitizen","head":[["meta",{"name":"description","content":"前端代码风格规范之Commitizen"}],["meta",{"name":"keywords","content":"前端代码风格规范 commitizen"}]]},"headers":[{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"安装","slug":"安装"},{"level":2,"title":"验证","slug":"验证"},{"level":2,"title":"设置中文","slug":"设置中文"}],"relativePath":"front-end/lint/commitizen.md","lastUpdated":1631806521983}',s={},t=[a('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p>有了 <code>Commitlint</code> 之后，我们就可以规范 <code>commit</code> 的信息校验了。 <code>Commitizen</code> 可以令这种校验体验感更佳。</p><p><a href="http://commitizen.github.io/cz-cli/" target="_blank" rel="noopener noreferrer">commitizen 官方文档</a></p><h2 id="安装"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -D commitizen\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> <span class="token function">add</span> commitizen -D\n</code></pre></div><p>之后终端运行：</p><div class="language-shell"><pre><code>npx commitizen init cz-conventional-changelog --save-dev --save-exact\n<span class="token comment"># or</span>\nnpx commitizen init cz-conventional-changelog --yarn --dev --exact\n</code></pre></div><p>在 <code>package.json</code> 文件中添加命令：</p><div class="language-js"><pre><code><span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token string">&quot;cz&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>如果安装了 <code>husky</code>：</p><ul><li>命令命名为 <code>commit</code> ，运行此命令的时候 <code>npm</code> 和 <code>husky</code> 会自动运行名为 <code>precommit</code> 的脚本 2 次</li><li>命令命名为其他，如 <code>cz</code> ，运行此命令的时候 <code>npm</code> 只会自动运行名为 <code>prexxx</code> 的脚本</li></ul></div><h2 id="验证"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><p>终端运行：</p><div class="language-shell"><pre><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n\n<span class="token function">yarn</span> cz\n<span class="token comment"># or</span>\n<span class="token function">npm</span> cz\n</code></pre></div><h2 id="设置中文"><a class="header-anchor" href="#设置中文" aria-hidden="true">#</a> 设置中文</h2><p>cz-conventional-changelog 出来的选项都是英文，对于开始使用的新手来说不太方便。这里是<a href="https://github.com/z649319834/cz-conventional-changelog-zh" target="_blank" rel="noopener noreferrer">中文版</a>的</p>',15)];s.render=function(a,o,s,c,i,l){return n(),e("div",null,t)};export{o as __pageData,s as default};
