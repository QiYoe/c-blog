import{o as n,c as s,b as a}from"./app.c02e44ab.js";const p='{"title":"Pro Git","description":"Pro Git","frontmatter":{"title":"Pro Git","head":[["meta",{"name":"description","content":"Pro Git"}],["meta",{"name":"keywords","content":"Pro Git"}]]},"relativePath":"books/pro-git.md","lastUpdated":1624463632569}',t={},o=a('<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener noreferrer">Pro Git</a></p><p>JavaScript 开发者在代码中几乎普遍依赖的一个假定：一个函数一旦开始执行，就会运行到结束，期间不会有其他代码能够打断它并插入其间。不过 ES6 引入了一个新的函数类型，它并不符合这种运行到结束的特性。这类新的函数被称为生成器。</p><div class="language-js"><pre><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  x<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> <span class="token comment">// 暂停！</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;x:&quot;</span><span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  x<span class="token operator">++</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token comment">// 构造一个迭代器it来控制这个生成器  创建了一个迭代器对象，把它赋给了一个变量 it</span>\n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 这里启动foo()！</span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nx<span class="token punctuation">;</span> <span class="token comment">// 2 </span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nx<span class="token punctuation">;</span> <span class="token comment">// 3 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x: 3 </span>\n</code></pre></div><p>执行过程：</p><ol><li>it = foo() 运算并没有执行生成器 *foo()，而只是构造了一个迭代器（iterator），这个迭代器会控制它的执行。后面会介绍迭代器。</li><li>第一个 it.next() 启动了生成器 *foo()，并运行了 *foo() 第一行的 x++。</li><li>*foo() 在 yield 语句处暂停，在这一点上第一个 it.next() 调用结束。此时 *foo() 仍在运行并且是活跃的，但处于暂停状态。</li><li>我们查看 x 的值，此时为 2。</li><li>我们调用 bar()，它通过 x++ 再次递增 x。</li><li>我们再次查看 x 的值，此时为 3。</li><li>最后的 it.next() 调用从暂停处恢复了生成器 *foo() 的执行，并运行 console.log(..)语句，这条语句使用当前 x 的值 3。</li></ol><p>生成器函数是一个特殊的函数，具有前面我们展示的新的执行模式。但是，它仍然是一个函数，这意味着它仍然有一些基本的特性没有改变。比如，它仍然可以接受参数（即输入），也能够返回值（即输出）。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 启动foo(..) </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><p>首先，传入 6 作为参数 x。然后调用 it.next()，这会启动 *foo(..)。在 *foo(..) 内部，开始执行语句 var y = x ..，但随后就遇到了一个 yield 表达式。它就会在这一点上暂停 *foo(..)（在赋值语句中间！），并在本质上要求调用代码为 yield表达式提供一个结果值。接下来，调用 it.next( 7 )，这一句把值 7 传回作为被暂停的yield 表达式的结果。所以，这时赋值语句实际上就是 var y = 6 * 7。现在，return y 返回值 42 作为调用it.next( 7 ) 的结果。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>一般来说，需要的 next(..) 调用要比 yield 语句多一个，前面的代码片段有一个 yield 和两个 next(..) 调用。因为第一个 next(..) 总是启动一个生成器，并运行到第一个 yield 处。不过，是第二个next(..) 调用完成第一个被暂停的 yield 表达式，第三个 next(..) 调用完成第二个 yield，以此类推。</p></div><p>消息是双向传递的——yield.. 作为一个表达式可以发出消息响应 next(..) 调用，next(..) 也可以向暂停的 yield 表达式发送值。考虑下面这段稍稍调整过的代码：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield一个值！</span>\n  <span class="token keyword">return</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一个next()，并不传入任何东西</span>\nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// &quot;Hello&quot; </span>\nres <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向等待的yield传入7</span>\nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提示</p><p>生成器的起始处我们调用第一个 next() 时，还没有暂停的 yield 来接受这样一个值。规范和所有兼容浏览器都会默默丢弃传递给第一个 next() 的任何东西。传值过去仍然不是一个好思路，因为你创建了沉默的无效代码，这会让人迷惑。因此，启动生成器时一定要用不带参数的 next()。</p></div><p>同一个生成器的多个实例可以同时运行，它们甚至可以彼此交互(交替执行)：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> \n  z<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> val1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2 </span>\n<span class="token keyword">var</span> val2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2 </span>\nval1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 40 &lt;-- x:20, z:2 </span>\nval2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">*</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 600 &lt;-- x:200, z:3 </span>\nit1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:300 </span>\n                      <span class="token comment">// 20 300 3 </span>\nit2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">/</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:10 </span>\n                      <span class="token comment">// 200 10 3 </span>\n</code></pre></div><ol><li>*foo() 的两个实例同时启动，两个 next() 分别从 yield 2 语句得到值 2。</li><li>val2 * 10 也就是 2 * 10，发送到第一个生成器实例 it1，因此 x 得到值 20。z 从 1 增加到 2，然后 20 * 2 通过 yield 发出，将 val1 设置为 40。</li><li>val1 * 5 也就是 40 * 5，发送到第二个生成器实例 it2，因此 x 得到值 200。z 再次从 2递增到 3，然后 200 * 3 通过 yield 发出，将 val2 设置为 600。</li><li>val2 / 2 也就是 600 / 2，发送到第一个生成器实例 it1，因此 y 得到值 300，然后打印出 x y z 的值分别是 20 300 3。</li><li>val1 / 4 也就是 40 / 4，发送到第二个生成器实例 it2，因此 y 得到值 10，然后打印出x y z 的值分别为 200 10 3。</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  a<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> \n  b <span class="token operator">=</span> b <span class="token operator">*</span> a<span class="token punctuation">;</span> \n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  b<span class="token operator">--</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> \n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> \n  b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> last<span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 不管yield出来的是什么，下一次都把它原样传回去！</span>\n    last <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> last <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token comment">// 确保重新设置a和b</span>\na <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b--; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yield 8 </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a++; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = 8 + b; </span>\n      <span class="token comment">// yield 2 </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b = b * a; </span>\n      <span class="token comment">// yield b </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = b + 3; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b = a * 2; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12 18 </span>\n</code></pre></div>',17);t.render=function(a,p,t,c,e,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
