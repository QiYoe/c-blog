import{o as n,c as s,b as a}from"./app.f03f2116.js";const p='{"title":"你不知道的JavaScript","description":"you-dont-know-JS读书笔记","frontmatter":{"title":"你不知道的JavaScript","head":[["meta",{"name":"description","content":"you-dont-know-JS读书笔记"}],["meta",{"name":"keywords","content":"你不知道的JavaScript you-dont-know-JS 你不知道的JS 读书笔记"}]]},"headers":[{"level":2,"title":"作用域和闭包","slug":"作用域和闭包"},{"level":3,"title":"作用域是什么","slug":"作用域是什么"},{"level":3,"title":"词法作用域","slug":"词法作用域"},{"level":3,"title":"函数作用域和块作用域","slug":"函数作用域和块作用域"},{"level":3,"title":"提升","slug":"提升"},{"level":3,"title":"作用域闭包","slug":"作用域闭包"},{"level":2,"title":"this和对象原型","slug":"this和对象原型"},{"level":3,"title":"关于this","slug":"关于this"},{"level":3,"title":"this全面解析","slug":"this全面解析"},{"level":3,"title":"对象","slug":"对象"},{"level":3,"title":"混合对象”类“","slug":"混合对象”类“"},{"level":3,"title":"原型","slug":"原型"},{"level":3,"title":"行为委托","slug":"行为委托"},{"level":2,"title":"类型和语法","slug":"类型和语法"},{"level":3,"title":"类型","slug":"类型"},{"level":3,"title":"值","slug":"值"},{"level":3,"title":"原生函数（内置函数）","slug":"原生函数（内置函数）"},{"level":3,"title":"强制类型转换","slug":"强制类型转换"},{"level":3,"title":"语法","slug":"语法"},{"level":2,"title":"异步和性能","slug":"异步和性能"},{"level":3,"title":"异步：现在与将来","slug":"异步：现在与将来"},{"level":3,"title":"回调","slug":"回调"},{"level":3,"title":"Promise","slug":"promise"},{"level":3,"title":"生成器","slug":"生成器"},{"level":3,"title":"程序性能","slug":"程序性能"},{"level":3,"title":"性能测试与调优","slug":"性能测试与调优"},{"level":2,"title":"起步上路","slug":"起步上路"},{"level":3,"title":"深入编程","slug":"深入编程"},{"level":3,"title":"深入JavaScript","slug":"深入javascript"},{"level":3,"title":"深入“你不知道的JavaScript系列”","slug":"深入“你不知道的javascript系列”"},{"level":2,"title":"ES6及更新版本","slug":"es6及更新版本"},{"level":3,"title":"ES？现在与未来","slug":"es？现在与未来"},{"level":3,"title":"语法","slug":"语法-1"},{"level":3,"title":"代码组织","slug":"代码组织"},{"level":3,"title":"异步流控制","slug":"异步流控制"},{"level":3,"title":"集合","slug":"集合"},{"level":3,"title":"新增API","slug":"新增api"},{"level":3,"title":"元编程","slug":"元编程"},{"level":3,"title":"ES6之后","slug":"es6之后"}],"relativePath":"books/you-dont-know-js.md","lastUpdated":1626743798737}',t={},o=a('<h2 id="作用域和闭包"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="作用域是什么"><a class="header-anchor" href="#作用域是什么" aria-hidden="true">#</a> 作用域是什么</h3><p>首先介绍传统编译语言“编译”步骤：</p><ul><li>分词：把我们编写的代码分解。比如var a = 2;，会分解成var、a、=、2、；空格的分解与否取决于空格在语言中有没有意义</li><li>解析：把上一步分解得到的词法单元流（数组）根据嵌套关系（作用域）组成“抽象语法树”（AST）</li><li>生成代码：将AST转为机器可执行指令</li></ul><p><strong>总结：将编写的代码转换位AST，生成机器可执行指令，最后机器执行指令<code>创建变量、存储变量等</code>，实际上JavaScript编译过程也类似如此</strong></p><p>其次介绍js执行程序的“打工人”</p><ul><li>引擎：项目经理，从头到尾参与整个编译和<code>执行</code>过程</li><li>编译器：苦逼程序员，上边编译过程就是它负责处理</li><li>作用域：产品经理，定义一套规则，规定当前执行代码对声明标识符的访问权限</li></ul><p>当来一个新项目时（执行var a = 2;），程序员就要和产品经理开始沟通（撕逼：自行脑部吧🤭）</p><p>代码生成阶段编译器处理var a = 2;流程：</p><ul><li>看到var a，编译器询问<code>当前作用域</code>是否已存在a，存在，则忽略它，继续编译；不存在，则在当前作用域声明变量a：<code>undefined</code>（<strong>编译器在当前作用域活动</strong>）</li><li>然后编译器生成引擎运行所需代码（处理a = 2）。引擎运行编译器处理之后的a = 2：引擎询问当前作用域是否已存在a，存在，则使用此a赋值；不存在，则在向上作用域查找a（<strong>引擎在作用域链活动</strong>） <ul><li>类似a = 2这种查找赋值操作<code>目标</code>是LHS查询（<strong>引擎查找</strong>） <ul><li>查询不到时：正常模式-不会报错（<strong>自动生成全局属性a</strong>）；严格模式-ReferenceError</li><li>查到但进行不合理操作（比如获取null或undefined的子属性）：TypeError</li></ul></li><li>类似console.log(2)这种查找赋值操作<code>源头</code>是RHS查询（查询不到时：ReferenceError）（<strong>引擎查找</strong>）</li></ul></li></ul><p><strong>总结：变量赋值时，首先编译器在当前作用域中声明一个变量<code>如果之前没声明过</code>，然后引擎运行时在作用域中查找该变量，能找到就赋值，找不到则抛出异常（此处说的是严格模式，正常模式下不会报错）</strong></p><p>作用域链：作用域层层嵌套（比如函数嵌套函数）。当前作用域中找不到某变量，引擎就会向外层作用域层层查找，直到找到该变量或是在最外层的全局作用域中也没找到时停止查找</p><h3 id="词法作用域"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h3><p>作用域有两种工作模型：</p><ul><li>词法作用域（最为普遍）--定义在词法阶段的作用域（也就是说作用域在写代码时就已经决定好了--大部分情况下是这样） <ul><li>词法阶段：即<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88">上一节</a>说到的<code>分词</code></li><li>查找：引擎执行代码，作用域（作用域气泡更容易理解）层层向上查找变量--<code>遮蔽效应</code>（作用域查找匹配到第一个标识符时停止，即内部标识符”屏蔽“了外部标识符）</li><li>欺骗词法：打破定义在词法阶段的作用域的规则（非常不建议使用：影响性能） <ul><li>eval：在运行修改书写期的词法作用域</li><li>with（废弃）</li></ul></li></ul></li><li>动态作用域（比如Bash、Perl）</li></ul><h3 id="函数作用域和块作用域"><a class="header-anchor" href="#函数作用域和块作用域" aria-hidden="true">#</a> 函数作用域和块作用域</h3><ul><li>函数作用域--不多说，函数内部形成函数自身的作用域（即函数外部无法访问函数内部变量） <ul><li>函数声明--function foo()开头</li><li>函数表达式--非function()开头<code>(function foo(){...}())或foo()</code><ul><li>匿名（不建议）</li><li>具名 <ul><li>IIFE（立即执行函数）(也是函数，即内部变量不是全局变量)</li></ul></li></ul></li></ul></li><li>块作用域：{}（<strong>if条件语句不算块</strong>） <ul><li>try/catch：catch会创建一个块作用域</li><li>let、const</li></ul></li></ul><p><strong>总结：任何声明在某个作用域内的变量，都将<code>附属于这个作用域</code></strong></p><h3 id="提升"><a class="header-anchor" href="#提升" aria-hidden="true">#</a> 提升</h3><p>引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来，<a href="#%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F">词法作用域</a>核心内容（<strong>针对当前作用域</strong>）</p><p>函数优先：函数会首先被提升，然后才是变量（<strong>同名的函数声明和变量声明不提升规则方式进行覆盖</strong>）</p><div class="warning custom-block"><p class="custom-block-title">提醒</p><p><strong>if语句中的var会<code>提升</code>到外层作用域，即使if条件不成立</strong></p></div><h3 id="作用域闭包"><a class="header-anchor" href="#作用域闭包" aria-hidden="true">#</a> 作用域闭包</h3><p>启示：<strong>JavaScript中闭包无所不在，你只需要能够识别并拥抱它</strong></p><p><code>在自己定义的词法作用域以外的地方执行，此时该作用域并未被销毁</code></p><h2 id="this和对象原型"><a class="header-anchor" href="#this和对象原型" aria-hidden="true">#</a> this和对象原型</h2><h3 id="关于this"><a class="header-anchor" href="#关于this" aria-hidden="true">#</a> 关于this</h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>this作用：被自动定义在所有函数的作用域中，隐式传递上下文对象</li><li>this不指向函数词法作用域：即函数书写时的上下文</li><li>this实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用</li></ul></div><h3 id="this全面解析"><a class="header-anchor" href="#this全面解析" aria-hidden="true">#</a> this全面解析</h3><ul><li>调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置） <ul><li>调用栈：为了到达当前执行位置所调用的所有函数（在当前正在执行的函数的前一个调用）</li><li>绑定规则： <ul><li>默认绑定：独立函数调用——this指向全局对象 <ul><li>严格模式：与函数调用位置无关： <ul><li>函数内严格模式下的this指向undefined</li><li>严格模式运行函数，函数内this指向函数声明的上下文</li></ul></li><li>正常模式：<strong>不带任何修饰进行调用</strong></li></ul></li><li>隐式绑定：调用位置是否有上下文对象。比如obj 对象“拥有”或者“包含”函数时，函数中的this会绑定到obj上下文对象 <ul><li>隐式丢失：即默认绑定（函数引用的只是地址）</li></ul></li><li>显示绑定：直接指定this的绑定对象 <ul><li>call、apply：如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值会被转换成它的对象形式（也就是 new String(..)、new Boolean(..) 或者new Number(..)）。这通常被称为“装箱”（<strong>无法解决隐式丢失问题</strong>）</li><li>硬绑定：函数内部执行call、apply绑定，后面执行此函数的任何绑定操作都会无效</li></ul></li><li>new绑定： <ol><li><strong>创建（或者说构造）一个全新的对象</strong></li><li><strong>这个新对象会被执行 [[ 原型 ]] 连接</strong></li><li><strong>这个新对象会绑定到函数调用的 this</strong></li><li><strong>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</strong></li></ol></li><li>箭头函数：函数内部创建的箭头函数会捕获调用时此函数的this。箭头函数的绑定无法被修改（new 也不行！）</li><li>优先级： <ol><li>函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。<strong>var bar = new foo()</strong></li><li>函数是否通过 call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。<strong>var bar = foo.call(obj)</strong></li><li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。<strong>var bar = obj.foo()</strong></li><li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。<strong>var bar = foo()</strong></li></ol></li></ul></li><li>绑定例外：即当call、apply、bind的参数时null、undefined时，绑定全局。建议使用<code>const ф = Object.create(null)</code>创建一个没有prototype的{} <ul><li>软绑定：给默认绑定指定一个全局对象和 undefined 以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改 this 的能力</li></ul></li></ul></li><li>声明位置：函数书写时声明的位置（可能会考虑变量提升）</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是：baz</span>\n  <span class="token comment">// 因此，当前调用位置是全局作用域</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- bar 的调用位置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar</span>\n  <span class="token comment">// 因此，当前调用位置在 baz 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- foo 的调用位置</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前调用栈是 baz -&gt; bar -&gt; foo</span>\n  <span class="token comment">// 因此，当前调用位置在 bar 中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- baz 的调用位置</span>\n</code></pre></div><h3 id="对象"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>6中基本类型：string、number、boolean、null、undefined、object</p><p>语言bug：typeof null === &#39;object&#39;<code>在JS中二进制的前三位为0判为object，而null全是0，所以会返回&#39;object&#39;</code></p><p>内置对象：String、Number、Boolean、Object、Function、Array、Date、RegExp、Error</p><p>键值：在引擎内部，这些值的存储方式是多种多样的，一般并不会存在对象容器内部。存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置</p><ul><li>属性访问：. <code>满足标识符命名规范</code><ul><li>属性名永远都是字符串（如果你使用 string（字面量）以外的其他值作为属性名，那它首先会被转换为一个字符串<code>数字也不例外</code>）</li></ul></li><li>键访问：[] <code>可见接受任意UTF-8/Unicode</code></li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span>myObject<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;foo&quot;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bar&quot;</span>\nmyObject<span class="token punctuation">[</span><span class="token string">&quot;[object Object]&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;baz&quot;</span>\n</code></pre></div><p>如果你试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成 一个数值下标（因此会修改数组的内容而不是添加一个属性）</p><ul><li><p>浅拷贝：复制引用地址<code>Object.assign()（实际是使用=操作符赋值）</code></p></li><li><p>深拷贝：json安全时<code>JSON.parse(JSON.stringify())</code></p></li><li><p>属性描述符：Object.getOwnPropertyDescriptor( myObject, &quot;a&quot; )</p><ul><li>value、writable、enumerable、configurable</li><li>[[Get]]、 [[Put]] <ul><li>[[put]]: <ol><li>属性是否是访问描述符？如果是并且存在 setter 就调用 setter。</li><li>属性的数据描述符中 writable 是否是 false ？如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li><li>如果都不是，将该值设置为属性的值。</li></ol></li></ul></li><li>通过Object.defineProperty()修改属性描述符或其他特性</li></ul></li></ul><blockquote><p><strong>把 configurable 修改成false 是单向操作，无法撤销！</strong></p><blockquote><p>要注意有一个小小的例外：即便属性是 configurable:false，我们还是可以把 writable 的状态由 true 改为 false，但是无法由 false 改为true。除了无法修改，configurable:false 还会禁止删除这个属性（不能使用delete删除属性）</p></blockquote></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {</span>\n<span class="token comment">// value: 2,  //属性描述符</span>\n<span class="token comment">// writable: true,  //属性描述符  可以重新赋值</span>\n<span class="token comment">// enumerable: true,  //属性描述符  可以使用 defineProperty(..) 方法</span>\n<span class="token comment">// configurable: true  //属性描述符</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">var</span> myObject1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 给 a 定义一个 getter</span>\n  <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_a_<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 给 a 定义一个 setter</span>\n  <span class="token keyword">set</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_a_ <span class="token operator">=</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmyObject1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nmyObject1<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>对象常量：结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性（不可修改、重定义或者删除）</li><li>禁止扩展：如果你想禁止一个对象添加新属性并且保留已有属性，可以使用Object.preventExtensions(..)</li><li>密封：Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 configurable:false</li><li>冻结：Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值</li></ol></div><div class="language-js"><pre><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;b&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中（参见第 5 章）。相比之下，hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Object.keys(..) 会返回一个数组，包含所有可枚举属性，Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</p><p>in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链，然而，Object.keys(..)和 Object.getOwnPropertyNames(..) 都只会查找对象直接包含的属性。</p></div><p>for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器（@@iterator 对象）对象的next() 方法来遍历所有返回值</p><h3 id="混合对象”类“"><a class="header-anchor" href="#混合对象”类“" aria-hidden="true">#</a> 混合对象”类“</h3><p>面向类的<code>设计模式</code>：</p><ul><li>实例化：创建实例</li><li>继承：父类、子类</li><li>多态：父类的通用行为可以被子类用更特殊的行为重写。</li></ul><h3 id="原型"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h3><blockquote><ul><li>Object.create(obj)：创建一个对象，并把该对象的[[Prototype]]关联到obj上</li><li>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。</li></ul></blockquote><p>在于原型链上层时 myObject.foo = &quot;bar&quot; 会出现的三种情况:</p><ol><li>如果在 [[Prototype]] 链上层存在名为 foo 的普通数据访问属性并且没有被标记为只读（writable:false），那就会直接在 myObject 中添加一个名为 foo 的新属性，它是<code>屏蔽属性</code>。</li><li>如果在 [[Prototype]] 链上层存在 foo，但是它被标记为只读（writable:false），那么无法修改已有属性或者在 myObject 上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。</li><li>如果在 [[Prototype]] 链上层存在 foo 并且它是一个 setter，那就一定会调用这个 setter。foo 不会被添加到（或者说屏蔽于）myObject，也不会重新定义 foo 这个 setter。</li></ol><blockquote><ul><li><strong><strong>proto</strong>：读作“dunder proto”,就是[[Prototype]], 由一个对象指向一个对象<code>即指向他们的原型对象</code>——终点：null</strong></li><li><strong>prototype：函数独有，由一个函数指向一个对象，是函数的原型对象，即函数所创建的实例的原型对象——终点：Object.prototype</strong></li><li><strong>constructor：一个对象指向一个函数，即指向该对象的构造函数——终点：Function()</strong></li></ul></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> anotherObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> anotherObject <span class="token punctuation">)</span><span class="token punctuation">;</span>\nanotherObject<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 2</span>\nmyObject<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 2146 ｜ 第 5 章</span>\nanotherObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nmyObject<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 隐式屏蔽！</span>\nanotherObject<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 2</span>\nmyObject<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 3</span>\nmyObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 这时Foo是由constructor属性的</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// true</span>\na<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token comment">// 内部链接 [[Prototype]] 关联的是 Foo.prototype 对象</span>\n\n<span class="token comment">// a.__proto__ === Foo.prototype === Object.getPrototypeOf(a)</span>\n<span class="token comment">// a.prototype === undefined</span>\n\n<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* .. */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新原型对象</span>\n<span class="token comment">// 这是Foo是没有constructor属性的</span>\n<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">;</span> <span class="token comment">// false!</span>\na1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span> <span class="token comment">// true!</span>\n</code></pre></div><blockquote><p>函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成“构造函数调用” 实例的.constructor引用被委托给了Foo.prototype，而Foo.prototype.constructor默认指向Foo（Foo声明时的默认属性）</p></blockquote><p><strong>a.constructor === Foo 为真意味着 a 确实有一个指向 Foo 的 .constructor 属性，但是事实不是这样。<code>实际上，.constructor 引用同样被委托给了 Foo.prototype，而Foo.prototype.constructor 默认指向 Foo</code>。举例来说，Foo.prototype 的 .constructor 属性只是 Foo 函数在声明时的默认属性。如果你创建了一个新对象并替换了函数默认的 .prototype 对象引用，那么新对象并不会自动获得 .constructor 属性。constructor 并不表示被构造</strong></p><blockquote><p>a instanceof Foo：在 a 的整条 [[Prototype]] 链中是否有指向 Foo.prototype 的对象？（只能处理对象和函数关系）<strong>使用isPrototypeOf和getPrototypeOf代替</strong> Foo.prototype.isPrototypeOf( a )：在 a 的整条 [[Prototype]] 链中是否出现过 Foo.prototype</p></blockquote><h3 id="行为委托"><a class="header-anchor" href="#行为委托" aria-hidden="true">#</a> 行为委托</h3><div class="language-js"><pre><code><span class="token comment">// 面向对象设计模式</span>\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>me <span class="token operator">=</span> who<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">identify</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;I am &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>me<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> who <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span> <span class="token string">&quot;b1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span> <span class="token string">&quot;b2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb2<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 对象关联设计模式</span>\nFoo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>me <span class="token operator">=</span> who<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">identify</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;I am &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>me<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nBar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Foo <span class="token punctuation">)</span><span class="token punctuation">;</span>\nBar<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Bar <span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span> <span class="token string">&quot;b1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> Bar <span class="token punctuation">)</span><span class="token punctuation">;</span>行为委托 ｜ <span class="token number">171</span>\nb2<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span> <span class="token string">&quot;b2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb2<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="类型和语法"><a class="header-anchor" href="#类型和语法" aria-hidden="true">#</a> 类型和语法</h2><h3 id="类型"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><p>内置类型：</p><ul><li>null - const a = null; (!a &amp;&amp; typeof a === &quot;object&quot;)</li><li>undefined - typeof undefined === &quot;undefined&quot;</li><li>boolean - typeof true === &quot;boolean&quot;</li><li>number - typeof 42 === &quot;number&quot;</li><li>string - typeof &quot;42&quot; === &quot;string&quot;</li><li>object - typeof { lift: 42 } === &quot;object&quot;</li><li>symbol(es6新增) - typeof Symbol() === &quot;symbol&quot;</li></ul><p><strong>可以用<code>typeof</code>查看值的类型</strong></p><p><code>object</code>子类型：</p><ul><li>typeof function a() {} === &quot;function&quot; <strong>a.length是参数个数</strong></li><li>typeof [1, 2, 3] === &quot;object&quot;</li></ul><h3 id="值"><a class="header-anchor" href="#值" aria-hidden="true">#</a> 值</h3><p><ins>数组：</ins></p><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>delete运算符可以删除数组单元，但是会留下空白。即length不变</p></div><p>类数组（一组通过数字索引的值）转换为数组：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// var arr = Array.from(arguments)</span>\n  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;bam&quot;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;baz&quot;, &quot;bar&quot;, &quot;bam&quot;]</span>\n</code></pre></div><hr><p><ins>字符串：</ins></p><p>JavaScript中字符串是不可变的：</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;o&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">;</span>\nb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>\n\na<span class="token punctuation">;</span> <span class="token comment">// &quot;foo&quot;</span>\nb<span class="token punctuation">;</span> <span class="token comment">// [&quot;f&quot;, &quot;O&quot;, &quot;o&quot;]</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>只有成员可变更的值才可以借用方法。比如字符串可以借用数组的map、join方法，但是不可以借用reverse方法，因为reverse方法会改变值成员</p><div class="language-js"><pre><code>a<span class="token punctuation">.</span>join<span class="token punctuation">;</span> <span class="token comment">// undefined</span>\na<span class="token punctuation">.</span>map<span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nc<span class="token punctuation">;</span> <span class="token comment">// &quot;f-o-o&quot;</span>\nd<span class="token punctuation">;</span> <span class="token comment">// &quot;F.O.O.&quot;</span>\n\na<span class="token punctuation">.</span>reverse<span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;!&quot;,&quot;o&quot;,&quot;O&quot;,&quot;f&quot;]</span>\nb<span class="token punctuation">;</span> <span class="token comment">// [&quot;f&quot;,&quot;O&quot;,&quot;o&quot;,&quot;!&quot;]</span>\n\n\n<span class="token keyword">var</span> f <span class="token operator">=</span> a\n <span class="token comment">// 将a的值转换为字符数组</span>\n <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span>\n <span class="token comment">// 将数组中的字符进行倒转</span>\n <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n <span class="token comment">// 将数组中的字符拼接回字符串</span>\n <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nf<span class="token punctuation">;</span> <span class="token comment">// &quot;oof</span>\n</code></pre></div></div><hr><p><ins>数字：</ins></p><div class="language-js"><pre><code><span class="token comment">// 特别大和特别小的数字默认用指数格式显示，与 toExponential() 函数的输出结果相同</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5E10</span><span class="token punctuation">;</span>\na<span class="token punctuation">;</span> <span class="token comment">// 50000000000</span>\na<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5e+10&quot;</span>\n\n<span class="token comment">// tofixed(..) 方法可指定小数部分的显示位数：</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;43&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.6&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.59&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.590&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.5900&quot;</span>\n\n<span class="token comment">// toPrecision(..) 方法用来指定有效数位的显示位数：</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;4e+1&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;43&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.6&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.59&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.590&quot;</span>\na<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.5900&quot;</span>\n\n<span class="token comment">// . 运算符需要给予特别注意，因为它是一个有效的数字字符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符</span>\n<span class="token comment">// 无效语法：</span>\n<span class="token number">42.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError  . 被视为常量 42. 的一部分</span>\n<span class="token comment">// 下面的语法都有效：</span>\n<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.000&quot;</span>\n<span class="token number">0.42</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;0.420&quot;</span>\n<span class="token number">42.</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42.000&quot;</span>\n\n<span class="token comment">// 还可以用指数形式来表示较大的数字</span>\n<span class="token keyword">var</span> onethousand <span class="token operator">=</span> <span class="token number">1E3</span><span class="token punctuation">;</span> <span class="token comment">// 即 1 * 10^3</span>\n<span class="token keyword">var</span> onemilliononehundredthousand <span class="token operator">=</span> <span class="token number">1.1E6</span><span class="token punctuation">;</span> <span class="token comment">// 即 1.1 * 10^6</span>\n\n<span class="token number">0xf3</span><span class="token punctuation">;</span> <span class="token comment">// 243的十六进制          推荐</span>\n<span class="token number">0Xf3</span><span class="token punctuation">;</span> <span class="token comment">// 同上</span>\n<span class="token number">0363</span><span class="token punctuation">;</span> <span class="token comment">// 243的八进制</span>\n<span class="token number">0o363</span><span class="token punctuation">;</span> <span class="token comment">// 243的八进制          推荐</span>\n<span class="token number">0O363</span><span class="token punctuation">;</span> <span class="token comment">// 同上</span>\n<span class="token number">0b11110011</span><span class="token punctuation">;</span> <span class="token comment">// 243的二进制     推荐</span>\n<span class="token number">0B11110011</span><span class="token punctuation">;</span> <span class="token comment">// 同上</span>\n\n<span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.30000000000000004</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 判断 0.1 + 0.2 和 0.3 是否相等，最常见的方法是设置一个误差范围值</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 可以使用 Number.EPSILON 来比较两个数字是否相等（在指定的误差范围内）</span>\n<span class="token keyword">function</span> <span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span>n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span> n1 <span class="token operator">-</span> n2 <span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>\n<span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span> <span class="token number">0.0000001</span><span class="token punctuation">,</span> <span class="token number">0.0000002</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token comment">// 数位运算符 | 只适用于 32 位整数，可以将变量 a 中的数值转换为 32 位有符号整数</span>\na <span class="token operator">|</span> <span class="token number">0</span>\n\n<span class="token comment">// 表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值：</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">void</span> a<span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 42</span>\n\n<span class="token number">Infinity</span><span class="token operator">/</span><span class="token number">Infinity</span>  <span class="token comment">// NaN</span>\n\n<span class="token comment">// 判断两个值是否绝对相等</span>\nObject<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>\n  <span class="token comment">// 然后</span>\n  x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [4,5,6,7]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">;</span> <span class="token comment">// 是[1,2,3,4]，不是[4,5,6,7]</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>向函数传递 a 的时候，实际是将引用 a 的一个复本赋值给 x，而 a 仍然指向 [1,2,3]。在函数中我们可以通过引用 x 来更改数组的值（push(4) 之后变为 [1,2,3,4]）。但 x = [4,5,6] 并不影响 a 的指向，所以 a 仍然指向 [1,2,3,4]</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>\n  <span class="token comment">// 然后</span>\n  x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [4,5,6,7]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">;</span> <span class="token comment">// 是[1,2,3,4]，不是[4,5,6,7]</span>\n</code></pre></div><p>不能通过引用 x 来更改引用 a 的指向，只能更改 a 和 x 共同指向的值。如果要将 a 的值变为 [4,5,6,7]，必须更改 x 指向的数组，而不是为 x 赋值一个新的数组</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>\n  <span class="token comment">// 然后</span>\n  x<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 清空数组</span>\n  x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// [4,5,6,7]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">;</span> <span class="token comment">// 是[4,5,6,7]，不是[1,2,3,4]</span>\n</code></pre></div><p>原因是标量基本类型值是不可更改的（字符串和布尔也是如此）。如果一个数字对象的标量基本类型值是 2，那么该值就不能更改，除非创建一个包含新值的数字对象。</p><p>x = x + 1 中，x 中的标量基本类型值 2 从数字对象中拆封（或者提取）出来后，x 就神不知鬼不觉地从引用变成了数字对象，它的值为 2 + 1 等于 3。然而函数外的 b 仍然指向原来那个值为 2 的数字对象。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// 3 </span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object(a)也一样</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是2，不是3</span>\n</code></pre></div></div><h3 id="原生函数（内置函数）"><a class="header-anchor" href="#原生函数（内置函数）" aria-hidden="true">#</a> 原生函数（内置函数）</h3><p>原生函数：</p><ul><li>String()</li><li>Number()</li><li>Boolean()</li><li>Array()</li><li>Object()</li><li>Function()</li><li>RegExp()</li><li>Date()</li><li>Error()</li><li>Symbol()</li></ul><div class="warning custom-block"><p class="custom-block-title">提醒</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// 是&quot;object&quot;，不是&quot;String&quot;</span>\na <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object String]&quot;</span>\n</code></pre></div><p><strong>typeof 在这里返回的是对象类型的子类型。</strong></p></div><p>所有 typeof 返回值为 &quot;object&quot; 的对象（如数组）都包含一个内部属性 [[Class]]（可以把它看作一个内部的分类，而非传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。</p><div class="language-js"><pre><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object Array]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex-literal</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object RegExp]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object Null]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object Undefined]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object String]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object Number]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[object Boolean]&quot;</span>\n</code></pre></div><p>如果想要自行封装基本类型值，可以使用 Object(..) 函数（不带 new 关键字）：</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>\n<span class="token keyword">typeof</span> b<span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>\n<span class="token keyword">typeof</span> c<span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>\n\nb <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nc <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object String]&quot;</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object String]&quot;</span>\n</code></pre></div><p>如果想要得到封装对象中的基本类型值，可以使用 valueOf() 函数：</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\na<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;abc&quot;</span>\nb<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\nc<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// 在需要用到封装对象中的基本类型值的地方会发生隐式拆封。</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// b的值为&quot;abc&quot;</span>\n\n<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>\n<span class="token keyword">typeof</span> b<span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>\n</code></pre></div><p><strong><code>Symnol</code>可以用作属性名，但无论是在代码还是开发控制台中都无法查看和访问它的值，符号可以用作属性名，但无论是在代码还是开发控制台中都无法查看和访问它的值</strong></p><div class="language-js"><pre><code><span class="token comment">// Function.prototype 是一个函数，RegExp.prototype 是一个正则表达式，而 Array.prototype 是一个数组。</span>\n<span class="token keyword">typeof</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// &quot;function&quot;</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">prototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空函数！</span>\n\n<span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;/(?:)/&quot;——空正则表达式</span>\n<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&quot;]</span>\n\n<span class="token keyword">function</span> <span class="token function">isThisCool</span><span class="token punctuation">(</span>vals <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> fn <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> rx <span class="token operator">=</span> <span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> rx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>\n    vals<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> fn <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token function">isThisCool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true原生函数 ｜ 45</span>\n<span class="token function">isThisCool</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">D</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="强制类型转换"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><p>ToString:</p><p>对普通对象来说，除非自行定义，否则 toString()（Object.prototype.toString()）返回 内部属性 [[Class]] 的值，如 &quot;[object Object]&quot;。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值，数组的 toString()。</p><p><strong>JSON.stringify(..) 在将 JSON 对象序列化为字符串时也用到了 ToString</strong></p><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>对大多数简单值来说，JSON 字符串化和 toString() 的效果基本相同，只不过序列化的结 果总是字符串：</p><div class="language-js"><pre><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token string">&quot;42&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;\\&quot;42\\&quot;&quot; （含有双引号的字符串）</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>\n</code></pre></div></div><ul><li>安全的JSON值 - 指能够呈现为有效JSON的值，可使用JSON.stringify()字符串化</li><li>不安全的JSON值 - undefined、function、symbol、对象循环引用（对象相互引用，形成无限循环）</li></ul><div class="language-js"><pre><code><span class="token comment">// JSON.stringify(..) 在对象中遇到 undefined、function 和 symbol 时会自动将其忽略，在数组中则会返回 null（以保证单元位置不变）</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[1,null,null,4]&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function-variable function">b</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;{&quot;a&quot;:2}&quot;</span>\n<span class="token comment">// 对包含循环引用的对象执行 JSON.stringify(..) 会出错。</span>\n\n<span class="token comment">// 如果对象中定义了 toJSON() 方法，JSON 字符串化时会首先调用该方法，然后用它的返回值来进行序列化。</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> \n  b<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> o<span class="token punctuation">,</span>\n  <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 在a中创建一个循环引用</span>\no<span class="token punctuation">.</span>e <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token comment">// 循环引用在这里会产生错误</span>\n<span class="token comment">// JSON.stringify( a );</span>\n<span class="token comment">// 自定义的JSON序列化</span>\na<span class="token punctuation">.</span><span class="token function-variable function">toJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 序列化仅包含b</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;{&quot;b&quot;:42}&quot;</span>\n\n<span class="token comment">// toJSON() 返回的应该是一个适当的值，可以是任何类型，然后再由 JSON.stringify(..) 对其进行字符串化。</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  val<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 可能是我们想要的结果！</span>\n  <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  val<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 可能不是我们想要的结果！</span>\n  <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[2,3]&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;[2,3]&quot;&quot;</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>可以向 JSON.stringify(..) 传递一个可选参数 replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性应该被处理，哪些应该被排除，和 toJSON() 很像。如果 replacer 是一个数组，那么它必须是一个字符串数组，其中包含序列化要处理的对象的属性名称，除此之外其他的属性则被忽略。如果 replacer 是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。如果要忽略某个键就返回 undefined，否则返回指定的值。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> \n  b<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  c<span class="token operator">:</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">,</span>\n  d<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;{&quot;b&quot;:42,&quot;c&quot;:&quot;42&quot;}&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!==</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;{&quot;b&quot;:42,&quot;d&quot;:[1,2,3]}&quot;</span>\n</code></pre></div><p><strong>如果 replacer 是函数，它的参数 k 在第一次调用时为 undefined（就是对对象本身调用的那次）。if 语句将属性 &quot;c&quot; 排除掉。由于字符串化是递归的，因此数组 [1,2,3] 中的每个元素都会通过参数 v 传递给 replacer，即 1、2 和 3，参数 k 是它们的索引值，即 0、1 和 2。</strong></p></div><p>JSON.string 还有一个可选参数 space，用来指定输出的缩进格式。space 为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进</p><hr><p>ToNumber:</p><p>true 转换为 1，false 转换为 0。undefined 转换为 NaN，null 转换为 0。</p><p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p><p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue 节）检查该值是否有 valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString()的返回值（如果存在）来进行强制类型转换。如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误(返回 NaN)。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nc<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n</code></pre></div><hr><p>ToBoolean:</p><ul><li>假值 <ul><li>undefined</li><li>null</li><li>false</li><li>+0、-0、NaN</li><li>&quot;&quot;</li></ul></li><li>真值：假值之外都是真值</li></ul><p>字符串和数字之间的转换是通过 String(..) 和 Number(..) 这两个内建函数（原生构造函 数，参见第 3 章）来实现的，请注意它们前面没有 new 关键字，并不创建封装对象。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">&quot;3.14&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>\nb<span class="token punctuation">;</span> <span class="token comment">// &quot;42&quot;</span>\nd<span class="token punctuation">;</span> <span class="token comment">// 3.14</span>\n</code></pre></div><p>位运算符：只适用32位整数，运算符强制操作数使用32位格式。这是通过抽象操作 ToInt32 来实现的。ToInt32 首先执行 ToNumber 强制类型转换，比如 &quot;123&quot; 会先被转换为 123，然后再执行ToInt32。</p><p><code>|（或）</code>：空操作（no-op）0 | x，它仅执行 ToInt32 转换。</p><div class="language-js"><pre><code><span class="token number">0</span> <span class="token operator">|</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token number">0</span> <span class="token operator">|</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token number">0</span> <span class="token operator">|</span> <span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token number">0</span> <span class="token operator">|</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token comment">// 以上这些特殊数字无法以 32 位格式呈现（因为它们来自 64 位 IEEE 754 标准），因此 ToInt32 返回 0。</span>\n</code></pre></div><p><code>~（非）</code>：首先将值强制类型转换为 32 位数字，然后执行字位操作“非”（对每一个字位进行反转）- 返回 2 的补码。</p><div class="language-js"><pre><code><span class="token comment">// ~x 大致等同于 -(x+1)</span>\n<span class="token operator">~</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// -(42+1) ==&gt; -43</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>-(x+1) 中唯一能够得到 0（或者严格说是 -0）的 x 值是 -1。-1 是一个“哨位值”：1 来代表函数执行失败，用大于等于 0 的值来代表函数执行成功。JavaScript 中字符串的 indexOf(..) 方法也遵循这一惯例</p><p><strong>字位操作是没有-0的，只有0。比如~-1 === 0，而不是-0</strong></p><div class="language-js"><pre><code><span class="token comment">// ~~x 能将值截除为一个 32 位整数，x | 0 也可以，而且看起来还更简洁。</span>\nMath<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">49.6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -50</span>\n<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">49.6</span><span class="token punctuation">;</span> <span class="token comment">// -49</span>\n<span class="token comment">// 出于对运算符优先级的考虑，我们可能更倾向于使用 ~~x：</span>\n</code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><div class="language-js"><pre><code><span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>\n</code></pre></div><ul><li>1/0 === Infinity</li><li>parseInt(..)先将参数强制类型转换为字符串再进行解析（toString(..)） === &#39;Infinity&#39;</li><li>基数 19，有效数字字符范围是 0-9 和 a-i（区分大小写）- &#39;i&#39; === 18</li><li>第二个字符 &quot;n&quot; 不是一个有效的数字字符，解析到此为止。</li></ul><div class="language-js"><pre><code><span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token string">&#39;i1&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18*19+1</span>\n\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token number">0.000008</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 (&quot;0&quot; 来自于 &quot;0.000008&quot;)</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token number">0.0000008</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 (&quot;8&quot; 来自于 &quot;8e-7&quot;)</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 250 (&quot;fa&quot; 来自于 &quot;false&quot;)</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> parseInt<span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15 (&quot;f&quot; 来自于 &quot;function..&quot;)</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token string">&quot;0x10&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token string">&quot;103&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre></div></div><p>与 + 类似，一元运算符 ! 显式地将值强制类型转换为布尔值</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> \n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/*..*/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/*..*/</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[1,null,2,null]&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 函数的ToBoolean强制类型转换</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &quot;[1,true,2,true]&quot;</span>\n</code></pre></div><p>如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// &quot;1,23,4&quot;</span>\n</code></pre></div><p>这与 ToNumber 抽象操作处理对象的方式一样。因为数组的valueOf() 操作无法得到简单基本类型值，于是它转而调用 toString()。因此上例中的两个数组变成了 &quot;1,2&quot; 和 &quot;3,4&quot;。+ 将它们拼接后返回 &quot;1,23,4&quot;。</p><p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤可以得到字符串），则执行字符串拼接；否则执行数字加法。</p><p>根据ToPrimitive 抽象操作规则，a + &quot;&quot; 会对 a 调用 valueOf() 方法，然后通过 ToString 抽象操作将返回值转换为字符串。而 String(a) 则是直接调用 ToString()。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\na <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;42&quot;</span>\n<span class="token function">String</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;4&quot;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\na <span class="token operator">&amp;&amp;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>if (a) { foo(); }可以使用 a &amp;&amp; foo() 代替</p><div class="language-js"><pre><code><span class="token comment">// ES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。</span>\n<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span> <span class="token string">&quot;cool&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">String</span><span class="token punctuation">(</span> s1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Symbol(cool)&quot;</span>\ns1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span> s1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\ns1 <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(cool)</span>\n<span class="token function">Number</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeErrorc</span>\n<span class="token operator">+</span>s1<span class="token punctuation">;</span> <span class="token comment">// TypeErrorc</span>\n<span class="token comment">// 符号不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果都是 true）</span>\n</code></pre></div></div><blockquote><p><strong>“== 检查值是否相等，=== 检查值和类型是否相等”不够准确，正确的解释：== 允许在相等比较中进行强制类型转换，而 === 不允许。</strong></p></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span>\na <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span>\na <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><blockquote><p>== (string)</p><blockquote><ul><li>如果 Type(x) 是数字，Type(y) 是字符串，则返回 x == ToNumber(y) 的结果</li><li>如果 Type(x) 是字符串，Type(y) 是数字，则返回 ToNumber(x) == y 的结果</li></ul></blockquote></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\na <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token comment">// &quot;42&quot; == 1 &gt; 42 == 1</span>\n</code></pre></div><blockquote><p>== (boolean)</p><blockquote><ul><li>如果 Type(x) 是布尔类型，则返回 ToNumber(x) == y 的结果</li><li>如果 Type(y) 是布尔类型，则返回 x == ToNumber(y) 的结果</li></ul></blockquote></blockquote><blockquote><p>== (null、undefined)</p><blockquote><p>在 == 中 null 和 undefined 相等（它们也与其自身相等）</p><ul><li>如果 x 为 null，y 为 undefined，则结果为 true</li><li>如果 x 为 undefined，y 为 null，则结果为 true</li></ul></blockquote></blockquote><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">42</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\na <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><blockquote><p>== (object)</p><blockquote><p>在 == 中 null 和 undefined 相等（它们也与其自身相等），</p><ul><li>如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == ToPrimitive(y) 的结果</li><li>如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 ToPromitive(x) == y 的结果</li></ul></blockquote></blockquote><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这里只提到了字符串和数字，没有布尔值。原因是布尔值会先被强制类型转换为数字</p><p>[ 42 ] 首先调用 ToPromitive 抽象操作，返回 &quot;42&quot;，变成 &quot;42&quot; == 42，然后又变成 42 == 42，最后二者相等。</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// []</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// &quot;&quot;</span>\n<span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// {}</span>\n<span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>\n\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// false</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment">// SynyaxError</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment">// &quot;[object Object]&quot;  &quot;[object Object]&quot; + &quot;&quot;</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 0  独立空代码块 + &#39;&#39; -&gt; 独立空代码块 + 0</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和new String( a )一样</span>\na <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span>\na <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和Object()一样</span>\nc <span class="token operator">==</span> d<span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和Object()一样</span>\ne <span class="token operator">==</span> f<span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span> g <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和new Number( e )一样</span>\ng <span class="token operator">==</span> h<span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token comment">// 因为没有对应的封装对象，所以 null 和 undefined 不能够被封装（boxed），Object(null)和 Object() 均返回一个常规对象。NaN 能够被封装为数字封装对象，但拆封之后 NaN == NaN 返回 false，因为 NaN 不等于 NaN</span>\n\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true -- 晕！</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// true</span>\n<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true  &quot;&quot;、&quot;\\n&quot;（或者 &quot; &quot; 等其他空格组合）等空字符串被 ToNumber 强制类型转换为 0。</span>\n</code></pre></div></div><hr><blockquote><p>其他情况</p><blockquote><ul><li>比较双方首先调用 ToPrimitive，如果结果出现非字符串，就根据 ToNumber 规则将双方强制类型转换为数字来进行比较。</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">42</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;43&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\na <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>\nb <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><ul><li>如果比较双方都是字符串，则按字母顺序来进行比较</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">42</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;043&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\nb <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token comment">// a 和 b 并没有被转换为数字，因为 ToPrimitive 返回的是字符串，所以这里比较的是 &quot;42&quot; 和 &quot;043&quot; 两个字符串，它们分别以 &quot;4&quot; 和 &quot;0&quot; 开头。因为 &quot;0&quot; 在字母顺序上小于 &quot;4&quot;，所以最后结果为 false。</span>\n</code></pre></div><ul><li>特例</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">43</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token comment">// false NaN &lt; NaN</span>\na <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// false NaN == NaN</span>\na <span class="token operator">&gt;</span> b<span class="token punctuation">;</span> <span class="token comment">// false NaN &gt; NaN</span>\na <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> <span class="token comment">// true !(a &gt; b)</span>\na <span class="token operator">&gt;=</span> b<span class="token punctuation">;</span> <span class="token comment">// true !(a &lt; b)</span>\n<span class="token comment">// a 和 b 并没有被转换为数字，因为 ToPrimitive 返回的是字符串，所以这里比较的是 &quot;42&quot; 和 &quot;043&quot; 两个字符串，它们分别以 &quot;4&quot; 和 &quot;0&quot; 开头。因为 &quot;0&quot; 在字母顺序上小于 &quot;4&quot;，所以最后结果为 false。</span>\n<span class="token comment">// 实际上 JavaScript 中 &lt;= 是“不大于”的意思（即 !(a &gt; b)，处理为 !(b &lt; a)）。同理 a &gt;= b 处理为 b &lt;= a。</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">42</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;043&quot;</span><span class="token punctuation">;</span>\na <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token comment">// false -- 字符串比较！ &quot;42&quot; &lt; &quot;042&quot;</span>\n<span class="token function">Number</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">Number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true -- 数字比较！ 42 &lt; 43</span>\n</code></pre></div></blockquote><p>比较双方都是字符串</p><blockquote><p>避免 a &lt; b 中发生隐式强制类型转换，只能确保 a 和 b 为相同的类型</p></blockquote></blockquote><h3 id="语法"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><ul><li>语句（statement）相当于句子 - 语句都有一个<code>结果值</code>(只有控制台可以获得，代码中无法获得)</li><li>表达式（expression）相当于短语</li></ul><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 声明语句</span>\nb <span class="token operator">=</span> a<span class="token punctuation">;</span>         <span class="token comment">// 赋值表达式</span>\nb<span class="token punctuation">;</span>             <span class="token comment">// 表达式语句</span>\n<span class="token comment">// var 的结果值为undefined</span>\n<span class="token comment">// {...} 的结果值为 其最后一个语句 / 表达式的结果</span>\n\n<span class="token comment">// 下面这样的代码无法运行</span>\n<span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>\na <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  b <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 因为语法不允许我们获得语句的结果值并将其赋值给另一个变量</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// === var b = (a++);</span>\na<span class="token punctuation">;</span> <span class="token comment">// 43</span>\nb<span class="token punctuation">;</span> <span class="token comment">// 42</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> b<span class="token punctuation">;</span>\nb <span class="token operator">=</span> <span class="token punctuation">(</span> a<span class="token operator">++</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">;</span> <span class="token comment">// 43</span>\nb<span class="token punctuation">;</span> <span class="token comment">// 43</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">42</span>  <span class="token comment">// 创建全局变量b</span>\n\n<span class="token keyword">function</span> <span class="token function">vowels</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> matches<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 提取所有元音字母</span>\n      matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[aeiou]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> matches<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">vowels</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;e&quot;,&quot;o&quot;,&quot;o&quot;]</span>\n<span class="token comment">// 利用赋值语句的副作用将两个 if 语句合二为一</span>\n<span class="token keyword">function</span> <span class="token function">vowels</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> matches<span class="token punctuation">;</span>\n  <span class="token comment">// 提取所有元音字母</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[aeiou]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> matches<span class="token punctuation">;</span>语法 ｜ <span class="token number">99</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">vowels</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;e&quot;,&quot;o&quot;,&quot;o&quot;]</span>\n</code></pre></div><p>标签语句：</p><div class="language-js"><pre><code><span class="token comment">// 标签为foo的循环</span>\nfoo<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果j和i相等，继续外层循环</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 跳转到foo的下一个循环</span>\n      <span class="token keyword">continue</span> foo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 跳过奇数结果</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 继续内层循环（没有标签的）</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i<span class="token punctuation">,</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 1 0</span>\n<span class="token comment">// 2 0</span>\n<span class="token comment">// 2 1</span>\n<span class="token comment">// 3 0</span>\n<span class="token comment">// 3 2</span>\n</code></pre></div><p>带标签的循环跳转一个更大的用处在于，和 break __ 一起使用可以实现从内层循环跳转到外层循环。没有它们的话实现起来有时会非常麻烦：</p><div class="language-js"><pre><code><span class="token comment">// 标签为foo的循环</span>\nfoo<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;stopping!&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span> foo<span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i<span class="token punctuation">,</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 0 0</span>\n<span class="token comment">// 0 1</span>\n<span class="token comment">// 0 2</span>\n<span class="token comment">// 0 3</span>\n<span class="token comment">// 1 0</span>\n<span class="token comment">// 1 1</span>\n<span class="token comment">// 1 2</span>\n<span class="token comment">// 停止！ 1 3</span>\n</code></pre></div><p>标签也能用于非循环代码块，但只有 break 才可以。我们可以对带标签的代码块使用break ___，但是不能对带标签的非循环代码块使用 continue ___，也不能对不带标签的代码块使用 break：</p><div class="language-js"><pre><code><span class="token comment">// 标签为bar的代码块</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  bar<span class="token operator">:</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span> bar<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;never runs&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hello</span>\n<span class="token comment">// World</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>标签不允许使用双引号，如控制台中输入 {&quot;a&quot;:42} 会报错</p><p>JSON 的确是 JavaScript 语法的一个子集，但是 JSON 本身并不是合法的 JavaScript 语法。</p><p>JSON-P 能将 JSON 转换为合法的JavaScript 语法。JSON-P（将 JSON 数据封装为函数调用，比如 foo({&quot;a&quot;:42})）通过将 JSON 数据传递给函数来实现对其的访问</p><p><strong>解构：{ a, b } 实际上是 { a: a, b: b } 的简化版本</strong></p><p>&amp;&amp; 运算符先于 || 执行</p></div><div class="language-js"><pre><code><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// &amp;&amp;、|| &gt; ?: &gt; =</span>\na <span class="token operator">?</span> b <span class="token operator">:</span> c <span class="token operator">?</span> d <span class="token operator">:</span> e<span class="token punctuation">;</span>  <span class="token comment">//  a ? b : (c ? d : e)  ? : 是右关联</span>\n\na <span class="token operator">&amp;&amp;</span> b <span class="token operator">||</span> c <span class="token operator">?</span> c <span class="token operator">||</span> b <span class="token operator">?</span> a <span class="token operator">:</span> c <span class="token operator">&amp;&amp;</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span>  <span class="token comment">// ((a &amp;&amp; b) || c) ? ((c || b) ? a : (c &amp;&amp; b)) : a</span>\n</code></pre></div><p>如果参数被<code>省略</code>或者值为 <code>undefined</code>，则取该参数的默认值：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 43</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 43</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 6</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 7</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null 1  null 被强制类型转换为 0</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 42 43 undefined undefined</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 10 11 10 undefined</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 10 11 10 undefined</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 10 null 10 null</span>\n</code></pre></div><p>finally 中的代码总是会在 try 之后执行，如果有 catch 的话则在 catch 之后执行。也可以将 finally 中的代码看作一个回调函数，即无论出现什么情况最后一定会被调用。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;never runs&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hello</span>\n<span class="token comment">// 42</span>\n\n<span class="token comment">// 这里 return 42 先执行，并将 foo() 函数的返回值设置为 42。然后 try 执行完毕，接着执行 finally。最后 foo() 函数执行完毕，console.log(..) 显示返回值。</span>\n\n<span class="token comment">// try 中的 throw 也是如此：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token number">42</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;never runs&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hello</span>\n<span class="token comment">// Uncaught Exception: 42</span>\n\n<span class="token comment">// 如果 finally 中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前 try 中已经有 return 设置了返回值，则该值会被丢弃：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token string">&quot;Oops!&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;never runs&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Uncaught Exception: Oops!</span>\n\n<span class="token comment">// continue 和 break 等控制语句也是如此：</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">try</span> <span class="token punctuation">{</span>\n <span class="token keyword">continue</span><span class="token punctuation">;</span> \n <span class="token punctuation">}</span>\n <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 0 1 2 3 4 5 6 7 8 9</span>\n<span class="token comment">// continue 在每次循环之后，会在 i++ 执行之前执行 console.log(i)，所以结果是 0..9 而非1..10。</span>\n\n<span class="token comment">// finally 中的 return 会覆盖 try 和 catch 中 return 的返回值：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 没有返回语句，所以没有覆盖</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 覆盖前面的 return 42</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n  <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 覆盖前面的 return 42</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  bar<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n    <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 跳出标签为bar的代码块</span>\n      <span class="token keyword">break</span> bar<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Crazy&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">120</span> ｜ 第 <span class="token number">5</span> 章\n  <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Crazy</span>\n<span class="token comment">// Hello</span>\n</code></pre></div><ul><li>window.escape(..) 和 window.unescape(..) 让你能够转义（escape）和回转（unescape）带有 % 分隔符的十六进制字符串。例如，window.escape( &quot;? foo=97%&amp;bar=3%&quot; ) 的结果为 &quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;。</li><li>String.prototype.substr 和 String.prototype.substring 十分相似，除了前者的第二个参数是结束位置索引（非自包含），后者的第二个参数是长度（需要包含的字符数）。</li><li>RegExp.$1 .. RegExp.$9（匹配组）和 RegExp.lastMatch/RegExp[&quot;$&amp;&quot;]（最近匹配）</li><li>由于浏览器演进的历史遗留问题，在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量。</li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;foo&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">==</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n foo <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 永远也不会运行</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HTML元素</span>\n\n<span class="token comment">// shim/polyfill</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>foobar<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 幼稚</span>\n  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">foobar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 问题在于一些标准功能无法被完整地 polyfill/prollyfill</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">addAll</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>\n<span class="token function">addAll</span><span class="token punctuation">(</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000 arguments.length===1  arguments[0]===1000  arguments[1]===undefined</span>\n<span class="token function">addAll</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">null</span><span class="token punctuation">,</span> nums <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该是: 499950000</span>\n</code></pre></div><h2 id="异步和性能"><a class="header-anchor" href="#异步和性能" aria-hidden="true">#</a> 异步和性能</h2><h3 id="异步：现在与将来"><a class="header-anchor" href="#异步：现在与将来" aria-hidden="true">#</a> 异步：现在与将来</h3><ul><li>举例：</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">21</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  answer <span class="token operator">=</span> answer <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Meaning of life:&quot;</span><span class="token punctuation">,</span> answer <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span> later<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Meaning of life: 42</span>\n</code></pre></div><ul><li>现在：</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">21</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span> later<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>现在：</li></ul><div class="language-js"><pre><code>answer <span class="token operator">=</span> answer <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Meaning of life:&quot;</span><span class="token punctuation">,</span> answer <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>现在这一块在程序运行之后就会立即执行。但是，setTimeout(..) 还设置了一个事件（定时）在将来执行，所以函数 later() 的内容会在之后的某个时间（从现在起 1000 毫秒之后）执行</p><p><code>事件循环</code>：JavaScript 引擎（在给定的任意时刻执行程序中的单个代码块）运行在宿主环境中（Web 浏览器、Node等），所有这些环境都有线程，即它们都提供了一种机制来处理程序中多个块的执行，且执行每块时调用 JavaScript 引擎，这种机制被称为事件循环</p><div class="language-js"><pre><code><span class="token comment">// 事件循环伪代码</span>\n<span class="token comment">// eventLoop是一个用作队列的数组</span>\n<span class="token comment">// （先进，先出）</span>\n<span class="token keyword">var</span> eventLoop <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> event<span class="token punctuation">;</span>\n<span class="token comment">// “永远”执行</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 一次tick</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventLoop<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 拿到队列中的下一个事件</span>\n    event <span class="token operator">=</span> eventLoop<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 现在，执行下一个事件</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">reportError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对每个 tick 而言，如果在队列中有等待事件，那么就会从队列中摘下一个事件并执行。这些事件就是你的回调函数。</p><p>一定要清楚，setTimeout(..) 并没有把你的回调函数挂在事件循环队列中。它所做的是设定一个定时器。当定时器到时后，环境会把你的回调函数放在事件循环中，这样，在未来某个时刻的 tick 会摘下并执行这个回调。如果这时候事件循环中已经有 20 个项目了会怎样呢？你的回调就会等待。它得排在其他项目后面。只能确保你的回调函数不会在指定的 时间间隔之前运行，但可能会在那个时刻运行，也可能在那之后运行，要根据事件队列的状态而定。</p><ul><li>异步：现在和将来的时间间隙</li><li>并行：能够同时发生的事情 <ul><li>并行计算工具：进程和线程 - 进程和线程独立运行，并可能同时运行：在不同的处理器，甚至不同的计算机上，但多个线程能够共享单个进程的内存。</li></ul></li></ul><p>与之相对的是，事件循环把自身的工作分成一个个任务并顺序执行，不允许对共享内存的并行访问和修改。通过分立线程中彼此合作的事件循环，并行和顺序执行可以共存。</p><p>在单线程环境中，线程队列中的项目是底层运算确实是无所谓的，因为线程本身不会被中断。但如果是在并行系统中，同一个程序中可能有两个不同的线程在运转，这时很可能就会得到不确定的结果（因为两个线程并行执行可能会共享内存地址）。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">,</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span><span class="token punctuation">,</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>JavaScript 从不跨线程共享数据，这意味着不需要考虑这一层次的不确定性。但是这并不意味着JavaScript 总是确定性的。比如两个函数的相对顺序改变可能会导致不同结果（改变同一个全局变量）</p><p>由于 JavaScript 的单线程特性，foo()（以及 bar()）中的代码具有<code>原子性</code>。也就是说，一旦 foo() 开始运行，它的所有代码都会在 bar() 中的任意代码运行之前完成，或者相反。这称为<code>完整运行</code>（run-to-completion）特性。</p><p>由于 foo() 不会被 bar() 中断，bar() 也不会被 foo() 中断，所以这个程序只有两个可能的输出，取决于这两个函数哪个先运行——如果存在多线程(也就是说，它们的运行在时间上是分隔的)，且 foo() 和 bar() 中的语句可以交替运行的话，可能输出的数目将会增加不少！</p><p>这种不确定性是在函数（事件）顺序级别上，而不是多线程情况下的语句顺序级别（或者说，表达式运算顺序级别）。换句话说，这一确定性要高于多线程情况。</p><p>让我们来设想一个展示状态更新列表（比如社交网络新闻种子）的网站，其随着用户向下滚动列表而逐渐加载更多内容。要正确地实现这一特性，需要（至少）两个独立的“进程”同时运行（也就是说，是在同一段时间内，并不需要在同一时刻）。</p><p>两个或多个“进程”同时执行就出现了并发，不管组成它们的单个运算是否并行执行（在独立的处理器或处理器核心上同时运行）。可以把并发看作“进程”级（或者任务级）的并行，与运算级的并行（不同处理器上的线程）相对。</p><table><thead><tr><th>假设这些事件的时间线是这样的</th><th>下面列出了事件循环队列中所有这些交替的事件</th></tr></thead><tbody><tr><td><div class="language-md"><pre><code>onscroll, 请求1\nonscroll, 请求2 响应1\nonscroll, 请求3 响应2\n响应3\nonscroll, 请求4\nonscroll, 请求5\nonscroll, 请求6 响应4\n响应6\n响应5\n响应7\n\n\n\n\n</code></pre></div></td><td><div class="language-md"><pre><code>onscroll, 请求1 &lt;--- 进程1启动\nonscroll, 请求2\n响应1 &lt;--- 进程2启动\nonscroll, 请求3\n响应2\n响应3\nonscroll, 请求4\nonscroll, 请求5\nonscroll, 请求6\n响应4\nonscroll, 请求7 &lt;--- 进程1结束\n响应6\n响应5\n响应7 &lt;--- 进程2结束\n</code></pre></div></td></tr></tbody></table><p>JavaScript 一次只能处理一个事件，所以要么是onscroll，请求 2 先发生，要么是响应 1 先发生，但是不会严格地同时发生。这就像学校食堂的孩子们，不管在门外多么拥挤，最终他们都得站成一队才能拿到自己的午饭。</p><p>“进程”1 和“进程”2 并发运行（任务级并行），但是它们的各个事件是在事件循环队列中依次运行的。</p><blockquote><p>并发形式</p><blockquote><ul><li>事件循环</li><li>并发协作：取到一个长期运行的“进程”，并将其分割成多个步骤或多批任务，使得其他并发“进程”有机会将自己的运算插入到事件循环队列中交替运行(是指两个或多个事件链随时间发展交替执行，以至于从更高的层次来看，就像是同时在运行（尽管在任意时刻只处理一个事件）。)</li></ul></blockquote></blockquote><ul><li>任务队列</li></ul><p>它是挂在事件循环队列的每个 tick 之后的一个队列。在事件循环的每个 tick 中，可能出现的异步动作不会导致一个完整的新事件添加到事件循环队列中，而会在当前 tick 的任务队列末尾添加一个项目（一个任务）</p><p>这就像是在说：“哦，这里还有一件事将来要做，但要确保在其他任何事情发生之前就完成它。”</p><p>事件循环队列类似于一个游乐园游戏：玩过了一个游戏之后，你需要重新到队尾排队才能再玩一次。而任务队列类似于玩过了游戏之后，插队接着继续玩。</p><p>用 setTimeout(..0)（hack）进行异步调度，基本上它的意思就是“把这个函数插入到当前事件循环队列的结尾处”</p><p>任务和 setTimeout(..0) hack 的思路类似，但是其实现方式的定义更加良好，对顺序的保证性更强：尽可能早的将来。</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;B&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 理论上的&quot;任务API&quot; </span>\n<span class="token function">schedule</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token function">schedule</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;D&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// A C D B</span>\n<span class="token comment">// 因为任务处理是在当前事件循环 tick 结尾处，且定时器触发是为了调度下一个事件循环 tick（如果可用的话！）</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> \na <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> \na <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><p>JavaScript 引擎在编译这段代码之后（是的，JavaScript 是需要编译的，参见<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85">作用域和闭包</a>！）可能会发现通过（安全地）重新安排这些语句的顺序有可能提高执行速度。重点是，只要这个重新排序是不可见的，一切都没问题。</p><div class="language-js"><pre><code><span class="token comment">// 比如，引擎可能会发现，其实这样执行会更快：</span>\n<span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> \na <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> \na<span class="token operator">++</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> \nb<span class="token operator">++</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n\n<span class="token comment">// 或者这样：</span>\n<span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> \na <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n\n<span class="token comment">// 或者甚至这样：</span>\n<span class="token comment">// 因为a和b不会被再次使用</span>\n<span class="token comment">// 我们可以inline，从而完全不需要它们！</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n\n<span class="token comment">// 前面的所有情况中，JavaScript 引擎在编译期间执行的都是安全的优化，最后可见的结果都是一样的。但是这里有一种场景，其中特定的优化是不安全的，因此也是不允许的（当然，不用说这其实也根本不能称为优化）：</span>\n<span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> \na <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> \n<span class="token comment">// 我们需要a和b处于递增之前的状态！</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">*</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300 </span>\na <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre></div><p>代码编写的方式（从上到下的模式）和编译后执行的方式之间的联系非常脆弱，理解这一点也非常重要。</p><h3 id="回调"><a class="header-anchor" href="#回调" aria-hidden="true">#</a> 回调</h3><p><a href="/quotations/">顺序的大脑</a></p><p>回调地狱(毁灭金字塔)：</p><p>回调地狱问题：</p><ul><li>嵌套</li><li>缩进</li><li>缺乏顺序性：大脑对于事情的计划方式是线性的、阻塞的、单线程的语义，但是回调表达异步流程的方式是非线性的、非顺序的，这使得正确推导这样的代码难度很大。难于理解的代码是坏代码，会导致坏 bug（异步回调运行顺序很难判断）--generator解决</li><li>缺乏可信任性：回调会受到控制反转的影响（因为回调暗中把控制权交给第三方（通常是不受你控制的第三方工具！）来调用你代码中的 continuation（回调）。这种控制转移导致一系列麻烦的信任问题，比如回调被调用的次数是否会超出预期）--Promise解决</li></ul><div class="language-js"><pre><code><span class="token function">listen</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>例子中的步骤是按照 1、2、3、4……的顺序，这只是一个偶然。实际的异步JavaScript 程序中总是有很多噪声，使得代码更加杂乱。在大脑的演习中，我们需要熟练地绕过这些噪声，从一个函数跳到下一个函数。对于这样满是回调的代码，理解其中的异步流不是不可能，但肯定不自然，也不容易，即使经过大量的练习也是如此。</li></ul><div class="language-js"><pre><code><span class="token function">doA</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 回调 ｜ <span class="token number">167</span>\n  <span class="token function">doC</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">doD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n  <span class="token function">doE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">doF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>如果 doA(..) 或 doD(..) 是异步执行：A → F → B → C → E → D 如果 doA(..) 或 doD(..) 是同步执行：A → B → C → D → E → F</p><blockquote><p>回调导致跟踪异步流如此之难</p></blockquote><ul><li>我们的顺序阻塞式的大脑计划行为无法很好地映射到面向回调的异步代码。这就是回调方式最主要的缺陷：对于它们在代码中表达异步的方式，我们的大脑需要努力才能同步得上。</li></ul><h3 id="promise"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h3><p>不足用p instanceof Promise 以作为检查方法，原因有许多。其中最主要的是，Promise 值可能是从其他浏览器窗口（iframe 等）接收到的。这个浏览器窗口自己的 Promise 可能和当前窗口 /frame 的不同，因此这样的检查无法识别 Promise实例。还有，库或框架可能会选择实现自己的 Promise，而不是使用原生 ES6 Promise 实现。实际上，很有可能你是在早期根本没有 Promise 实现的浏览器中使用由库提供的 Promise。</p><ul><li>鸭子类型：“如果它看起来像只鸭子，叫起来像只鸭子，那它一定就是只鸭子”</li></ul><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span> \n  p <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> \n  <span class="token punctuation">(</span> \n    <span class="token keyword">typeof</span> p <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> \n    <span class="token keyword">typeof</span> p <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> \n  <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> \n  <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> \n<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 假定这是一个thenable! </span>\n<span class="token punctuation">}</span> \n<span class="token keyword">else</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 不是thenable </span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&quot;world&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> \n</code></pre></div><p>我并不喜欢最后还得用 thenable 鸭子类型检测作为 Promise 的识别方案。还有其他选择，比如 branding，甚至 anti-branding。可我们所用的似乎是针对最差情况的妥协。但情况也并不完全是一片黯淡。后面我们就会看到，thenable 鸭子类型检测还是有用的。只是要清楚，如果 thenable 鸭子类型误把不是 Promise 的东西识别为了 Promise，可能就是有害的。</p><p>Promise 创建对象调用 resolve(..) 或 reject(..) 时，这个 Promise 的then(..) 注册的观察回调就会被自动调度。可以确信，这些被调度的回调在下一个异步事件点上一定会被触发。所以一个同步任务链无法以这种方式运行来实现按照预期有效延迟另一个回调的发生。也就是说，一个 Promise 决议后，这个 Promise 上所有的通过then(..) 注册的回调都会在下一个异步时机点上依次被立即调用。这些回调中的任意一个都无法影响或延误对其他回调的调用。</p><div class="language-js"><pre><code>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;B&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// A B C </span>\n<span class="token comment">// 这里，&quot;C&quot; 无法打断或抢占 &quot;B&quot;，这是因为 Promise 的运作方式。</span>\n\n<span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token string">&quot;B&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">resolve</span><span class="token punctuation">(</span> p3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\np2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// A B &lt;-- 而不是像你可能认为的B A </span>\n</code></pre></div><p>如果在 Promise 的创建过程中或在查看其决议结果过程中的任何时间点上出现了一个 JavaScript 异常错误，比如一个 TypeError 或ReferenceError，那这个异常就会被捕捉，并且会使这个 Promise 被拒绝。</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo未定义，所以会出错！</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 永远不会到达这里 :( </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 永远不会到达这里 :( </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// err将会是一个TypeError异常对象来自foo.bar()这一行</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>如果向 Promise.resolve(..) 传递一个非 Promise、非 thenable 的立即值，就会得到一个用这个值填充的 promise。下面这种情况下，promise p1 和 promise p2 的行为是完全一样的：</p><div class="language-js"><pre><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>而如果向 Promise.resolve(..) 传递一个真正的 Promise，就只会返回同一个 promise：</p><div class="language-js"><pre><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> p1 <span class="token punctuation">)</span><span class="token punctuation">;</span>\np1 <span class="token operator">===</span> p2<span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><p>更重要的是，如果向 Promise.resolve(..) 传递了一个非 Promise 的 thenable 值，前者就会试图展开这个值，而且展开过程会持续到提取出一个具体的非类 Promise 的最终值。</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> \n  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">cb</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token comment">// 这可以工作，但只是因为幸运而已</span>\np \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 永远不会到达这里</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> \n  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span>errcb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">cb</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token function">errcb</span><span class="token punctuation">(</span> <span class="token string">&quot;evil laugh&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \np \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 啊，不应该运行！</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 邪恶的笑</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 这个 p 是一个 thenable，</span>\n</code></pre></div><p>尽管如此，我们还是都可以把这些版本的 p 传给 Promise.resolve(..)，然后就会得到期望Promise中的规范化后的安全结果：</p><div class="language-js"><pre><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> p <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 永远不会到达这里</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>Promise.resolve(..) 可以接受任何 thenable，将其解封为它的非 thenable 值。从 Promise.resolve(..) 得到的是一个真正的 Promise，是一个可以信任的值。如果你传入的已经是真正的 Promise，那么你得到的就是它本身，所以通过 Promise.resolve(..) 过滤来获得可信任性完全没有坏处。</p><div class="language-js"><pre><code><span class="token comment">// 不要只是这么做：</span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 而要这么做：</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21 </span>\n  <span class="token comment">// 用值42填充p2</span>\n  <span class="token keyword">return</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 连接p2 </span>\np2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21 </span>\n  <span class="token comment">// 用值42完成连接的promise </span>\n  <span class="token keyword">return</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 这里是链接的promise </span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>如果需要步骤 2 等待步骤 1 异步来完成一些事情怎么办？我们使用了立即返回 return 语句，这会立即完成链接的 promise。</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21 </span>\n  <span class="token comment">// 创建一个promise并将其返回</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 用值42填充</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>虽然我们把 42 封装到了返回的 promise 中，但它仍然会被展开并最终成为链接的 promise的决议，因此第二个 then(..) 得到的仍然是 42。如果我们向封装的 promise 引入异步，一切都仍然会同样工作：</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21 200 ｜ 第 3 章</span>\n  <span class="token comment">// 创建一个promise并返回</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 引入异步！</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token comment">// 用值42填充</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 在前一步中的100ms延迟之后运行</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>当然，在这些例子中，一步步传递的值是可选的。如果不显式返回一个值，就会隐式返回undefined，并且这些 promise 仍然会以同样的方式链接在一起。这样，每个 Promise 的决议就成了继续下一个步骤的信号。</p><div class="language-js"><pre><code><span class="token comment">// 步骤1：</span>\n<span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1/&quot;</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤2：</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined，出错！</span>\n  <span class="token comment">// 永远不会到达这里</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> response1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤3：</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token parameter">response2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 永远不会到达这里</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token comment">// 捕捉错误的拒绝处理函数</span>\n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 来自foo.bar()的错误TypeError </span>\n    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n<span class="token comment">// 步骤4：</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>Promise.resolve(..) 会将传入的真正 Promise 直接返回，对传入的 thenable 则会展开。如果这个 thenable 展开得到一个拒绝状态，那么从 Promise.resolve(..) 返回的 Promise 实际上就是这同一个拒绝状态。</p><p>Promise(..) 构造器的第一个参数回调会展开 thenable（和 Promise.resolve(..) 一样）或真正的 Promise：</p><div class="language-js"><pre><code><span class="token keyword">var</span> rejectedPr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 用一个被拒绝的promise完成这个promise </span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nrejectedPr<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 永远不会到达这里</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Oops&quot; 206 ｜ 第 3 章</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>前面提到的 reject(..) 不会像 resolve(..) 一 样 进 行 展 开。 如 果 向reject(..) 传入一个 Promise/thenable 值，它会把这个值原封不动地设置为拒绝理由。后续的拒绝处理函数接收到的是你实际传给 reject(..) 的那个Promise/thenable，而不是其底层的立即值。</p><p>对多数开发者来说，错误处理最自然的形式就是同步的 try..catch 结构。遗憾的是，它只能是同步的，无法用于异步代码模式：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    baz<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">try</span> <span class="token punctuation">{</span> Promise ｜ <span class="token number">207</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 后面从 `baz.bar()` 抛出全局错误</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 永远不会到达这里</span>\n<span class="token punctuation">}</span> \n</code></pre></div><p>try..catch 当然很好，但是无法跨异步操作工作。也就是说，还需要一些额外的环境支持。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">try</span> <span class="token punctuation">{</span> \n      <span class="token keyword">var</span> x <span class="token operator">=</span> baz<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token function">cb</span><span class="token punctuation">(</span> <span class="token keyword">null</span><span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功！</span>\n    <span class="token punctuation">}</span> \n    <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token function">cb</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 烦 :( </span>\n  <span class="token punctuation">}</span> \n  <span class="token keyword">else</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 只有在 baz.bar() 调用会同步地立即成功或失败的情况下，这里的 try..catch 才能工作。如果 baz.bar() 本身有自己的异步完成函数，其中的任何异步错误都将无法捕捉到。</span>\n</code></pre></div><p>为了避免丢失被忽略和抛弃的 Promise 错误，一些开发者表示，Promise 链的一个最佳实践就是最后总以一个 catch(..) 结束，比如：</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 数字没有string函数，所以会抛出错误</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> handleErrors <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>默认情况下，Promsie 在下一个任务或时间循环 tick 上（向开发者终端）报告所有拒绝，如果在这个时间点上该 Promise 上还没有注册错误处理函数。</li><li>如果想要一个被拒绝的 Promise 在查看之前的某个时间段内保持被拒绝状态，可以调用defer()（禁止这种错误报告），这个函数优先级高于该 Promise 的自动错误报告。</li></ul><p>Promise.all([ .. ]) 需要一个参数，是一个数组，通常由 Promise 实例组成。从 Promise.all([ .. ]) 调用返回的 promise 会收到一个完成消息（代码片段中的 msg）。这是一个由所有传入 promise 的完成消息组成的数组，与指定的顺序一致（与完成顺序无关）</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个Promise-aware Ajax工具</span>\n<span class="token comment">// 就像我们在本章前面定义的一样</span>\n<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1/&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msgs</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 这里，p1和p2完成并把它们的消息传入</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> msgs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>严格说来，传给Promise.all([ .. ]) 的数组中的值可以是 Promise、thenable，甚至是立即值。就本质而言，列表中的每个值都会通过 Promise.resolve(..) 过滤，以确保要等待的是一个真正的 Promise，所以立即值会被规范化为为这个值构建的 Promise。如果数组是空的，主 Promise 就会立即完成。</p><p>与 Promise.all([ .. ]) 类似，一旦有任何一个 Promise 决议为完成，Promise.race([ .. ])就会完成；一旦有任何一个 Promise 决议为拒绝，它就会拒绝。</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token comment">// 就像我们在本章前面定义的一样</span>\n<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1/&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// p1或者p2将赢得这场竞赛</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> msg \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> fulfilledTh <span class="token operator">=</span> <span class="token punctuation">{</span> \n  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">cb</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> rejectedTh <span class="token operator">=</span> <span class="token punctuation">{</span> \n  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span>errCb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">errCb</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> fulfilledTh <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> rejectedTh <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// p1是完成的promise</span>\n<span class="token comment">// p2是拒绝的promise</span>\n</code></pre></div><p>还要记住，如果传入的是真正的 Promise，Promise.resolve(..) 什么都不会做，只会直接把这个值返回。所以，对你不了解属性的值调用 Promise.resolve(..)，如果它恰好是一个真正的 Promise，是不会有额外的开销的。</p><div class="language-js"><pre><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Oops&quot; </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msgs</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msgs <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [42,&quot;Hello World&quot;] </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>当心！若向 Promise.all([ .. ]) 传入空数组，它会立即完成，但 Promise.race([ .. ]) 会挂住，且永远不会决议。</p><h3 id="生成器"><a class="header-anchor" href="#生成器" aria-hidden="true">#</a> 生成器</h3><p>JavaScript 开发者在代码中几乎普遍依赖的一个假定：一个函数一旦开始执行，就会运行到结束，期间不会有其他代码能够打断它并插入其间。不过 ES6 引入了一个新的函数类型，它并不符合这种运行到结束的特性。这类新的函数被称为生成器。</p><div class="language-js"><pre><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  x<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> <span class="token comment">// 暂停！</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;x:&quot;</span><span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  x<span class="token operator">++</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token comment">// 构造一个迭代器it来控制这个生成器  创建了一个迭代器对象，把它赋给了一个变量 it</span>\n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 这里启动foo()！</span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nx<span class="token punctuation">;</span> <span class="token comment">// 2 </span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nx<span class="token punctuation">;</span> <span class="token comment">// 3 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x: 3 </span>\n</code></pre></div><p>执行过程：</p><ol><li>it = foo() 运算并没有执行生成器 *foo()，而只是构造了一个迭代器（iterator），这个迭代器会控制它的执行。后面会介绍迭代器。</li><li>第一个 it.next() 启动了生成器 *foo()，并运行了 *foo() 第一行的 x++。</li><li>*foo() 在 yield 语句处暂停，在这一点上第一个 it.next() 调用结束。此时 *foo() 仍在运行并且是活跃的，但处于暂停状态。</li><li>我们查看 x 的值，此时为 2。</li><li>我们调用 bar()，它通过 x++ 再次递增 x。</li><li>我们再次查看 x 的值，此时为 3。</li><li>最后的 it.next() 调用从暂停处恢复了生成器 *foo() 的执行，并运行 console.log(..)语句，这条语句使用当前 x 的值 3。</li></ol><p>生成器函数是一个特殊的函数，具有前面我们展示的新的执行模式。但是，它仍然是一个函数，这意味着它仍然有一些基本的特性没有改变。比如，它仍然可以接受参数（即输入），也能够返回值（即输出）。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 启动foo(..) </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><p>首先，传入 6 作为参数 x。然后调用 it.next()，这会启动 *foo(..)。在 *foo(..) 内部，开始执行语句 var y = x ..，但随后就遇到了一个 yield 表达式。它就会在这一点上暂停 *foo(..)（在赋值语句中间！），并在本质上要求调用代码为 yield表达式提供一个结果值。接下来，调用 it.next( 7 )，这一句把值 7 传回作为被暂停的yield 表达式的结果。所以，这时赋值语句实际上就是 var y = 6 * 7。现在，return y 返回值 42 作为调用it.next( 7 ) 的结果。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>一般来说，需要的 next(..) 调用要比 yield 语句多一个，前面的代码片段有一个 yield 和两个 next(..) 调用。因为第一个 next(..) 总是启动一个生成器，并运行到第一个 yield 处。不过，是第二个next(..) 调用完成第一个被暂停的 yield 表达式，第三个 next(..) 调用完成第二个 yield，以此类推。</p></div><p>消息是双向传递的——yield.. 作为一个表达式可以发出消息响应 next(..) 调用，next(..) 也可以向暂停的 yield 表达式发送值。考虑下面这段稍稍调整过的代码：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- yield一个值！</span>\n  <span class="token keyword">return</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一个next()，并不传入任何东西</span>\nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// &quot;Hello&quot; </span>\nres <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向等待的yield传入7</span>\nres<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 42</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提示</p><p>生成器的起始处我们调用第一个 next() 时，还没有暂停的 yield 来接受这样一个值。规范和所有兼容浏览器都会默默丢弃传递给第一个 next() 的任何东西。传值过去仍然不是一个好思路，因为你创建了沉默的无效代码，这会让人迷惑。因此，启动生成器时一定要用不带参数的 next()。</p></div><p>同一个生成器的多个实例可以同时运行，它们甚至可以彼此交互(交替执行)：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> \n  z<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> val1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2 </span>\n<span class="token keyword">var</span> val2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 &lt;-- yield 2 </span>\nval1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 40 &lt;-- x:20, z:2 </span>\nval2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">*</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 600 &lt;-- x:200, z:3 </span>\nit1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val2 <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:300 </span>\n                      <span class="token comment">// 20 300 3 </span>\nit2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> val1 <span class="token operator">/</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y:10 </span>\n                      <span class="token comment">// 200 10 3 </span>\n</code></pre></div><ol><li>*foo() 的两个实例同时启动，两个 next() 分别从 yield 2 语句得到值 2。</li><li>val2 * 10 也就是 2 * 10，发送到第一个生成器实例 it1，因此 x 得到值 20。z 从 1 增加到 2，然后 20 * 2 通过 yield 发出，将 val1 设置为 40。</li><li>val1 * 5 也就是 40 * 5，发送到第二个生成器实例 it2，因此 x 得到值 200。z 再次从 2递增到 3，然后 200 * 3 通过 yield 发出，将 val2 设置为 600。</li><li>val2 / 2 也就是 600 / 2，发送到第一个生成器实例 it1，因此 y 得到值 300，然后打印出 x y z 的值分别是 20 300 3。</li><li>val1 / 4 也就是 40 / 4，发送到第二个生成器实例 it2，因此 y 得到值 10，然后打印出x y z 的值分别为 200 10 3。</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  a<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> \n  b <span class="token operator">=</span> b <span class="token operator">*</span> a<span class="token punctuation">;</span> \n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  b<span class="token operator">--</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span><span class="token punctuation">;</span> \n  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span> \n  b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> last<span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 不管yield出来的是什么，下一次都把它原样传回去！</span>\n    last <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> last <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token comment">// 确保重新设置a和b</span>\na <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b--; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yield 8 </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a++; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = 8 + b; </span>\n      <span class="token comment">// yield 2 </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b = b * a; </span>\n      <span class="token comment">// yield b </span>\n<span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = b + 3; </span>\n<span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b = a * 2; </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12 18 </span>\n</code></pre></div><p>标准的迭代器接口：</p><div class="language-js"><pre><code><span class="token keyword">var</span> something <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> nextVal<span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token punctuation">{</span> \n    <span class="token comment">// for..of循环需要</span>\n    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    <span class="token comment">// 标准迭代器接口方法</span>\n    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextVal <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        nextVal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        nextVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> nextVal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span>nextVal <span class="token punctuation">}</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nsomething<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 1 </span>\nsomething<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 9 </span>\nsomething<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 33 </span>\nsomething<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 105 </span>\n</code></pre></div><p>ES6原生循环语法自动迭代标准迭代器：</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> something<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 不要死循环！</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">break</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1 9 33 105 321 969 </span>\n<span class="token comment">// 因为我们的迭代器 something 总是返回 done:false，因此这个 for..of 循环将永远运行下去，这也就是为什么我们要在里面放一个 break 条件。迭代器永不结束是完全没问题的，但是也有一些情况下，迭代器会在有限的值集合上运行，并最终返回 done:true。</span>\n\n<span class="token comment">// 数组迭代器</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1 3 5 7 9 </span>\n<span class="token comment">// for..of 循环自动调用它的 Symbol.iterator 函数来构建一个迭代器。</span>\n\n<span class="token comment">// 也可以手工调用这个函数，然后使用它返回的迭代器：</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> a<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 1 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 3 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 5 </span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span> \n</code></pre></div><p>迭代器（一个包含可以在其值上迭代<code>iterable</code>的迭代器对象）：接口有next()方法</p><p>从 ES6 开始，从一个 iterable 中提取迭代器的方法是：iterable 必须支持一个函数，其名称是专门的 ES6 符号值 Symbol.iterator。调用这个函数时，它会返回一个迭代器。通常每次调用会返回一个全新的迭代器，虽然这一点并不是必须的</p><p>当你执行一个生成器，就得到了一个迭代器。通过生成器实现前面的这个 something 无限数字序列生产者：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> nextVal<span class="token punctuation">;</span> \n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextVal <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      nextVal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token keyword">else</span> <span class="token punctuation">{</span> \n      nextVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> nextVal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token keyword">yield</span> nextVal<span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 不要死循环！</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">break</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1 9 33 105 321 969 </span>\n</code></pre></div><p>不要忽略了这段 for (var v of something()) .. ！我们并不是像前面的例子那样把something 当作一个值来引用，而是调用了 *something() 生成器以得到它的迭代器供 for..of 循环使用。</p><ul><li>为什么不能用 for (var v of something) .. ？因为这里的 something 是生成器，并不是iterable。我们需要调用 something() 来构造一个生产者供 for..of 循环迭代。</li><li>something() 调用产生一个迭代器，但 for..of 循环需要的是一个 iterable，对吧？是的。生成器的迭代器也有一个 Symbol.iterator 函数，基本上这个函数做的就是 return this，和我们前面定义的 iterable something 一样。换句话说，生成器的迭代器也是一个iterable ！</li></ul><p>for..of 循环的“异常结束”（也就是“提前终止”），通常由 break、return 或者未捕获异常引起，会向生成器的迭代器发送一个信号使其终止。</p><p>严格地说，在循环正常结束之后，for..of 循环也会向迭代器发送这个信号。对于生成器来说，这本质上是没有意义的操作，因为生成器的迭代器需要先完成 for..of 循环才能结束。但是，自定义的迭代器可能会需要从 for..of循环的消费者那里接收这个额外的信号。</p><p>如果在生成器内有 try..finally 语句，它将总是运行，即使生成器已经外部结束。如果需要清理资源的话（数据库连接等），这一点非常有用：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> nextVal<span class="token punctuation">;</span> \n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextVal <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        nextVal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        nextVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> nextVal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">yield</span> nextVal<span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n  <span class="token comment">// 清理子句</span>\n  <span class="token keyword">finally</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;cleaning up!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n</code></pre></div><p>之前的例子中，for..of 循环内的 break 会触发 finally 语句。但是，也可以在外部通过return(..) 手工终止生成器的迭代器实例：</p><div class="language-js"><pre><code><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> it<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 不要死循环！</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> \n    <span class="token comment">// 完成生成器的迭代器</span>\n    it<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 这里不需要break </span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1 9 33 105 321 969 </span>\n<span class="token comment">// 清理！</span>\n<span class="token comment">// Hello World </span>\n</code></pre></div><p>调用 it.return(..) 之后，它会立即终止生成器，这当然会运行 finally 语句。另外，它还会把返回的 value 设置为传入 return(..) 的内容，这也就是 &quot;Hello World&quot; 被传出去的过程。现在我们也不需要包含 break 语句了，因为生成器的迭代器已经被设置为done:true，所以 for..of 循环会在下一个迭代终止。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">ajax</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1/?x=&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">&quot;&amp;y=&quot;</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> \n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token comment">// 向*main()抛出一个错误</span>\n        it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        <span class="token comment">// 用收到的data恢复*main() </span>\n        it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 这里启动！</span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在 yield foo(11,31) 中，首先调用 foo(11,31)，它没有返回值（即返回 undefined），所以我们发出了一个调用来请求数据，但实际上之后做的是 yield undefined。这没问题，因为这段代码当前并不依赖 yield 出来的值来做任何事情。</p><p>所以，生成器在 yield 处暂停，本质上是在提出一个问题：“我应该返回什么值来赋给变量text ？”谁来回答这个问题呢？看一下 foo(..)。如果这个 Ajax 请求成功，我们调用：<code>it.next( data );</code></p><p>这会用响应数据恢复生成器，意味着我们暂停的 yield 表达式直接接收到了这个值。然后随着生成器代码继续运行，这个值被赋给局部变量 text。</p><p>回头往前看一步，思考一下这意味着什么。我们在生成器内部有了看似完全同步的代码（除了 yield 关键字本身），但隐藏在背后的是，在 foo(..) 内的运行可以完全异步。</p><p>这是巨大的改进！对于我们前面陈述的回调无法以顺序同步的、符合我们大脑思考模式的方式表达异步这个问题，这是一个近乎完美的解决方案。</p><p>从本质上而言，我们把异步作为实现细节抽象了出去，使得我们可以以同步顺序的形式追踪流程控制：“发出一个 Ajax 请求，等它完成之后打印出响应结果。”并且，当然，我们只在这个流程控制中表达了两个步骤，而这种表达能力是可以无限扩展的，以便我们无论需要多少步骤都可以表达。</p><p>从生成器向外抛出错误：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引发一个异常！</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// Hello World </span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span> \n  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError </span>\n<span class="token punctuation">}</span> \n</code></pre></div><p>可以捕获通过 throw(..) 抛入生成器的同一个错误，基本上也就是给生成器一个处理它的机会；如果没有处理的话，迭代器代码就必须处理：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span> \n  <span class="token comment">// 永远不会到达这里</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">try</span> <span class="token punctuation">{</span> \n  <span class="token comment">// *main()会处理这个错误吗？看看吧！</span>\n  it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 不行，没有处理！</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops </span>\n<span class="token punctuation">}</span> \n</code></pre></div><p>异步迭代生成器错失了很重要的两点：Promise 的可信任性和可组合性</p><div class="language-js"><pre><code><span class="token comment">// 在运行 Ajax 例子中基于 Promise 的实现方法：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1/?x=&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">&quot;&amp;y=&quot;</span> <span class="token operator">+</span> y \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// foo(..) 没有返回值（undefined），并且我们的迭代器控制代码并不关心 yield 出来的值。</span>\n\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1/?x=&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">&quot;&amp;y=&quot;</span> <span class="token operator">+</span> y \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n<span class="token comment">// 等待promise p决议</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">;</span> \n  <span class="token comment">// 在当前上下文中初始化生成器</span>\n  it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 返回一个promise用于生成器完成</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">handleNext</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token comment">// 对下一个yield出的值运行</span>\n      <span class="token keyword">var</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        <span class="token comment">// 生成器运行完毕了吗？</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n          <span class="token keyword">return</span> next<span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n        <span class="token punctuation">}</span> \n        <span class="token comment">// 否则继续运行</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span> \n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> next<span class="token punctuation">.</span>value <span class="token punctuation">)</span> \n            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n              <span class="token comment">// 成功就恢复异步循环，把决议的值发回生成器</span>\n              handleNext<span class="token punctuation">,</span> \n              <span class="token comment">// 如果value是被拒绝的 promise，</span>\n              <span class="token comment">// 就把错误传回生成器进行出错处理</span>\n              <span class="token keyword">function</span> <span class="token function">handleErr</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> \n                    it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span>\n                  <span class="token punctuation">)</span> \n                  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> handleResult <span class="token punctuation">)</span><span class="token punctuation">;</span> \n              <span class="token punctuation">}</span> \n            <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span> \n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> main <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 它会自动异步运行你传给它的生成器，直到结束。</span>\n</code></pre></div><p>async 与 await</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1/?x=&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">&quot;&amp;y=&quot;</span> <span class="token operator">+</span> y \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 让两个请求&quot;并行&quot;</span>\n  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 等待两个promise都决议</span>\n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">yield</span> p1<span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">yield</span> p2<span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r1 <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> r2 \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 使用前面定义的工具run(..)</span>\n<span class="token function">run</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>观察一下 yield 的位置。p1 和 p2 是并发执行（即“并行”）的用于 Ajax 请求的 promise。哪一个先完成都无所谓，因为 promise 会按照需要在决议状态保持任意长时间。</p><p>然后我们使用接下来的两个 yield 语句等待并取得 promise 的决议（分别写入 r1 和 r2）。如果 p1 先决议，那么 yield p1 就会先恢复执行，然后等待 yield p2 恢复。如果 p2 先决议，它就会耐心保持其决议值等待请求，但是 yield p1 将会先等待，直到 p1 决议。</p><p>不管哪种情况，p1 和 p2 都会并发执行，无论完成顺序如何，两者都要全部完成，然后才会发出 r3 = yield request..Ajax 请求。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 让两个请求&quot;并行&quot;，并等待两个promise都决议</span>\n  <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token keyword">yield</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r2 <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r1 <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> r2 \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 使用前面定义的工具run(..) </span>\n<span class="token function">run</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 注：普通函数，不是生成器</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">url1<span class="token punctuation">,</span>url2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> url1 <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> url2 <span class="token punctuation">)</span> \n  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 隐藏bar(..)内部基于Promise的并发细节</span>\n  <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">bar</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">,</span> \n    <span class="token string">&quot;http://some.url.2&quot;</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r2 <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r1 <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> r2 \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 使用前面定义的工具run(..)</span>\n<span class="token function">run</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在 *foo() 内部，我们所做的一切就是要求 bar(..) 给我们一些 results，并通过 yield来等待结果，这样更简洁也更清晰。我们不需要关心在底层是用 Promise.all([ .. ])Promise 组合来实现这一切。我们把异步，实际上是 Promise，作为一个实现细节看待</p><p>从一个生成器调用另一个生成器，使用辅助函数 run(..)，就像这样：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> r3<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 通过 run(..) &quot;委托&quot;给*foo()</span>\n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">run</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>通过 run(..) 工具从 *bar() 内部运行 *foo()。这里我们利用了如下事实：我们前面定义的 run(..) 返回一个 promise，这个 promise 在生成器运行结束时（或出错退出时）决议。因此，如果从一个 run(..) 调用中 yield 出来一个 promise 到另一个 run(..) 实例中，它会自动暂停 *bar()，直到 *foo() 结束。</p><p>但其实还有一个更好的方法可以实现从 *bar() 调用 *foo()，称为 yield 委托。yield 委托的具体语法是：yield * __（注意多出来的 *）。在我们弄清它在前面的例子中的使用之前，先来看一个简单点的场景：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;*foo() starting&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 生成器 ｜ <span class="token number">263</span>\n  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;*foo() finished&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> \n  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yield委托！</span>\n  <span class="token keyword">yield</span> <span class="token number">5</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 1 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 2 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// *foo()启动</span>\n                  <span class="token comment">// 3 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 4 </span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// *foo()完成</span>\n                  <span class="token comment">// 5</span>\n</code></pre></div><p>调用 foo() 创建一个迭代器。然后 yield * 把迭代器实例控制（当前 *bar() 生成器的）委托给 / 转移到了这另一个 *foo() 迭代器。</p><p>所以，前面两个 it.next() 调用控制的是 *bar()。但当我们发出第三个 it.next() 调用时，*foo() 现在启动了，我们现在控制的是 *foo() 而不是 *bar()。这也是为什么这被称为委托：*bar() 把自己的迭代控制委托给了 *foo()。</p><p>一旦 it 迭代器控制消耗了整个 *foo() 迭代器，it 就会自动转回控制 *bar()。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> r3<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">264</span> ｜ 第 <span class="token number">4</span> 章\n  <span class="token comment">// 通过 yeild* &quot;委托&quot;给*foo()</span>\n  <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>这段代码和前面版本的唯一区别就在于使用了 yield *foo()，而不是前面的 yield run(foo)。</p><p>yield * 暂停了迭代控制，而不是生成器控制。当你调用 *foo() 生成器时，现在 yield 委托到了它的迭代器。但实际上，你可以 yield 委托到任意iterable，yield *[1,2,3] 会消耗数组值 [1,2,3] 的默认迭代器。</p><p>yield 委托的主要目的是代码组织，以达到与普通函数调用的对称。</p><p>想像一下有两个模块分别提供了方法 foo() 和 bar()，其中 bar() 调用了 foo()。一般来说，把两者分开实现的原因是该程序的适当的代码组织要求它们位于不同的函数中。比如，可能有些情况下是单独调用 foo()，另外一些地方则由 bar() 调用 foo()。</p><p>同样是出于这些原因，保持生成器分离有助于程序的可读性、可维护性和可调试性。在这一方面，yield * 是一个语法上的缩写，用于代替手工在 <em>foo() 的步骤上迭代，不过是在</em>bar() 内部。</p><p>yield 委托是如何不只用于迭代器控制工作，也用于双向消息传递工作的呢。认真跟踪下面的通过 yield 委托实现的消息流出入：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *foo():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;B&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *foo():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 生成器 ｜ <span class="token number">265</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// yield委托！</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;E&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: A </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *bar(): 1 </span>\n<span class="token comment">// outside: B </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *foo(): 2 </span>\n<span class="token comment">// outside: C </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *foo(): 3 </span>\n<span class="token comment">// inside *bar(): D </span>\n<span class="token comment">// outside: E </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *bar(): 4 </span>\n<span class="token comment">// outside: F </span>\n</code></pre></div><p>要特别注意 it.next(3) 调用之后的执行步骤。</p><ol><li>值 3（通过 *bar() 内部的 yield 委托）传入等待的 *foo() 内部的 yield &quot;C&quot; 表达式。</li><li>然后 *foo() 调用 return &quot;D&quot;，但是这个值并没有一直返回到外部的 it.next(3) 调用。</li><li>取而代之的是，值 &quot;D&quot; 作为 <em>bar() 内部等待的 yield</em>foo() 表达式的结果发出——这个yield 委托本质上在所有的 *foo() 完成之前是暂停的。所以 &quot;D&quot; 成为 *bar() 内部的最后结果，并被打印出来。</li><li>yield &quot;E&quot; 在 *bar() 内部调用，值 &quot;E&quot; 作为 it.next(3) 调用的结果被 yield 发出。</li></ol><p>实际上，yield 委托甚至并不要求必须转到另一个生成器，它可以转到一个非生成器的一般 iterable。比如：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">266</span> ｜ 第 <span class="token number">4</span> 章\n  <span class="token comment">// yield委托给非生成器！</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token punctuation">[</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;inside *bar():&quot;</span><span class="token punctuation">,</span> <span class="token keyword">yield</span> <span class="token string">&quot;E&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: A </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *bar(): 1 </span>\n<span class="token comment">// outside: B </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: C </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: D </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *bar(): undefined </span>\n<span class="token comment">// outside: E </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// inside *bar(): 5 </span>\n<span class="token comment">// outside: F </span>\n</code></pre></div><p>注意这个例子和之前那个例子在消息接收位置和报告位置上的区别。最显著的是，默认的数组迭代器并不关心通过 next(..) 调用发送的任何消息，所以值 2、3 和 4 根本就被忽略了。还有，因为迭代器没有显式的返回值（和前面使用的 *foo() 不同），所以 yield * 表达式完成后得到的是一个 undefined。</p><p>异常也被委托！和 yield 委托透明地双向传递消息的方式一样，错误和异常也是双向传递的：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    <span class="token keyword">yield</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;error caught inside *foo():&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">yield</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span> \n  <span class="token keyword">throw</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n <span class="token keyword">yield</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span> \n <span class="token keyword">try</span> <span class="token punctuation">{</span> \n  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token punctuation">}</span> \n <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;error caught inside *bar():&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token punctuation">}</span> \n <span class="token keyword">yield</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">;</span> \n <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token comment">// 注：不会到达这里！</span>\n <span class="token keyword">yield</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">throw</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: A </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// outside: B </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// error caught inside *foo(): 2 </span>\n<span class="token comment">// outside: C </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// error caught inside *bar(): D </span>\n<span class="token comment">// outside: E </span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;outside:&quot;</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;error caught outside:&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// error caught outside: F </span>\n</code></pre></div><p>这段代码中需要注意以下几点。</p><ol><li>调用 it.throw(2) 时，它会发送错误消息 2 到 *bar()，它又将其委托给 *foo()，后者捕获并处理它。然后，yield &quot;C&quot; 把 &quot;C&quot; 发送回去作为 it.throw(2) 调用返回的 value。</li><li>接下来从 *foo() 内 throw 出来的值 &quot;D&quot; 传播到 *bar()，这个函数捕获并处理它。然后yield &quot;E&quot; 把 &quot;E&quot; 发送回去作为 it.next(3) 调用返回的 value。</li><li>然后，从 *baz() throw 出来的异常并没有在 *bar() 内被捕获——所以 *baz() 和 *bar()都被设置为完成状态。这段代码之后，就再也无法通过任何后续的 next(..) 调用得到值 &quot;G&quot;，next(..) 调用只会给 value 返回 undefined。</li></ol><p>我们终于回到前面的多个顺序 Ajax 请求的 yield 委托例子：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n <span class="token keyword">var</span> r2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> r2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token keyword">return</span> r3<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token keyword">var</span> r3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r3 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>这里我们在 *bar() 内部没有调用 yield run(foo)，而是调用 yield *foo()。</p><p>在这个例子之前的版本中，使用了 Promise 机制（通过 run(..) 控制）把值从 *foo() 内的return r3 传递给 *bar() 中的局部变量 r3。现在，这个值通过 yield * 机制直接返回。除此之外的行为非常相似。</p><p>当然，yield 委托可以跟踪任意多委托步骤，只要你把它们连在一起。甚至可以使用 yield委托实现异步的生成器递归，即一个 yield 委托到它自身的生成器：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 生成器递归</span>\n  val <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span> val <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url/?v=&quot;</span> <span class="token operator">+</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> r1 <span class="token punctuation">)</span><span class="token punctuation">;</span> 生成器 ｜ <span class="token number">269</span>\n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>run(..) 工具可以通过 run( foo, 3 ) 调用，因为它支持额外的参数和生成器一起传入。但是，这里使用了没有参数的 *bar()，以展示 yield * 的灵活性。</p><ol><li>run(bar) 启动生成器 *bar()。</li><li>foo(3) 创建了一个 *foo(..) 的迭代器，并传入 3 作为其参数 val。</li><li>因为 3 &gt; 1，所以 foo(2) 创建了另一个迭代器，并传入 2 作为其参数 val。</li><li>因为 2 &gt; 1，所以 foo(1) 又创建了一个新的迭代器，并传入 1 作为其参数 val。</li><li>因为 1 &gt; 1 不成立，所以接下来以值 1 调用 request(..)，并从这第一个 Ajax 调用得到一个 promise。</li><li>这个 promise 通过 yield 传出，回到 *foo(2) 生成器实例。</li><li>yield * 把这个 promise 传出回到 *foo(3) 生成器实例。另一个 yield * 把这个 promise传出回到 *bar() 生成器实例。再有一个 yield * 把这个 promise 传出回到 run(..) 工具，这个工具会等待这个 promsie（第一个 Ajax 请求）的处理。</li><li>这个 promise 决议后，它的完成消息会发送出来恢复 <em>bar()；后者通过 yield * 转入</em>foo(3) 实例；后者接着通过 yield * 转入 *foo(2) 生成器实例；后者再接着通过 yield *转入 *foo(3) 生成器实例内部的等待着的普通 yield。</li><li>第一个调用的 Ajax 响应现在立即从 <em>foo(3) 生成器实例中返回。这个实例把值作为</em>foo(2) 实例中 yield * 表达式的结果返回，赋给它的局部变量 val。</li><li>在 *foo(2) 中，通过 request(..) 发送了第二个 Ajax 请求。它的 promise 通过 yield发回给 *foo(1) 实例，然后通过 yield * 一路传递到 run(..)（再次进行步骤 7）。这个promise 决议后，第二个 Ajax 响应一路传播回到 *foo(2) 生成器实例，赋给它的局部变量 val。</li><li>最后，通过 request(..) 发出第三个 Ajax 请求，它的 promise 传出到 run(..)，然后它的决议值一路返回，然后 return 返回到 *bar() 中等待的 yield * 表达式。</li></ol><p>两个同时运行的进程可以合作式地交替运作，而很多时候这可以产生（双关，原文为 yield：既指产生又指 yield 关键字）非常强大的异步表示。</p><div class="language-js"><pre><code><span class="token comment">// 首先，使用 Promise 手工实现：</span>\n<span class="token keyword">var</span> it1 <span class="token operator">=</span> <span class="token function">reqData</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it2 <span class="token operator">=</span> <span class="token function">reqData</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p1 <span class="token operator">=</span> it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \np1 \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> p2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>*reqData(..) 的两个实例都被启动来发送它们的 Ajax 请求，然后通过 yield 暂停。然后我们选择在 p1 决议时恢复第一个实例，然后 p2 的决议会重启第二个实例。通过这种方式，我们使用 Promise 配置确保 res[0] 中会放置第一个响应，而 res[1] 中会放置第二个响应。</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">reqData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 控制转移</span>\n  <span class="token keyword">yield</span><span class="token punctuation">;</span> \n  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it1 <span class="token operator">=</span> <span class="token function">reqData</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> it2 <span class="token operator">=</span> <span class="token function">reqData</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p1 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> p2 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \np1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \np2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在前面的代码中，第二个实例直到第一个实例完全结束才得到数据。但在这里，两个实例都是各自的响应一回来就取得了数据，然后每个实例再次 yield，用于控制传递的目的。 然后我们在 Promise.all([ .. ]) 处理函数中选择它们的恢复顺序。</p><p>可能不那么明显的是，因为对称性，这种方法以更简单的形式暗示了一种可重用的工具。还可以做得更好。来设想一下使用一个称为 runAll(..) 的工具：</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token function">runAll</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 控制转移</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span> \n    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 控制转移</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span> \n    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>以下是 runAll(..) 内部运行的过程。</p><ol><li>第一个生成器从第一个来自于 &quot;<a href="http://some.url.1" target="_blank" rel="noopener noreferrer">http://some.url.1</a>&quot; 的 Ajax 响应得到一个 promise，然后把控制 yield 回 runAll(..) 工具。</li><li>第二个生成器运行，对于 &quot;<a href="http://some.url.2" target="_blank" rel="noopener noreferrer">http://some.url.2</a>&quot; 实现同样的操作，把控制 yield 回runAll(..) 工具。</li><li>第一个生成器恢复运行，通过 yield 传出其 promise p1。在这种情况下，runAll(..) 工具所做的和我们之前的 run(..) 一样，因为它会等待这个 promise 决议，然后恢复同一个生成器（没有控制转移！）。p1 决议后，runAll(..) 使用这个决议值再次恢复第一个生成器，然后 res[0] 得到了自己的值。接着，在第一个生成器完成的时候，有一个隐式的控制转移。</li><li>第二个生成器恢复运行，通过 yield 传出其 promise p2，并等待其决议。一旦决议，runAll(..) 就用这个值恢复第二个生成器，设置 res[1]。</li></ol><p>在这个例子的运行中，我们使用了一个名为 res 的外层变量来保存两个不同的 Ajax 响应结果，我们的并发协调使其成为可能。但是，如果继续扩展 runAll(..) 来提供一个内层的变量空间，以使多个生成器实例可以共享，将是非常有帮助的，比如下面这个称为 data 的空对象。还有，它可以接受 yield 的非Promise 值，并把它们传递到下一个生成器。</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token function">runAll</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    data<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n    <span class="token comment">// 控制转移（以及消息传递）</span>\n    <span class="token keyword">var</span> url1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&quot;http://some.url.2&quot;</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> url1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;http://some.url.1&quot; </span>\n    <span class="token comment">// 控制转移</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span> \n    data<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 控制转移（以及消息传递）</span>\n    <span class="token keyword">var</span> url2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> url2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;http://some.url.2&quot; </span>\n    <span class="token comment">// 控制转移</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span> \n    data<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在这一方案中，实际上两个生成器不只是协调控制转移，还彼此通信，通过 data.res 和yield 的消息来交换 url1 和 url2 的值。真是极其强大！</p><p>这样的实现也为被称作通信顺序进程（Communicating Sequential Processes，CSP）的更高级异步技术提供了一个概念基础。</p><p>形实转换程序（thunk）：JavaScript 中的 thunk 是指一个用于调用另外一个函数的函数，没有任何参数。换句话说，你用一个函数定义封装函数调用，包括需要的任何参数，来定义这个调用的执行，那么这个封装函数就是一个形实转换程序。之后在执行这个 thunk 时，最终就是调用了原始的函数。</p><div class="language-js"><pre><code><span class="token comment">// 同步的 thunk</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 将来</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>\n\n<span class="token comment">// 异步的 thunk</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">cb</span><span class="token punctuation">(</span> x <span class="token operator">+</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cb <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 将来</span>\n<span class="token function">fooThunk</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 但是，你并不会想手工编写 thunk。所以，我们发明一个工具来做这部分封装工作</span>\n<span class="token keyword">function</span> <span class="token function">thunkify</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> cb <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">null</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> fooThunk <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 将来</span>\n<span class="token function">fooThunk</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>thunkory（thunk+factory）。于是就有，thunkify(..) 生成一个 thunkory，然后 thunkory 生成 thunk。</p><div class="language-js"><pre><code><span class="token keyword">var</span> fooThunkory <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooThunk1 <span class="token operator">=</span> <span class="token function">fooThunkory</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooThunk2 <span class="token operator">=</span> <span class="token function">fooThunkory</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 将来</span>\n<span class="token function">fooThunk1</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">fooThunk2</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 更简洁：</span>\n<span class="token keyword">var</span> fooThunkory <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooThunk1 <span class="token operator">=</span> <span class="token function">fooThunkory</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooThunk2 <span class="token operator">=</span> <span class="token function">fooThunkory</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 而不是：生成器 ｜ 277</span>\n<span class="token keyword">var</span> fooThunk1 <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooThunk2 <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在第 3 章里我们定义了一个工具用于 promise 化一个函数，我们称之为Promise.wrap(..)，也可以将其称为 promisify(..) ！这个 Promise 封装工具并不产生Promise，它生成的是 promisory，而 promisory 则接着产生 Promise。这和现在讨论的thunkory 和 thunk 是完全对称的。</p><p>为了说明这种对称性，我们要首先把前面的 foo(..) 例子修改一下，改成使用 error-first 风格的回调：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 假定cb(..)是error-first风格的</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span> <span class="token keyword">null</span><span class="token punctuation">,</span> x <span class="token operator">+</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre></div><p>现在我们对比一下 thunkify(..) 和 promisify(..)（即第 3 章中的 Promise.wrap(..)）的使用：</p><div class="language-js"><pre><code><span class="token comment">// 对称：构造问题提问者</span>\n<span class="token keyword">var</span> fooThunkory <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooPromisory <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 对称：提问</span>\n<span class="token keyword">var</span> fooThunk <span class="token operator">=</span> <span class="token function">fooThunkory</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> fooPromise <span class="token operator">=</span> <span class="token function">fooPromisory</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 得到答案</span>\n<span class="token function">fooThunk</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">else</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 278 ｜ 第 4 章</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 得到promise答案</span>\nfooPromise \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;requesting:&quot;</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops:&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 首先要观察到的是，我们仍然需要一个可以调用的普通函数 foo()，它仍然需要返回一个迭代器。因此，先把非生成器变换的轮廓刻画出来：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n  <span class="token comment">// 构造并返回一个迭代器</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> \n    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// .. </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token function-variable function">throw</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// .. </span>\n  <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 接下来要观察到的是，生成器是通过暂停自己的作用域 / 状态实现它的“魔法”的。可以通过函数闭包来模拟这一点。为了理解这样的代码是如何编写的，我们先给生成器的各个部分标注上状态值</span>\n<span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 状态1 </span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;requesting:&quot;</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> <span class="token constant">TMP1</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 状态2 </span>\n    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">TMP1</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 状态3 </span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops:&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 1 是起始状态，2 是 request(..) 成功后的状态，3 是 request(..) 失败的状态。</span>\n\n<span class="token comment">// 回到我们翻译的生成器，让我们在闭包中定义一个变量 state 用于跟踪状态：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 管理生成器状态</span>\n  <span class="token keyword">var</span> state<span class="token punctuation">;</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> \n\n<span class="token comment">// 现在在闭包内定义一个内层函数，称为 process(..)，使用 switch 语句处理每个状态：</span>\n<span class="token comment">// request(..)是一个支持Promise的Ajax工具 </span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 管理生成器状态282 ｜ 第 4 章</span>\n  <span class="token keyword">var</span> state<span class="token punctuation">;</span> \n  <span class="token comment">// 生成器范围变量声明</span>\n  <span class="token keyword">var</span> val<span class="token punctuation">;</span> \n  <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;requesting:&quot;</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> \n        val <span class="token operator">=</span> v<span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> \n        <span class="token keyword">var</span> err <span class="token operator">=</span> v<span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops:&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 对于每个生成器级的变量声明（val），我们都把它移动为 process(..) 外的一个 val 声明，这样它们就可以在多个 process(..) 调用之间存活。不过块作用域的变量 err 只在状态 3中需要使用，所以把它留在原来的位置。</span>\n<span class="token comment">// 在状态 1，没有了 yield resolve(..)，我们所做的是 return resolve(..)。在终止状态 2，没有显式的 return，所以我们只做一个 return，这等价于 return undefined。在终止状态3，有一个 return false，因此就保留这一句。</span>\n\n<span class="token comment">// 现在需要定义迭代器函数的代码，使这些函数正确调用 process(..)：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 管理生成器状态</span>\n  <span class="token keyword">var</span> state<span class="token punctuation">;</span> \n  <span class="token comment">// 生成器变量范围声明</span>\n  <span class="token keyword">var</span> val<span class="token punctuation">;</span> \n  <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;requesting:&quot;</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> \n        val <span class="token operator">=</span> v<span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> \n        <span class="token keyword">var</span> err <span class="token operator">=</span> v<span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops:&quot;</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> \n  <span class="token comment">// 构造并返回一个生成器</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> \n    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token comment">// 初始状态</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token punctuation">{</span> \n          done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> \n          value<span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n        <span class="token punctuation">}</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token comment">// yield成功恢复</span>\n      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token punctuation">{</span> \n          done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> \n          value<span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span> \n        <span class="token punctuation">}</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token comment">// 生成器已经完成</span>\n      <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        <span class="token keyword">return</span> <span class="token punctuation">{</span> \n          done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> \n          value<span class="token operator">:</span> <span class="token keyword">undefined</span> \n        <span class="token punctuation">}</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    <span class="token string">&quot;throw&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token comment">// 唯一的显式错误处理在状态1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token punctuation">{</span> \n          done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> \n          value<span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span> \n        <span class="token punctuation">}</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token comment">// 否则错误就不会处理，所以只把它抛回</span>\n      <span class="token keyword">else</span> <span class="token punctuation">{</span> \n        <span class="token keyword">throw</span> e<span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre></div><ol><li>对迭代器的 next() 的第一个调用会把生成器从未初始化状态转移到状态 1，然后调用process() 来处理这个状态。request(..) 的返回值是对应 Ajax 响应的 promise，作为value 属性从 next() 调用返回。</li><li>如果 Ajax 请求成功，第二个 next(..) 调用应该发送 Ajax 响应值进来，这会把状态转移到状态 2。再次调用 process(..)（这次包括传入的 Ajax 响应值），从 next(..) 返回的 value 属性将是 undefined。</li><li>然而，如果 Ajax 请求失败的话，就会使用错误调用 throw(..)，这会把状态从 1 转移到3（而非 2）。再次调用 process(..)，这一次包含错误值。这个 case 返回 false，被作为 throw(..) 调用返回的 value 属性。从外部来看（也就是说，只与迭代器交互），这个普通函数 foo(..) 与生成器 *foo(..) 的工作几乎完全一样。所以我们已经成功地把 ES6 生成器转为了前 ES6 兼容代码！然后就可以手工实例化生成器并控制它的迭代器了，调用 var it = foo(&quot;..&quot;) 和it.next(..) 等。甚至更好的是，我们可以把它传给前面定义的工具 run(..)，就像run(foo,&quot;..&quot;)。</li></ol><p>如果使用 regenerator 来转换前面的生成器的话，以下是产生的代码（本书写作之时）：</p><div class="language-js"><pre><code><span class="token comment">// request(..)是一个支持Promise的Ajax工具</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> regeneratorRuntime<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> val<span class="token punctuation">;</span> \n  <span class="token keyword">return</span> regeneratorRuntime<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo$</span><span class="token punctuation">(</span><span class="token parameter">context$<span class="token number">1</span>$<span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>context$<span class="token number">1</span>$<span class="token number">0.</span>prev <span class="token operator">=</span> context$<span class="token number">1</span>$<span class="token number">0.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> \n        context$<span class="token number">1</span>$<span class="token number">0.</span>prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;requesting:&quot;</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> 生成器 ｜ <span class="token number">285</span>\n        context$<span class="token number">1</span>$<span class="token number">0.</span>next <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> \n        val <span class="token operator">=</span> context$<span class="token number">1</span>$<span class="token number">0.</span>sent<span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span> \n        context$<span class="token number">1</span>$<span class="token number">0.</span>next <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> \n        <span class="token keyword">break</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> \n        context$<span class="token number">1</span>$<span class="token number">0.</span>prev <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> \n        context$<span class="token number">1</span>$<span class="token number">0.</span>t0 <span class="token operator">=</span> context$<span class="token number">1</span>$<span class="token number">0.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Oops:&quot;</span><span class="token punctuation">,</span> context$<span class="token number">1</span>$<span class="token number">0.</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">return</span> context$<span class="token number">1</span>$<span class="token number">0.</span><span class="token function">abrupt</span><span class="token punctuation">(</span><span class="token string">&quot;return&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span> \n      <span class="token keyword">case</span> <span class="token string">&quot;end&quot;</span><span class="token operator">:</span> \n        <span class="token keyword">return</span> context$<span class="token number">1</span>$<span class="token number">0.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> foo<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="程序性能"><a class="header-anchor" href="#程序性能" aria-hidden="true">#</a> 程序性能</h3><p>Web Worker是浏览器（即宿主环境）的功能，实际上和 JavaScript 语言本身几乎没什么关系。也就是说，JavaScript 当前并没有任何支持多线程执行的功能。</p><p>像浏览器这样的环境，很容易提供多个 JavaScript 引擎实例，各自运行在自己的线程上，这样你可以在每个线程上运行不同的程序。程序中每一个这样的独立的多线程部分被称为一个（Web）Worker。</p><p>从 JavaScript 主程序（或另一个 Worker）中，可以这样实例化一个 Worker：</p><div class="language-js"><pre><code><span class="token keyword">var</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1/mycoolworker.js&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这个 URL 应该指向一个 JavaScript 文件的位置（而不是一个 HTML 页面！），这个文件将被加载到一个 Worker 中。然后浏览器启动一个独立的线程，让这个文件在这个线程中作为独立的程序运行。</p><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>除了提供一个指向外部文件的 URL，你还可以通过提供一个 Blob URL（另外一个 HTML5 特性）创建一个在线 Worker（Inline Worker)，本质上就是一个存储在单个（二进制）值中的在线文件。</p></div><p>Worker 之间以及它们和主程序之间，不会共享任何作用域或资源。Worker w1 对象是一个事件侦听者和触发者，可以通过订阅它来获得这个 Worker 发出的事件以及发送事件给这个 Worker。</p><div class="language-js"><pre><code><span class="token comment">// 以下是如何侦听事件（其实就是固定的 &quot;message&quot; 事件）：</span>\nw1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n <span class="token comment">// evt.data </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 也可以发送 &quot;message&quot; 事件给这个 Worker：</span>\nw1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token string">&quot;something cool to say&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 在这个 Worker 内部，收发消息是完全对称的：</span>\n<span class="token comment">// &quot;mycoolworker.js&quot; </span>\n<span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n <span class="token comment">// evt.data </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token string">&quot;a really cool reply&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>要在创建 Worker 的程序中终止 Worker，可以调用 Worker 对象（就像前面代码中的 w1）上的 terminate()。突然终止 Worker 线程不会给它任何机会完成它的工作或者清理任何资源。这就类似于通过关闭浏览器标签页来关闭页面。</p><p>在 Worker 内部是无法访问主程序的任何资源的。这意味着你不能访问它的任何全局变量，也不能访问页面的 DOM 或者其他资源。记住，这是一个完全独立的线程。</p><p>但是，你可以执行网络操作（Ajax、WebSockets）以及设定定时器。还有，Worker 可以访问几个重要的全局变量和功能的本地复本，包括 navigator、location、JSON 和applicationCache。</p><p>你还可以通过 importScripts(..) 向 Worker 加载额外的 JavaScript 脚本：</p><div class="language-js"><pre><code><span class="token comment">// 在Worker内部</span>\n<span class="token function">importScripts</span><span class="token punctuation">(</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar.js&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>这些脚本加载是同步的。也就是说，importScripts(..) 调用会阻塞余下 Worker 的执行，直到文件加载和执行完成</p><p>下面是如何使用 postMessage(..)发送一个 Transferable 对象：</p><div class="language-js"><pre><code><span class="token comment">// 比如foo是一个Uint8Array </span>\n<span class="token function">postMessage</span><span class="token punctuation">(</span> foo<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">[</span> foo<span class="token punctuation">.</span>buffer <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>第一个参数是一个原始缓冲区，第二个是一个要传输的内容的列表。</p><p>不支持 Transferable 对象的浏览器就降级到结构化克隆，这会带来性能下降而不是彻底的 功能失效。</p><p>防止重复专用 Worker 来降低系统的资源使用，创建一个整个站点或 app 的所有页面实例都可以共享的中心 Worker。这称为 SharedWorker</p><div class="language-js"><pre><code><span class="token keyword">var</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1/mycoolworker.js&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>因为共享 Worker 可以与站点的多个程序实例或多个页面连接，所以这个 Worker 需要通过某种方式来得知消息来自于哪个程序。这个唯一标识符称为端口（port），可以类比网络socket 的端口。因此，调用程序必须使用 Worker 的 port 对象用于通信：</p><div class="language-js"><pre><code>w1<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> handleMessages <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\nw1<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token string">&quot;something cool&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 还有，端口连接必须要初始化，形式如下：</span>\nw1<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在共享 Worker 内部，必须要处理额外的一个事件：&quot;connect&quot;。这个事件为这个特定的连接提供了端口对象。保持多个连接独立的最简单办法就是使用 port 上的闭包，就像下面的代码一样，把这个链接上的事件侦听和传递定义在 &quot;connect&quot; 事件的处理函数内部：</p><div class="language-js"><pre><code><span class="token comment">// 在共享Worker内部</span>\n<span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 这个连接分配的端口</span>\n  <span class="token keyword">var</span> port <span class="token operator">=</span> evt<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// .. </span>\n    port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// .. </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 初始化端口连接</span>\n  port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>单指令多数据（SIMD）是一种数据并行（data parallelism）方式，与 Web Worker 的任务并行（task parallelism）相对，因为这里的重点实际上不再是把程序逻辑分成并行的块，而是并行处理数据的多个位。</p><p>通过 SIMD，线程不再提供并行。取而代之的是，现代 CPU 通过数字“向量”（特定类型的数组），以及可以在所有这些数字上并行操作的指令，来提供 SIMD 功能。这是利用低级指令级并行的底层运算。</p><p>SIMD JavaScript 计划向 JavaScript 代码暴露短向量类型和 API。在支持 SIMD 的那些系统中，这些运算将会直接映射到等价的 CPU 指令，而在非 SIMD 系统中就会退化回非并行化的运算。</p><div class="language-js"><pre><code><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token constant">SIMD</span><span class="token punctuation">.</span><span class="token function">float32x4</span><span class="token punctuation">(</span> <span class="token number">3.14159</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">32.3</span><span class="token punctuation">,</span> <span class="token number">55.55</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token constant">SIMD</span><span class="token punctuation">.</span><span class="token function">float32x4</span><span class="token punctuation">(</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">4.3</span><span class="token punctuation">,</span> <span class="token number">5.4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token constant">SIMD</span><span class="token punctuation">.</span><span class="token function">int32x4</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">10001</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> v4 <span class="token operator">=</span> <span class="token constant">SIMD</span><span class="token punctuation">.</span><span class="token function">int32x4</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">SIMD</span><span class="token punctuation">.</span>float32x4<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span> v1<span class="token punctuation">,</span> v2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token comment">// [ 6.597339, 67.2, 138.89, 299.97 ] </span>\n<span class="token constant">SIMD</span><span class="token punctuation">.</span>int32x4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> v3<span class="token punctuation">,</span> v4 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token comment">// [ 20, 121, 1031, 10041 ] </span>\n</code></pre></div><h3 id="性能测试与调优"><a class="header-anchor" href="#性能测试与调优" aria-hidden="true">#</a> 性能测试与调优</h3><p>如果被问到如何测试某个运算的速度（执行时间），绝大多数 JavaScript 开发者都会从类似下面的代码开始：</p><div class="language-js"><pre><code><span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者Date.now() </span>\n<span class="token comment">// 进行一些操作</span>\n<span class="token keyword">var</span> end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Duration:&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>如果报告的时间是 0，可能你会认为它的执行时间小于 1ms。但是，这并不十分精确。有些平台的精度并没有达到 1ms，而是以更大的递增间隔更新定时器。比如，Windows（也就是 IE）的早期版本上的精度只有 15ms，这就意味着这个运算的运行时间至少需要这么长才不会被报告为 0 ！</p><p>还有，不管报告的时长是多少，你能知道的唯一一点就是，这个运算的这次特定的运行消耗了大概这么长时间。而它是不是总是以这样的速度运行，你基本上一无所知。你不知道引擎或系统在这个时候有没有受到什么影响，以及其他时候这个运算会不会运行得更快。</p><p>如果时长报告是 4 呢？你能更加确定它的运行需要大概 4ms 吗？不能。它消耗的时间可能要短一些，而且在获得 start 或 end 时间戳之间也可能有其他一些延误。</p><p>更麻烦的是，你也不知道这个运算测试的环境是否过度优化了。有可能 JavaScript 引擎找到了什么方法来优化你这个独立的测试用例，但在更真实的程序中是无法进行这样的优化的，那么这个运算就会比测试时跑得慢。</p><p>下面介绍应该如何使用 Benchmark.js 来运行一个快速的性能测试：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n <span class="token comment">// 要测试的运算</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">var</span> bench <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Benchmark</span><span class="token punctuation">(</span> \n  <span class="token string">&quot;foo test&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 测试名称</span>\n  foo<span class="token punctuation">,</span> <span class="token comment">// 要测试的函数（也即内容）302 ｜ 第 6 章</span>\n  <span class="token punctuation">{</span> \n  <span class="token comment">// .. // 可选的额外选项（参见文档）</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span><span class="token punctuation">;</span> \nbench<span class="token punctuation">.</span>hz<span class="token punctuation">;</span> <span class="token comment">// 每秒运算数</span>\nbench<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>moe<span class="token punctuation">;</span> <span class="token comment">// 出错边界</span>\nbench<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>variance<span class="token punctuation">;</span> <span class="token comment">// 样本方差</span>\n<span class="token comment">// ..</span>\n</code></pre></div><p>Benchmark.js 当然可以用在浏览器中测试 JavaScript，它也可以在非浏览器环境中运行（Node.js 等）。</p><p>有一点非常重要，一定要理解，setup 和 teardown 代码不会在每个测试迭代都运行。最好的理解方法是，想像有一个外层循环（一轮一轮循环）还有一个内层循环（一个测试一个测试循环）。setup 和 teardown 在每次外层循环（轮）的开始和结束处运行，而不是在内层循环中。</p><div class="language-js"><pre><code>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">;</span> \nb <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 然后，你建立了测试 setup 如下：</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span> \n</code></pre></div><p>你的目的可能是确保每个测试迭代开始的 a 值都是 &quot;x&quot;。但并不是这样！只有在每一轮测试开始时 a 值为 &quot;x&quot;，然后重复 + &quot;w&quot; 链接运算会使得 a 值越来越长，即使你只是访问了位置 1 处的字符 &quot;w&quot;。</p><p>对某个东西，比如 DOM，执行产生副作用的操作的时候，比如附加一个子元素，常常会刺伤你。你可能认为你的父元素每次都清空了，但是，实际上它被附加了很多元素，这可能会严重影响测试结果。</p><p><a href="https://github.com/jsperf/jsperf.com/tree/master" target="_blank" rel="noopener noreferrer">性能测试jsPerf</a></p><p>有时候编译器可能会决定执行与你所写的不同的代码，不只是顺序不同，实际内容也会不同。</p><div class="language-js"><pre><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span> \n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">baz</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token keyword">var</span> bar <span class="token operator">=</span> foo <span class="token operator">+</span> baz<span class="token punctuation">;</span> \n      <span class="token comment">// .. </span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>可能你会认为最内层函数中的引用 foo 需要进行三层作用域查找。事实上，编译器通常会缓存这样的查找结果，使得从不同的作用域引用 foo 实际上并没有任何额外的花费。</p><p>尾调用优化：尾调用就是一个出现在另一个函数“结尾”处的函数调用。这个调用结束后就没有其余事情要做了（除了可能要返回结果值）。</p><div class="language-js"><pre><code><span class="token comment">// 以下是一个非递归的尾调用：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尾调用</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">bar</span><span class="token punctuation">(</span> <span class="token number">40</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非尾调用</span>\n<span class="token punctuation">}</span> \n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n</code></pre></div><p>调用一个新的函数需要额外的一块预留内存来管理调用栈，称为栈帧。所以前面的代码一般会同时需要为每个 baz()、bar(..) 和 foo(..) 保留一性能测试与调优 ｜ 317个栈帧。</p><p>然而，如果支持 TCO 的引擎能够意识到 foo(y+1) 调用位于尾部，这意味着 bar(..) 基本上已经完成了，那么在调用 foo(..) 时，它就不需要创建一个新的栈帧，而是可以重用已有的 bar(..) 的栈帧。这样不仅速度更快，也更节省内存。</p><p>在简单的代码片段中，这类优化算不了什么，但是在处理递归时，这就解决了大问题，特别是如果递归可能会导致成百上千个栈帧的时候。有了 TCO，引擎可以用同一个栈帧执行所有这类调用！</p><p>递归是 JavaScript 中一个纷繁复杂的主题。因为如果没有 TCO 的话，引擎需要实现一个随意（还彼此不同！）的限制来界定递归栈的深度，达到了就得停止，以防止内存耗尽。有了 TCO，尾调用的递归函数本质上就可以任意运行，因为再也不需要使用额外的内存！</p><div class="language-js"><pre><code><span class="token comment">// 考虑到前面递归的 factorial(..)，这次重写成 TCO 友好的：</span>\n<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">function</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span> \n    <span class="token keyword">return</span> <span class="token function">fact</span><span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> res <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> <span class="token function">fact</span><span class="token punctuation">(</span> n<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">factorial</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120 </span>\n<span class="token comment">// 这个版本的 factorial(..) 仍然是递归的，但它也是可以 TCO 优化的，因为内部的两次fact(..) 调用的位置都在结尾处。</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>TCO 只用于有实际的尾调用的情况。如果你写了一个没有尾调用的递归函数，那么性能还是会回到普通栈帧分配的情形，引擎对这样的递归调用栈的限制也仍然有效。很多递归函数都可以改写，就像刚刚展示的 factorial(..) 那样，但是需要认真注意细节。</p></div><p><a href="https://github.com/getify/asynquence" target="_blank" rel="noopener noreferrer">异步序列风格</a></p><p>如果一个函数表示序列中的一个普通步骤，那调用这个函数时第一个参数是 continuation回调，所有后续的参数都是从前一个步骤传递过来的消息。直到这个 continuation 回调被调用后，这个步骤才完成。一旦它被调用，传给它的所有参数将会作为消息传入序列中的下一个步骤。</p><p>要向序列中添加额外的普通步骤，可以调用 then(..)（这本质上和 ASQ(..) 调用的语义完全相同）</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">(</span> \n  <span class="token comment">// 步骤1 </span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">done</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token comment">// 步骤2 </span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>greeting</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">done</span><span class="token punctuation">(</span> greeting <span class="token operator">+</span> <span class="token string">&quot; World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n<span class="token comment">// 步骤3 </span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤4 </span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HELLO WORLD </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>尽管 then(..) 和原生 Promise API 名称相同，但是这个 then(..) 是不一样的。你可以向 then(..) 传递任意多个函数或值，其中每一个都会作为一个独立步骤。其中并不涉及两个回调的完成 / 拒绝语义。</p></div><p>和 Promise 不同的一点是：在 Promise 中，如果你要把一个 Promise 链接到下一个，需要创建这个 Promise 并通过 then(..) 完成回调函数返回这个 Promise；而使用 asynquence，你需要做的就是调用 continuation 回调——我一直称之为 done()，但你可以随便给它取什么名字——并可选择性将完成消息传递给它作为参数。</p><p>通过 then(..) 定义的每个步骤都被假定为异步的。如果你有一个同步的步骤，那你可以直接调用 done(..)，也可以使用更简单的步骤辅助函数 val(..)。</p><div class="language-js"><pre><code><span class="token comment">// 步骤1（同步）</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">done</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手工同步</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤2（同步）</span>\n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">greeting</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">&quot; World&quot;</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤3（异步）</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 步骤4（同步）</span>\n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>可以看到，通过 val(..) 调用的步骤并不接受 continuation 回调，因为这一部分已经为你假定了，结果就是参数列表没那么凌乱！如果要给下一个步骤发送消息的话，只需要使用return。可以把 val(..) 看作一个表示同步的“只有值”的步骤，可以用于同步值运算、日志记录及其他类似的操作。</p><p>asynquence 为注册一个序列错误通知处理函数提供了一个 or(..) 序列方法。这个方法还有一个别名，onerror(..)。你可以在序列的任何地方调用这个方法，也可以注册任意多个处理函数。这很容易实现多个不同的消费者在同一个序列上侦听，以得知它有没有失败。从这个角度来说，它有点类似错误事件处理函数。</p><p>和使用 Promise 类似，所有的 JavaScript 异常都成为了序列错误，或者你也可以编写代码来发送一个序列错误信号：</p><div class="language-js"><pre><code><span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 为序列发送出错信号</span>\n    done<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 不会到达这里</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 也不会到达这里</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 之后</span>\nsq<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>asynquence 的错误处理和原生 Promise 还有一个非常重要的区别，就是默认状态下未处理异常的行为。没有注册拒绝处理函数的被拒绝 Promise 就会默默地持有（即吞掉）这个错误。你需要记得总要在链的尾端添加一个最后的 catch(..)。</p><p>而在 asynquence 中，这个假定是相反的。如果一个序列中发生了错误，并且此时没有注册错误处理函数，那这个错误就会被报告到控制台。换句话说，未处理的拒绝在默认情况下总是会被报告，而不会被吞掉和错过。</p><p>一旦你针对某个序列注册了错误处理函数，这个序列就不会产生这样的报告，从而避免了重复的噪音。</p><p>实际上，可能在一些情况下你会想创建一个序列，这个序列可能会在你能够注册处理函数之前就进入了出错状态。这不常见，但偶尔也会发生。</p><p>在这样的情况下，你可以选择通过对这个序列调用 defer() 来避免这个序列实例的错误报告。应该只有在确保你最终会处理这种错误的情况下才选择关闭错误报告：</p><div class="language-js"><pre><code><span class="token keyword">var</span> sq1 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  doesnt<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将会向终端抛出异常</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> sq2 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  doesnt<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只抛出一个序列错误</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 显式避免错误报告</span>\n<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  sq1<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  sq2<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// ReferenceError (from sq1) </span>\n</code></pre></div><p>并非序列中的所有步骤都恰好执行一个（异步）任务。序列中的一个步骤中如果有多个子步骤并行执行则称为 gate(..)（还有一个别名 all(..)，如果你愿意用的话），和原生的Promise.all([..]) 直接对应。</p><div class="language-js"><pre><code><span class="token comment">// 考虑：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> done<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">done</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">done</span><span class="token punctuation">(</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg1<span class="token punctuation">,</span>msg2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello </span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &quot;World&quot;, &quot;!&quot; ] </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 出于展示说明的目的，我们把这个例子与原生 Promise 对比：</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> resolve<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> \n    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n        <span class="token comment">// 注：这里需要一个[ ]数组</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msgs</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello </span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &quot;World&quot;, &quot;!&quot; ] </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>contrib 插件中提供了几个 asynquence 的 gate(..) 步骤类型的变体，非常实用。</p><ul><li>any(..) 类似于 gate(..)，除了只需要一个子步骤最终成功就可以使得整个序列前进。</li><li>first(..) 类似于 any(..)，除了只要有任何步骤成功，主序列就会前进（忽略来自其 他步骤的后续结果）。</li><li>race(..)（对应 Promise.race([..])）类似于 first(..)，除了只要任何步骤完成（成 功或失败），主序列就会前进。</li><li>last(..) 类似于 any(..)，除了只有最后一个成功完成的步骤会将其消息发送给主序列。</li><li>none(..) 是 gate(..) 相反：只有所有的子步骤失败（所有的步骤出错消息被当作成功 消息发送，反过来也是如此），主序列才前进。</li></ul><div class="language-js"><pre><code><span class="token comment">// 让我们先定义一些辅助函数，以便更清楚地进行说明：</span>\n<span class="token keyword">function</span> <span class="token function">success1</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">success2</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">failure3</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    done<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 现在来说明这些 gate(..) 步骤变体的用法：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span> \n  failure3<span class="token punctuation">,</span> \n  success1 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 </span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span> \n  success1<span class="token punctuation">,</span> \n  failure3<span class="token punctuation">,</span>\n  success2 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> \n    args <span class="token comment">// [ 1, undefined, 2 ] </span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span> \n  failure3<span class="token punctuation">,</span> \n  success1<span class="token punctuation">,</span> \n  success2 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span> \n  failure3<span class="token punctuation">,</span> \n  success1<span class="token punctuation">,</span> \n  success2 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 </span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span> \n failure3 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span> <span class="token comment">// 3 </span>\n<span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span> \n  failure3 \n  success1 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>\n</code></pre></div><p>另外一个步骤变体是 map(..)，它使你能够异步地把一个数组的元素映射到不同的值，然后直到所有映射过程都完成，这个步骤才能继续。map(..) 与 gate(..) 非常相似，除了它是从一个数组而不是从独立的特定函数中取得初始值，而且这也是因为你定义了一个回调函数来处理每个值：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> double <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,4,6] </span>\n<span class="token comment">// map(..) 的参数（数组或回调）都可以从前一个步骤传入的消息中接收：</span>\n<span class="token keyword">function</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> asynquence 库 ｜ <span class="token number">329</span>\n    <span class="token function">done</span><span class="token punctuation">(</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> double <span class="token punctuation">)</span> <span class="token comment">// 消息[1,2,3]传入</span>\n<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> plusOne <span class="token punctuation">)</span> <span class="token comment">// 消息[2,4,6]传入</span>\n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,5,7] </span>\n</code></pre></div><p>另外一个变体是 waterfall(..)，这有点类似于 gate(..) 的消息收集特性和 then(..) 的顺序处理特性的混合。</p><p>首先执行步骤 1，然后步骤 1 的成功消息发送给步骤 2，然后两个成功消息发送给步骤 3，然后三个成功消息都到达步骤 4，以此类推。这样，在某种程度上，这些消息集结和层叠下来就构成了“瀑布”（waterfall）。</p><div class="language-js"><pre><code><span class="token comment">// 考虑：</span>\n<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">done</span><span class="token punctuation">(</span> args<span class="token punctuation">[</span>args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">waterfall</span><span class="token punctuation">(</span> \n  double<span class="token punctuation">,</span> <span class="token comment">// [ 3 ] </span>\n  double<span class="token punctuation">,</span> <span class="token comment">// [ 6 ] </span>\n  double<span class="token punctuation">,</span> <span class="token comment">// [ 6, 12 ] </span>\n  double <span class="token comment">// [ 6, 12, 24 ] </span>\n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 6, 12, 24, 48 ] </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 如果“瀑布”中的任何一点出错，整个序列就会立即进入出错状态。</span>\n</code></pre></div><p>try(..) 会试验执行一个步骤，如果成功的话，这个序列就和通常一样继续。如果这个步骤失败的话，失败就会被转化为一个成功消息，格式化为 { catch: .. } 的形式，用出错消息填充：</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">try</span><span class="token punctuation">(</span> success1 <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span> <span class="token comment">// 1 </span>\n<span class="token punctuation">.</span><span class="token function">try</span><span class="token punctuation">(</span> failure3 <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span> <span class="token comment">// { catch: 3 } </span>\n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 永远不会到达这里</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>也可以使用 until(..) 建立一个重试循环，它会试着执行这个步骤，如果失败的话就会在下一个事件循环 tick 重试这个步骤，以此类推。</p><p>这个重试循环可以无限继续，但如果想要从循环中退出的话，可以在完成触发函数中调用标志 break()，触发函数会使主序列进入出错状态：</p><div class="language-js"><pre><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span> double <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span> <span class="token comment">// 6 </span>\n<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  count<span class="token operator">++</span><span class="token punctuation">;</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      done<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token keyword">else</span> <span class="token punctuation">{</span> \n      <span class="token comment">// 跳出until(..)重试循环</span>\n      done<span class="token punctuation">.</span><span class="token function">break</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops</span>\n</code></pre></div><p>如果你喜欢在序列使用类似于 Promise 的 then(..) 和 catch(..)（参见第 3 章）的 Promise风格语义，可以使用 pThen 和 pCatch 插件：</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">pThen</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> msg <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">pThen</span><span class="token punctuation">(</span> output <span class="token punctuation">)</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">.</span><span class="token function">pThen</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 抛出异常</span>\n  doesnt<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">pCatch</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 捕获异常（拒绝）</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError asynquence 库 ｜ 331</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 主序列以成功状态返回，</span>\n  <span class="token comment">// 因为之前的异常被 pCatch(..)捕获了 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>pThen(..) 和 pCatch(..) 是设计用来运行在序列中的，但其行为方式就像是在一个普通的 Promise 链中。因此，可以从传给 pThen(..) 的完成处理函数决议真正的 Promise 或asynquence 序列</p><p>关于 Promise，有一个可能会非常有用的特性，那就是可以附加多个 then(..) 处理函数注册到同一个 promise；在这个 promise 处有效地实现了分叉流程控制：</p><div class="language-js"><pre><code><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">21</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 分叉1（来自p）</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> msg <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 分叉2 （来自p）</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 在 asynquence 里可使用 fork() 实现同样的分叉：</span>\n<span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> sq2 <span class="token operator">=</span> sq<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 分叉1 </span>\nsq<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> \n<span class="token comment">// 分叉2 </span>\nsq2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> \n</code></pre></div><p>如果要实现 fork() 的逆操作，可以使用实例方法 seq(..)，通过把一个序列归入另一个序列来合并这两个序列：</p><div class="language-js"><pre><code><span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">332</span> ｜ 附录 <span class="token constant">A</span>\n    <span class="token function">done</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> done<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// 将sq序列纳入这个序列</span>\n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> sq <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span>\n</code></pre></div><p>正如这里展示的，seq(..) 可以接受一个序列本身，或者一个函数。如果它接收一个函数，那么就要求这个函数被调用时会返回一个序列。因此，前面的代码可以这样实现：</p><div class="language-js"><pre><code><span class="token comment">// .. </span>\n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> sq<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// .. </span>\n<span class="token comment">// 这个步骤也可以通过 pipe(..) 来完成：</span>\n<span class="token comment">// .. </span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 把sq加入done continuation回调</span>\n  sq<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span> done <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token comment">// .. </span>\n<span class="token comment">// 如果一个序列被包含，那么它的成功消息流和出错流都会输入进来。</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 如果序列的某个步骤只是一个普通的值，这个值就映射为这个步骤的完成消息：</span>\n<span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nsq<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 如果你想要构建一个自动出错的序列：a</span>\n<span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> sq <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 不会到达这里</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 也有可能你想自动创建一个延时值或者延时出错的序列。使用 contrib 插件 after 和failAfter，很容易实现：</span>\n<span class="token keyword">var</span> sq1 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> sq2 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">failAfter</span><span class="token punctuation">(</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Oops&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nsq1<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg1<span class="token punctuation">,</span>msg2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg1<span class="token punctuation">,</span> msg2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nsq2<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Oops</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 也可以使用 after(..) 在序列中插入一个延时：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span> \n<span class="token comment">// 在序列中插入一个延时</span>\n<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 通过实例方法 promise(..) 很容易把一个 promise（比如一个 thenable，参见第 3 章）归入到一个序列中：</span>\n<span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span> p <span class="token punctuation">)</span> <span class="token comment">// 也可以： function(){ return p; } </span>\n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 要实现相反的操作以及从一个序列中的某个步骤分叉 / 剔出一个 promise，可以通过 contrib插件 toPromise 实现：</span>\n<span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nsq<span class="token punctuation">.</span><span class="token function">toPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token comment">// 现在这是一个标准promise链</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HELLO WORLD </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 有几个辅助工具可以让 asynquence 与使用回调的系统适配。要从序列中自动生成一个error-first 风格回调以连入到面向回调的工具，可以使用 errfcb：</span>\n<span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 注：期望&quot;error-first风格&quot;回调</span>\n  <span class="token function">someAsyncFuncWithCB</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>errfcb <span class="token punctuation">)</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 注：期望&quot;error-first风格&quot;回调</span>\n<span class="token function">anotherAsyncFuncWithCB</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> sq<span class="token punctuation">.</span><span class="token function">errfcb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 你还可能想要为某个工具创建一个序列封装的版本，类似于第 3 章的 promisory 和第 4 章的 thunkory，asynquence 为此提供了 ASQ.wrap(..)：</span>\n<span class="token keyword">var</span> coolUtility <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span> someAsyncFuncWithCB <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">coolUtility</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>不幸的是，有时候需要实现对 Promise 或步骤的外部控制，这会导致棘手的 capability extraction 问题。</p><div class="language-js"><pre><code><span class="token comment">// 考虑这个 Promise 例子：</span>\n<span class="token keyword">var</span> domready <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 不需把这个放在这里，因为逻辑上这属于另一部分代码</span>\n  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> resolve <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndomready<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// DOM就绪！</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 使用 Promise 的 capability extraction 反模式看起来类似如下：</span>\n<span class="token keyword">var</span> ready<span class="token punctuation">;</span> \n<span class="token keyword">var</span> domready <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 提取resolve()功能</span>\n  ready <span class="token operator">=</span> resolve<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndomready<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// DOM就绪！</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> ready <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>asynquence 提供了一个反转的序列类型，我称之为可迭代序列，它把控制能力外部化了（对于像 domready 这样的用例非常有用）：</p><div class="language-js"><pre><code><span class="token comment">// 注：这里的domready是一个控制这个序列的迭代器</span>\n<span class="token keyword">var</span> domready <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndomready<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// DOM就绪</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> domready<span class="token punctuation">.</span>next <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在第 4 章中我们推导出了一个名为 run(..) 的工具。这个工具可以运行生成器到结束，侦听 yield 出来的 Promise，并使用它们来异步恢复生成器。asynquence 也内建有这样的工具，叫作 runner(..)。</p><div class="language-js"><pre><code><span class="token comment">// 为了展示，我们首先构建一些辅助函数：</span>\n<span class="token keyword">function</span> <span class="token function">doublePr</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">resolve</span><span class="token punctuation">(</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token function">doubleSeq</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token function">done</span><span class="token punctuation">(</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n\n<span class="token comment">// 现在，可以使用 runner(..) 作为序列中的一个步骤：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token comment">// yield一个真正的promise </span>\n  x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">doublePr</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// yield一个序列</span>\n  x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">doubleSeq</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 84 </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>你也可以创建一个自封装的生成器，也就是说，通过 ASQ.wrap(..) 包装实现一个运行指定生成器的普通函数，完成后返回一个序列：</p><div class="language-js"><pre><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> x <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token comment">// yield一个真正的promise </span>\n  x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">doublePr</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// yield一个序列</span>\n  x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">doubleSeq</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> x<span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> gen<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\n<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 68</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 回忆一下：</span>\n<span class="token keyword">var</span> domready <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndomready<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// DOM就绪</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// .. </span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> domready<span class="token punctuation">.</span>next <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 现在，让我们把一个多步骤序列定义为可迭代序列：</span>\n<span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsteps \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP1</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">steps</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP2</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">steps</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP3</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \nsteps<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 16 </span>\nsteps<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 19 </span>\nsteps<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">19</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 76 </span>\nsteps<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>done<span class="token punctuation">;</span> <span class="token comment">// true </span>\n</code></pre></div><p>可以看到，可迭代序列是一个符合标准的迭代器（参见第 4 章）。因此，可通过 ES6 的for..of 循环迭代，就像生成器（或其他任何 iterable）一样：</p><div class="language-js"><pre><code><span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nsteps \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> steps<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 2 4 6 8 10</span>\n</code></pre></div><p>请考虑一个多 Ajax 请求的例子。我们在第 3 章和第 4 章中已经看到过同样的场景，分别通过 Promise 链和生成器实现的。用可迭代序列来表达：</p><div class="language-js"><pre><code><span class="token comment">// 支持序列的ajax </span>\n<span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span> ajax <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> \n  <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP1</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> url <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP2</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span> \n    <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP3</span><span class="token punctuation">(</span><span class="token parameter">r1<span class="token punctuation">,</span>r2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> r1 <span class="token operator">+</span> r2<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>可迭代序列本质上和生成器的行为方式一样。这个事实值得注意，原因如下。</p><p>首先，可迭代序列是 ES6 生成器某个子集的某种前 ES6 等价物。也就是说，你可以直接编写它们（在任意环境运行），或者你也可以编写 ES6 生成器，并将其重编译或转化为可迭代序列（就此而言，也可以是 Promise 链！）。</p><p>把“异步完整运行”的生成器看作是 Promise 链的语法糖，对于认识它们的同构关系是很重要的。</p><div class="language-js"><pre><code><span class="token comment">// 在继续之前，我们应该注意到，前面的代码片段可以用 asynquence 重写如下：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token comment">/*STEP 1*/</span> request <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP2</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP3</span><span class="token punctuation">(</span><span class="token parameter">r1<span class="token punctuation">,</span>r2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> r1 <span class="token operator">+</span> r2<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 而且，步骤 2 也可以这样写：</span>\n<span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span> <span class="token function">STEP2a</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span> \n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span> done <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span> <span class="token function">STEP2b</span><span class="token punctuation">(</span><span class="token parameter">done<span class="token punctuation">,</span>resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span> done <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n</code></pre></div><p>可迭代序列是惰性求值（lazily evaluated），这意味着在可迭代序列的执行过程中，如果需要的话可以用更多的步骤扩展这个序列。只能在可迭代序列的末尾添加步骤，不能插入序列的中间。</p><p>首先，让我们通过一个简单点的（同步）例子来熟悉一下这个功能：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  x <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n  <span class="token comment">// 应该继续扩展吗？</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    isq<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> double <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> x<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 建立单步迭代序列</span>\n<span class="token keyword">var</span> isq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> double <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> ret<span class="token punctuation">;</span> \n  <span class="token punctuation">(</span>ret <span class="token operator">=</span> isq<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ret<span class="token punctuation">.</span>done<span class="token punctuation">;</span> \n<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  v <span class="token operator">=</span> ret<span class="token punctuation">.</span>value<span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre></div><p>一开始这个可迭代序列只定义了一个步骤（isq.then(double)），但这个可迭代序列在某种条件下（x &lt; 500）会持续扩展自己。</p><p>尽管这个例子很平常，也可以通过一个生成器中的 while 循环表达，但我们会考虑到更复杂的情况。</p><p>举例来说，可以查看 Ajax 请求的响应，如果它指出还需要更多的数据，就有条件地向可迭代序列中插入更多的步骤来发出更多的请求。或者你也可以有条件地在 Ajax 处理结尾处增加一个值格式化的步骤。</p><div class="language-js"><pre><code><span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">iterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP1</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> url <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span> \n  <span class="token comment">// 提供了额外的格式化步骤了吗？</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>format<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    steps<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>format <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP2</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 向区列中添加一个Ajax请求吗？</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> resp <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    steps<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP5</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n      <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n      <span class="token string">&quot;http://some.url.4/?v=&quot;</span> <span class="token operator">+</span> text \n      <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token constant">STEP3</span><span class="token punctuation">(</span><span class="token parameter">r1<span class="token punctuation">,</span>r2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> r1 <span class="token operator">+</span> r2<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>你可以看到，在两个不同的位置处，我们有条件地使用 steps.then(..) 扩展了 steps。要运行这个可迭代序列 steps，只需要通过 ASQ#runner(..) 把它链入我们的带有 asynquence序列（这里称为 main）的主程序流程：</p><div class="language-js"><pre><code><span class="token keyword">var</span> main <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> \n  url<span class="token operator">:</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">,</span> \n  <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token constant">STEP4</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> steps <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>可迭代序列 steps 的这一灵活性（有条件行为）可以用生成器表达吗？算是可以吧，但我们不得不以一种有点笨拙的方式重新安排这个逻辑：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">steps</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 步骤1 </span>\n  <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>url <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 步骤2 </span>\n  <span class="token keyword">var</span> rvals <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.2/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token function">request</span><span class="token punctuation">(</span> <span class="token string">&quot;http://some.url.3/?v=&quot;</span> <span class="token operator">+</span> resp <span class="token punctuation">)</span> \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 步骤3 </span>\n  <span class="token keyword">var</span> text <span class="token operator">=</span> rvals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> rvals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n  <span class="token comment">// 步骤4 </span>\n  <span class="token comment">//提供了额外的格式化步骤了吗？</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>format<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    text <span class="token operator">=</span> <span class="token keyword">yield</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token comment">// 步骤5 </span>\n  <span class="token comment">// 需要向序列中再添加一个Ajax请求吗？</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foobar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> resp <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span> \n      <span class="token string">&quot;http://some.url.4/?v=&quot;</span> <span class="token operator">+</span> text \n    <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n  <span class="token keyword">return</span> text<span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 注意：*steps()可以和前面的steps一样被同一个ASQ序列运行</span>\n</code></pre></div><p>除了已经确认的生成器的顺序、看似同步的语法的好处（参见第 4 章），要模拟可扩展可迭代序列 steps 的动态特性，steps 的逻辑也需要以 *steps() 生成器形式重新安排。</p><p>而如果要通过 Promise 或序列来实现这个功能会怎样呢？你可以这么做：</p><div class="language-js"><pre><code><span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token function">something</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// .. </span>\n  <span class="token comment">// 扩展链是吧？</span>\n  steps <span class="token operator">=</span> steps<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 高级异步模式 ｜ <span class="token number">345</span>\n  <span class="token comment">// .. </span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>其中的问题捕捉起来比较微妙，但是很重要。所以，考虑要把我们的 steps Promise 链链入主程序流程。这次使用 Promise 来表达，而不是 asynquence：</p><div class="language-js"><pre><code><span class="token keyword">var</span> main <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> \n  url<span class="token operator">:</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">,</span> \n  <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token constant">STEP4</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">return</span> steps<span class="token punctuation">;</span> <span class="token comment">// hint！</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>序列步骤排序有一个竞态条件。在你返回 steps 的时候，steps 这时可能是之前定义的Promise 链，也可能是现在通过 steps = steps.then(..) 调用指向扩展后的 Promise 链。根据执行顺序的不同，结果可能不同。</p><p>以下是两个可能的结果。</p><ul><li>如果 steps 仍然是原来的 Promise 链，一旦之后它通过 steps = steps.then(..) 被“扩展”，在链结尾处扩展之后的 promise 就不会被 main 流程考虑，因为它已经连到了steps 链。很遗憾，这就是及早求值的局限性。</li><li>如果 steps 已经是扩展后的 Promise 链，它就会按预期工作，因为 main 连接的是扩展后的 promise。</li></ul><p>有一点应该是显而易见的，Promise 是异步工具箱中一个非常强大的工具。但是，因为 Promise 只能决议一次，它们的功能有一个很明显的缺憾就是处理事件流的能力。坦白地说，简单 asynquence 序列恰巧也有同样的弱点。</p><p>考虑这样一个场景，你想要在每次某个事件触发时都启动一系列步骤。单个 Promise 或序列不能代表一个事件的所有发生。因此，你不得不在每次事件发生时创建一整个新的Promise 链（或序列），就像这样：</p><div class="language-js"><pre><code>listener<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;foobar&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// 构造一个新的事件处理promise链</span>\n  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// .. </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>设想一下，把这个范式的反转恢复一下，就像这样：</p><div class="language-js"><pre><code><span class="token keyword">var</span> observable <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;foobar&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 将来</span>\nobservable \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 还有</span>\nobservable \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>值 observable 并不完全是一个 Promise，但你可以像查看 Promise 一样查看它，所以它们是紧密相关的。实际上，它可以被查看多次，并且每次它的事件（&quot;foobar&quot;）发生的时候都会发出通知。</p><p>ES7 提案提出了一个称为 Observable 的新数据类型，这类 Observable 的概念是这样的：“订阅”到一个流的事件的方式是传入一个生成器——实际上其中有用的部分是迭代器——事件每次发生都会调用迭代器的 next(..) 方法。你可以把它想象成类似这样：</p><div class="language-js"><pre><code><span class="token comment">// someEventStream是一个事件流，比如来自鼠标点击或其他</span>\n<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span> someEventStream<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">var</span> evt <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> evt <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>传入的生成器将会 yield 暂停那个 while 循环，等待下一个事件。每次 someEventStream 发布一个新事件，都会调用到附加到生成器实例上的迭代器的 next(..)，因此事件数据会用evt 数据恢复生成器 / 迭代器。</p><p>在这里的对事件的订阅功能中，重要的是迭代器部分，而不是生成器部分。所以，从概念上说，实际上你可以传入任何 iterable，包括 ASQ.iterable() 可迭代序列。</p><p>有趣的是，也有关于适配器的提案来简化从某些流类型构造 Observable，比如用于 DOM事件的 fromEvent(..)。如果你查看前面给出链接的 ES7 提案中建议的 fromEvent(..) 实现，你会发现它看起来和我们在下一节将要看到的 ASQ.react(..) 惊人的相似。</p><p>“响应式序列”:</p><div class="language-js"><pre><code><span class="token comment">// 首先，让我们从如何使用名为 react(..) 的 asynquence 插件工具创建一个 Observable 开始：</span>\n<span class="token keyword">var</span> observable <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  listener<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;foobar&quot;</span><span class="token punctuation">,</span> next <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 现在，来看看如何定义一个能“响应”这个 observable 的序列（在 F/RP 中，这通常称为“订阅”）：</span>\nobservable \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在 F/RP 中，事件流通常从一系列函数变换中穿过，比如 scan(..)、map(..)、reduce(..)，等等。</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">&quot;mybtn&quot;</span> <span class="token punctuation">)</span> \n  <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> btnID <span class="token operator">=</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">;</span> \n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> \n    <span class="token string">&quot;http://some.url.1/?id=&quot;</span> <span class="token operator">+</span> btnID \n  <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>这个响应序列的“响应”部分来自于分配了一个或多个事件处理函数来调用事件触发器（调用 next(..)）。</p><p>响应序列的“序列”部分就和我们已经研究过的序列完全一样：每个步骤可以使用任意合理的异步技术，从 continuation 到 Promise 再到生成器。</p><p>一旦建立起响应序列，只要事件持续触发，它就会持续启动序列实例。如果想要停止响应序列，可以调用 stop()。高级异步模式 ｜ 349</p><p>如果响应序列调用了 stop()，停止了，那你很可能希望事件处理函数也被注销。可以注册一个 teardown 处理函数来实现这个目的：</p><div class="language-js"><pre><code><span class="token keyword">var</span> sq <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">next<span class="token punctuation">,</span>registerTeardown</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">&quot;mybtn&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 一旦sq.stop()被调用就会调用</span>\n  <span class="token function">registerTeardown</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 将来</span>\nsq<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>这里是一个来自 Node.js 世界的例子，使用了响应序列来处理到来的 HTTP 请求：</p><div class="language-js"><pre><code><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 响应式observer </span>\n<span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">next<span class="token punctuation">,</span>registerTeardown</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  server<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span> <span class="token string">&quot;request&quot;</span><span class="token punctuation">,</span> next <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  server<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stop <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token function">registerTeardown</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    server<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span> <span class="token string">&quot;request&quot;</span><span class="token punctuation">,</span> next <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    server<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>stop <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 响应请求</span>\nrequest \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> pullFromDatabase <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 节点清除</span>\nprocess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;SIGINT&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>stop <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 使用 onStream(..) 和 unStream(..)，触发器 next(..) 也很容易适配节点流：</span>\n<span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> fstream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span> <span class="token string">&quot;/some/file&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 把流的&quot;data&quot;事件传给next(..) </span>\n  next<span class="token punctuation">.</span><span class="token function">onStream</span><span class="token punctuation">(</span> fstream <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token comment">// 侦听流结尾</span>\n  fstream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    next<span class="token punctuation">.</span><span class="token function">unStream</span><span class="token punctuation">(</span> fstream <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 也可以通过序列合并来组合多个响应序列流：</span>\n<span class="token keyword">var</span> sq1 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> sq2 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">seq</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> sq3 <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span><span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">gate</span><span class="token punctuation">(</span> \n  sq1<span class="token punctuation">,</span> \n  sq2 \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>设想一个工具 runAll(..)，它能接受两个或更多的生成器，并且并发地执行它们，让它们依次进行合作式 yield 控制，并支持可选的消息传递。</p><p>除了可以运行单个生成器到结束之外，我们在附录 A 讨论的 ASQ#runner(..) 是 runAll(..)概念的一个相似实现，后者可以并发运行多个生成器到结束。</p><p>因此，让我们来看看如何实现第 4 章中并发 Ajax 的场景：</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">(</span> \n <span class="token string">&quot;http://some.url.2&quot;</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// 传递控制</span>\n    <span class="token keyword">yield</span> token<span class="token punctuation">;</span> \n    <span class="token keyword">var</span> url1 <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;http://some.url.1&quot; </span>\n    <span class="token comment">// 清空消息，重新开始</span>\n    token<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> url1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 传递控制</span>\n    <span class="token keyword">yield</span> token<span class="token punctuation">;</span> \n    token<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> url2 <span class="token operator">=</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;http://some.url.2&quot; </span>\n    <span class="token comment">// 传递消息并传递控制</span>\n    token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://some.url.1&quot;</span><span class="token punctuation">;</span> \n    <span class="token keyword">yield</span> token<span class="token punctuation">;</span> \n    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span> url2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 传递控制</span>\n    <span class="token keyword">yield</span> token<span class="token punctuation">;</span> \n    token<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">yield</span> p2 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 把结果传给下一个序列步骤</span>\n    <span class="token keyword">return</span> token<span class="token punctuation">.</span>messages<span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// res[0]来自&quot;http://some.url.1&quot; </span>\n  <span class="token comment">// res[1]来自&quot;http://some.url.2&quot; </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>ASQ#runner(..) 和 runAll(..) 之间的主要区别如下。</p><ul><li>每个生成器（协程）都被提供了一个叫作 token 的参数。这是一个特殊的值，想要显式把控制传递到下一个协程的时候就 yield 这个值。</li><li>token.messages 是一个数组，其中保存了从前面一个序列步骤传入的所有消息。它也是一个你可以用来在协程之间共享消息的数据结构。</li><li>yield一个Promise（或序列）值不会传递控制，而是暂停这个协程处理，直到这个值准备好。</li><li>从协程处理运行最后 return 的或 yield 的值将会被传递到序列中的下一个步骤。</li></ul><p>状态机：让我们来设想这样一个工具。我们将其称为 state(..)，并给它传入两个参数：一个状态值和一个处理这个状态的生成器。创建和返回要传递给 ASQ#runner(..) 的适配器生成器这样的苦活将由 state(..) 负责。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 为这个状态构造一个协程处理函数</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">// 状态转移处理函数</span>\n    <span class="token keyword">function</span> <span class="token function">transition</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> to<span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token comment">// 设定初始状态（如果还未设定的话）</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token comment">// 继续，直到到达最终状态（false）</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      <span class="token comment">// 当前状态与这个处理函数匹配吗？</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token comment">// 委托给状态处理函数</span>\n        <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">handler</span><span class="token punctuation">(</span> transition <span class="token punctuation">)</span><span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n      <span class="token comment">// 还是把控制转移到另一个状态处理函数？</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">yield</span> token<span class="token punctuation">;</span> \n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre></div><p>如果仔细观察的话，可以看到 state(..) 返回了一个接受一个 token 的生成器，然后它建立了一个 while 循环，该循环将持续运行，直到状态机到达终止状态（这里我们随机设定为值 false）。这正是我们想要传给 ASQ#runner(..) 的那一类生成器！</p><p>我们还随意保留了 token.messages[0] 槽位作为放置状态机当前状态的位置，用于追踪，这意味着我们甚至可以把初始状态值作为种子从序列中的前一个步骤传入。</p><p>如何将辅助函数 state(..) 与 ASQ#runner(..) 配合使用呢？</p><div class="language-js"><pre><code><span class="token keyword">var</span> prevState<span class="token punctuation">;</span> \n<span class="token constant">ASQ</span><span class="token punctuation">(</span> \n  <span class="token comment">/*可选：初始状态值 */</span> \n  <span class="token number">2</span> \n<span class="token punctuation">)</span> \n<span class="token comment">// 运行状态机</span>\n<span class="token comment">// 转移: 2 -&gt; 3 -&gt; 1 -&gt; 3 -&gt; false </span>\n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> \n  <span class="token comment">// 状态1处理函数</span>\n  <span class="token function">state</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">stateOne</span><span class="token punctuation">(</span><span class="token parameter">transition</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;in state 1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    prevState <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token keyword">yield</span> <span class="token function">transition</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转移到状态3 </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token comment">// 状态2处理函数</span>\n  <span class="token function">state</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">stateTwo</span><span class="token punctuation">(</span><span class="token parameter">transition</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;in state 2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    prevState <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n    <span class="token keyword">yield</span> <span class="token function">transition</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转移到状态3 </span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token comment">// 状态3处理函数</span>\n  <span class="token function">state</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">stateThree</span><span class="token punctuation">(</span><span class="token parameter">transition</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;in state 3&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      prevState <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> \n      <span class="token keyword">yield</span> <span class="token function">transition</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转移到状态1 </span>\n    <span class="token punctuation">}</span> \n    <span class="token comment">// 完毕! </span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span> \n      <span class="token keyword">yield</span> <span class="token string">&quot;That’s all folks!&quot;</span><span class="token punctuation">;</span> \n      prevState <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> \n      <span class="token keyword">yield</span> <span class="token function">transition</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最终状态</span>\n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">)</span> \n<span class="token comment">// 状态机完毕，继续</span>\n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就这些！</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>有很重要的一点需要指出，生成器 *stateOne(..)、*stateTwo(..) 和 *stateThree(..) 三者本身在每次进入状态时都会被再次调用，而在你通过 transition(..) 转移到其他值时就会结束。尽管这里没有展示，但这些状态生成器处理函数显然可以通过 yield Promise/ 序列 /thunk 来异步暂停。</p><p>底层隐藏的由辅助函数 state(..) 产生并实际上传给 ASQ#runner(..) 的生成器是在整个状态机生存期都持续并发运行的，它们中的每一个都会把协作式 yield 控制传递到下一个，以此类推。</p><p>两个或更多并发运行的生成器可以彼此之间用看似同步的形式进行消息传递，同时保持系统的异步本性，因为每个生成器的代码都被暂停（阻塞）了，等待一个异步动作来恢复。</p><p>这是如何工作的呢？</p><p>设想一个名为 A 的生成器（“进程”），想要发送一个消息给生成器 B。首先 A yield 要发给 B 的这个消息（因此暂停了 A），等 B 就绪并拿到这个消息时，A 就会被恢复（解除阻塞）。</p><p>对称地，设想 A 要接收一个来自 B 的消息。A yield 它对来自于 B 的这个消息的请求（因此暂停 A）。而一旦 B 发送了一个消息，A 就拿到消息并恢复执行。这种 CSP 消息传递的一个更流行的实现来自 ClojureScript 的 core.async 库，还有 go 语言。这些 CSP 实现通过开放在进程间的称为通道（channel）的管道实现了前面描述的通信语义。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>使用术语通道的部分原因是，在一些模式中可以一次发送多个值到通道的缓冲区，这可能类似于你对流的认识。这里我们并不深入探讨，但要了解，对于管理数据流来说，它可以是非常强大的技术。在最简单的 CSP 概念中，我们在 A 和 B 之间创建的通道会有一个名为 take(..) 的方法用于阻塞接收一个值，还有一个名为 put(..) 的方法用于阻塞发送一个值。</p></div><p>这看起来可能类似于：</p><div class="language-js"><pre><code><span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span> ch <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;message sent&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token function">run</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">run</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Hello World </span>\n<span class="token comment">// &quot;message sent&quot;</span>\n</code></pre></div><p>比较这个结构化的、（看似）同步的消息传递交互和 ASQ#runner(..) 通过数组 token.messages 及合作式 yield 提供的非正式非结构化的消息共享机制。本质上，yield put(..)是一个既发送了值也暂停了执行来传递控制的单个操作，而在前面我们给出的例子中这两者是分开的步骤。</p><p>另外，CSP 强调你并不真正显式地传递控制，而是设计并发例程来阻塞等待来自于通道的值或阻塞等待试图发送值到这个通道。协调顺序和协程之间行为的方式就是通过接收和发送消息的阻塞。</p><p>由于我们这里一直讨论的异步模式都是在我的 asynquence 库的大背景下进行的，因此你可能有兴趣看到我们可以相当轻松地在 ASQ#runner(..) 生成器处理上添加一个模拟层，作为CSP API 和特性的近乎完美的移植。这个模拟层作为 asynquence-contrib 包的一个可选部分与 asynquence 一起发布。</p><p>与前面的辅助函数 state(..) 非 常 相 似，ASQ.csp.go(..) 接 受 一 个 生 成 器 —— 在 go/core.async 术语中，它被称为 goroutine——并通过返回一个新的生成器将其适配为可与ASQ#runner(..) 合作。</p><p>goroutine 接收一个最初创建好的通道（ch），而不是被传入一个 token，一次运行中的所有goroutien 都会共享这个通道。你可以通过 ASQ.csp.chan(..) 创建更多的通道（这常常会极其有用！）。</p><p>在 CSP 中，我们把所有的异步都用通道消息上的阻塞来建模，而不是阻塞等待 Promise/ 序列 /thunk 完成。</p><p>因此，不是把从 request(..) 返回的 Promise yield 出来，而是 request(..) 应该返回一个通道，从中你可以 take(..)（拿到）值。换句话说，这种环境和用法下单值通道大致等价于 Promise 或序列。</p><p>我们先来构造一个支持通道的 request(..) 版本：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token function">ajax</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token comment">// putAsync(..)的put(..)的一个变异版本，这个版本</span>\n    <span class="token comment">// 可以在生成器之外使用。返回一个运算完毕promise。</span>\n    <span class="token comment">// 这里我们没有使用这个promise，但是如果当值被</span>\n    <span class="token comment">// take(..)之后我们需要得到通知的话，可以使用这个promise。</span>\n    <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">putAsync</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> content <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">return</span> ch<span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre></div><p>由第 3 章可知，promisory 是生产 Promise 的工具；第 4 章里的 thunkory 是生产 thunk 的工具；以及最后在附录 A 中，我们发明了 sequory 来表示生产序列的工具。</p><p>很自然地，我们要再次构造一个类似的术语以表示生产通道的工具。我们就称之为chanory（channel+factory）吧。作为留给你的练习，请试着定义一个类似于 Promise.wrap(..)/promisify(..)（第 3 章）、thunkify(..)（第 4 章）和 ASQ.wrap(..)（附录 A）的channelify(..) 工具。</p><p>现在考虑使用 asynquence 风格的 CSP 实现的并发 Ajax 的例子：</p><div class="language-js"><pre><code><span class="token constant">ASQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span> \n  <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> <span class="token string">&quot;http://some.url.2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> url1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span> ch <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// &quot;http://some.url.1&quot; </span>\n    <span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span> <span class="token function">request</span><span class="token punctuation">(</span> url1 <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> res1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> url2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span> ch <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// &quot;http://some.url.2&quot; </span>\n    <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> <span class="token string">&quot;http://some.url.1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> res2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span> <span class="token function">request</span><span class="token punctuation">(</span> url2 <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span> ch <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 把结果传递到下一个序列步骤</span>\n    ch<span class="token punctuation">.</span>buffer_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n    <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> res1 <span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token constant">ASQ</span><span class="token punctuation">.</span>csp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> ch<span class="token punctuation">,</span> res2 <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">)</span> \n<span class="token punctuation">)</span> \n<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token comment">// res1来自&quot;http://some.url.1&quot; </span>\n  <span class="token comment">// res2来自&quot;http://some.url.2&quot; </span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre></div><p>在两个 goroutine 之间交换 URL 字符串的消息传递过程是非常直接的。第一个 goroutine 构造一个到第一个 URL 的 Ajax 请求，响应放到通道 ch 中。第二个 goroutine 构造一个到第二个 URL 的 Ajax 请求，然后从通道 ch 拿到第一个响应 res1。这时，两个响应 res1 和res2 便都已经完成就绪了。</p><p>如果在 goroutine 运行结束时，通道 ch 中还有任何剩下的值，那它们就会被传递到序列的下一个步骤。所以，要从最后的 goroutine 传出消息，可以通过 put(..) 将其放入 ch 中。如上所示，为了避免这些最后的 put(..) 阻塞，我们通过将 ch 的 buffer_size 设置为 2（默认：0）而将 ch 切换为缓冲模式。</p><p><a href="https://gist.github.com/getify/e0d04f1f5aa24b1947ae" target="_blank" rel="noopener noreferrer">asynquence 风格的 CSP 的示例</a></p><h2 id="起步上路"><a class="header-anchor" href="#起步上路" aria-hidden="true">#</a> 起步上路</h2><h3 id="深入编程"><a class="header-anchor" href="#深入编程" aria-hidden="true">#</a> 深入编程</h3><h3 id="深入javascript"><a class="header-anchor" href="#深入javascript" aria-hidden="true">#</a> 深入JavaScript</h3><h3 id="深入“你不知道的javascript系列”"><a class="header-anchor" href="#深入“你不知道的javascript系列”" aria-hidden="true">#</a> 深入“你不知道的JavaScript系列”</h3><h2 id="es6及更新版本"><a class="header-anchor" href="#es6及更新版本" aria-hidden="true">#</a> ES6及更新版本</h2><h3 id="es？现在与未来"><a class="header-anchor" href="#es？现在与未来" aria-hidden="true">#</a> ES？现在与未来</h3><h3 id="语法-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3><h3 id="代码组织"><a class="header-anchor" href="#代码组织" aria-hidden="true">#</a> 代码组织</h3><h3 id="异步流控制"><a class="header-anchor" href="#异步流控制" aria-hidden="true">#</a> 异步流控制</h3><h3 id="集合"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><h3 id="新增api"><a class="header-anchor" href="#新增api" aria-hidden="true">#</a> 新增API</h3><h3 id="元编程"><a class="header-anchor" href="#元编程" aria-hidden="true">#</a> 元编程</h3><h3 id="es6之后"><a class="header-anchor" href="#es6之后" aria-hidden="true">#</a> ES6之后</h3>',577);t.render=function(a,p,t,c,e,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
